<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>是方圆啊</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-11T11:46:46.086Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>匡媛</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Uniapp实现多端开发</title>
    <link href="http://example.com/2021/05/05/Uniapp%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    <id>http://example.com/2021/05/05/Uniapp%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%AB%AF%E5%BC%80%E5%8F%91/</id>
    <published>2021-05-05T06:04:52.000Z</published>
    <updated>2021-03-11T11:46:46.086Z</updated>
    
    <content type="html"><![CDATA[<p>#1.uni-app的基本使用</p><p>课程介绍：</p><p>基础部分：</p><ul><li>环境搭建</li><li>页面外观配置</li><li>数据绑定</li><li>uni-app的生命周期</li><li>组件的使用</li><li>uni-app中样式学习</li><li>在uni-app中使用字体图标和开启scss</li><li>条件注释跨端兼容</li><li>uni中的事件</li><li>导航跳转</li><li>组件创建和通讯，及组件的生命周期</li><li>uni-app中使用uni-ui库</li></ul><p>项目：极客商城项目</p><h2 id="1-1-uni-app介绍-官方网页"><a href="#1-1-uni-app介绍-官方网页" class="headerlink" title="1.1 uni-app介绍 官方网页"></a>1.1 uni-app介绍 <a href="https://uniapp.dcloud.io/resource">官方网页</a></h2><p><code>uni-app</code> 是一个使用 <a href="https://vuejs.org/">Vue.js</a> 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉）等多个平台。</p><p>即使不跨端，<code>uni-app</code>同时也是更好的小程序开发框架。</p><p>具有vue和微信小程序的开发经验，可快速上手uni-app</p><p>为什么要去学习uni-app？</p><p>相对开发者来说，减少了学习成本，因为只学会uni-app之后，即可开发出iOS、Android、H5、以及各种小程序的应用，不需要再去学习开发其他应用的框架，相对公司而言，也大大减少了开发成本。</p><h2 id="1-2-环境搭建"><a href="#1-2-环境搭建" class="headerlink" title="1.2 环境搭建"></a>1.2 环境搭建</h2><p>安装编辑器HbuilderX <a href="https://www.dcloud.io/hbuilderx.html">下载地址</a></p><p>HBuilderX是通用的前端开发工具，但为<code>uni-app</code>做了特别强化。</p><p>下载App开发版，可开箱即用</p><p>安装微信开发者工具 <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">下载地址</a></p><h2 id="1-3-利用HbuilderX初始化项目-js"><a href="#1-3-利用HbuilderX初始化项目-js" class="headerlink" title="1.3 利用HbuilderX初始化项目(js)"></a>1.3 利用HbuilderX初始化项目(js)</h2><ul><li>点击HbuilderX菜单栏文件&gt;项目&gt;新建</li><li>选择uni-app,填写项目名称，项目创建的目录</li></ul><h2 id="1-4-使用vue-cli脚手架创建ts项目"><a href="#1-4-使用vue-cli脚手架创建ts项目" class="headerlink" title="1.4 使用vue/cli脚手架创建ts项目"></a>1.4 使用vue/cli脚手架创建ts项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">vue create -p dcloudio&#x2F;uni-preset-vue my-ts</span><br></pre></td></tr></table></figure><h2 id="1-5-运行项目"><a href="#1-5-运行项目" class="headerlink" title="1.5 运行项目"></a>1.5 运行项目</h2><p>在菜单栏中点击运行，运行到浏览器，选择浏览器即可运行</p><p>在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到小程序模拟器 -&gt; 微信开发者工具，即可在微信开发者工具里面体验uni-app</p><p>在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到手机或模拟器 -&gt; 选择调式的手机</p><p><strong>注意：</strong></p><ul><li>如果是第一次使用，需要先配置小程序ide的相关路径，才能运行成功</li><li>微信开发者工具在设置中安全设置，服务端口开启</li></ul><h2 id="1-6-介绍项目目录和文件作用"><a href="#1-6-介绍项目目录和文件作用" class="headerlink" title="1.6 介绍项目目录和文件作用"></a>1.6 介绍项目目录和文件作用</h2><p><code>pages.json</code> 文件用来对 uni-app 进行全局配置，决定页面文件的路径、窗口样式、原生的导航栏、底部的原生tabbar 等</p><p><code>manifest.json</code> 文件是应用的配置文件，用于指定应用的名称、图标、权限等。</p><p><code>App.vue</code>是我们的跟组件，所有页面都是在<code>App.vue</code>下进行切换的，是页面入口文件，可以调用应用的生命周期函数。</p><p><code>main.js</code>是我们的项目入口文件，主要作用是初始化<code>vue</code>实例并使用需要的插件。</p><p><code>uni.scss</code>文件的用途是为了方便整体控制应用的风格。比如按钮颜色、边框风格，<code>uni.scss</code>文件里预置了一批scss变量预置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">就是打包目录，在这里有各个平台的打包文件</span><br><span class="line">​&#96;&#96;&#96;pages&#96;&#96;&#96; 所有的页面存放目录</span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;static&#96;&#96;&#96; 静态资源目录，例如图片等</span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;components&#96;&#96;&#96; 组件存放目录</span><br><span class="line"></span><br><span class="line">为了实现多端兼容，综合考虑编译速度、运行性能等因素，&#96;uni-app&#96; 约定了如下开发规范：</span><br><span class="line"></span><br><span class="line">- 页面文件遵循 [Vue 单文件组件 (SFC) 规范](https:&#x2F;&#x2F;vue-loader.vuejs.org&#x2F;zh&#x2F;spec.html)</span><br><span class="line">- 组件标签靠近小程序规范，详见[uni-app 组件规范](https:&#x2F;&#x2F;uniapp.dcloud.io&#x2F;component&#x2F;README)</span><br><span class="line">- 接口能力（JS API）靠近微信小程序规范，但需将前缀 &#96;wx&#96; 替换为 &#96;uni&#96;，详见[uni-app接口规范](https:&#x2F;&#x2F;uniapp.dcloud.io&#x2F;api&#x2F;README)</span><br><span class="line">- 数据绑定及事件处理同 &#96;Vue.js&#96; 规范，同时补充了App及页面的生命周期</span><br><span class="line">- 为兼容多端运行，建议使用flex布局进行开发</span><br><span class="line"></span><br><span class="line"># 2.vue ts语法</span><br><span class="line"></span><br><span class="line">## 2.1 基本使用</span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;javascript</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">&lt;image class&#x3D;&quot;logo&quot; src&#x3D;&quot;&#x2F;static&#x2F;logo.png&quot;&gt;&lt;&#x2F;image&gt;</span><br><span class="line">&lt;!--属性绑定--&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;text-area&quot;&gt;</span><br><span class="line">&lt;text class&#x3D;&quot;title&quot;&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;text&gt;</span><br><span class="line">&lt;view&gt;&#123;&#123;age&#125;&#125;&lt;&#x2F;view&gt;</span><br><span class="line">&lt;image v-bind:src&#x3D;&quot;img&quot;&gt;&lt;&#x2F;image&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;!--v-if和v-for--&gt;</span><br><span class="line">&lt;view v-for&#x3D;&quot;(item,i) in arr&quot; :key&#x3D;&quot;i&quot;&gt;名字：&#123;&#123;item.name&#125;&#125;---年龄：&#123;&#123;item.age&#125;&#125;&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view v-if&#x3D;&quot;flag&quot;&gt;显示我&lt;&#x2F;view&gt;</span><br><span class="line">&lt;!--点击事件--&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;tapHandle(1,$event)&quot;&gt;点我传参&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button @click.self&#x3D;&quot;printTitle&quot;&gt;点我不传参&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button @click.stop&#x3D;&quot;title &#x3D; &#39;ggg&#39;&quot;&gt;点我修改title&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue,</span><br><span class="line">Watch</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Index extends Vue &#123;</span><br><span class="line">&#x2F;&#x2F;1.响应式属性，对标之前的data函数返回的对象</span><br><span class="line">private title: String &#x3D; &#39;myTitle&#39;;</span><br><span class="line">private num: Number &#x3D; 123;</span><br><span class="line">private img: String &#x3D; &#39;http:&#x2F;&#x2F;destiny001.gitee.io&#x2F;image&#x2F;monkey_02.jpg&#39;</span><br><span class="line">private arr: &#123;&#125; [] &#x3D; [&#123;</span><br><span class="line">name: &#39;刘能&#39;,</span><br><span class="line">age: 29</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: &#39;赵四&#39;,</span><br><span class="line">age: 39</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: &#39;宋小宝&#39;,</span><br><span class="line">age: 49</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: &#39;小沈阳&#39;,</span><br><span class="line">age: 59</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">private flag: Boolean &#x3D; true;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.计算属性</span><br><span class="line">get age(): Number &#123;</span><br><span class="line">return this.num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;3.生命周期</span><br><span class="line">onLoad() &#123;</span><br><span class="line">this.printTitle();</span><br><span class="line">let a: string &#x3D; &#39;123&#39;;</span><br><span class="line">console.log(&quot;onLoad~~~~~~~~~~~~~~~~&quot;)</span><br><span class="line">&#125;</span><br><span class="line">onShow() &#123;</span><br><span class="line">console.log(&quot;onShow~~~~~~~~~~~&quot;)</span><br><span class="line">&#125;</span><br><span class="line">mounted() &#123;</span><br><span class="line">console.log(&quot;mounted~~~~~~~~~~~~~~&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;4.属性监听 此处是监听title的变化</span><br><span class="line">@Watch(&#39;title&#39;)</span><br><span class="line">titleChange(newVal: Number, oldVal: Number) &#123;</span><br><span class="line">console.log(newVal, oldVal);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;5.methods，对标之前methods中写的方法</span><br><span class="line">printTitle(): void &#123; </span><br><span class="line">console.log(&#39;hahahhhaha&#39;)</span><br><span class="line">&#125;</span><br><span class="line">tapHandle(num: number, event: any): void &#123;</span><br><span class="line">console.log(num, event.type)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.content &#123;</span><br><span class="line">display: flex;</span><br><span class="line">flex-direction: column;</span><br><span class="line">align-items: center;</span><br><span class="line">justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.logo &#123;</span><br><span class="line">height: 200rpx;</span><br><span class="line">width: 200rpx;</span><br><span class="line">margin-top: 200rpx;</span><br><span class="line">margin-left: auto;</span><br><span class="line">margin-right: auto;</span><br><span class="line">margin-bottom: 50rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.text-area &#123;</span><br><span class="line">display: flex;</span><br><span class="line">justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.title &#123;</span><br><span class="line">font-size: 36rpx;</span><br><span class="line">color: #8f8f94;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">Javascript</span><br><span class="line">&#x2F;&#x2F;1.vue-class-component：强化 Vue 组件，使用 TypeScript&#x2F;装饰器 增强 Vue 组件</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.vue-property-decorator 是在 vue-class-component 上增强了更多的结合 Vue 特性的装饰器，新增了这 7 个装饰器：</span><br><span class="line">@Emit  </span><br><span class="line">@Inject    </span><br><span class="line">@Model</span><br><span class="line">@Prop</span><br><span class="line">@Provide</span><br><span class="line">@Watch</span><br><span class="line">@Component (从 vue-class-component 继承)</span><br></pre></td></tr></table></figure><h2 id="2-2-uni-app中组件的创建"><a href="#2-2-uni-app中组件的创建" class="headerlink" title="2.2 uni-app中组件的创建"></a>2.2 uni-app中组件的创建</h2><p><a href="https://juejin.im/post/6844903741456384014">https://juejin.im/post/6844903741456384014</a></p><p><a href="https://blog.csdn.net/sllailcp/article/details/102542796/">https://blog.csdn.net/sllailcp/article/details/102542796/</a></p><p><a href="https://www.jianshu.com/p/d8ed3aa76e9b">https://www.jianshu.com/p/d8ed3aa76e9b</a></p><p>在uni-app中，可以通过创建一个后缀名为vue的文件，即创建一个组件成功，其他组件可以将该组件通过impot的方式导入，在通过components进行注册即可</p><ul><li><p>创建head组件，在component中创建head.vue文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">这是头部组件</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123; Component,Vue&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Head extends Vue&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li><li><p>在其他组件中导入该组件并注册</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">&lt;Head&gt;&lt;&#x2F;Head&gt;</span><br><span class="line">&lt;text&gt;</span><br><span class="line">&#123;&#123;msg|msgFormat(&#39;疯狂+1&#39;, &#39;123&#39;)&#125;&#125;</span><br><span class="line">&lt;&#x2F;text&gt;</span><br><span class="line"></span><br><span class="line">&lt;text v-fontsize&#x3D;&quot;15&quot;&gt;测试文字&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line">import Head from &#39;@&#x2F;components&#x2F;head.vue&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;@Component 装饰器可以接收一个对象作为参数，可以在对象中声明 components ，filters，directives等未提供装饰器的选项，也可以声明computed，watch等</span><br><span class="line">@Component(&#123;</span><br><span class="line">components: &#123;</span><br><span class="line">Head</span><br><span class="line">&#125;,</span><br><span class="line">filters: &#123;</span><br><span class="line">msgFormat: function(msg: string, arg: string, arg2: string) &#123;</span><br><span class="line">return msg.replace(&#x2F;少年&#x2F;g, arg + arg2)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#x2F;&#x2F;只在浏览器中有效</span><br><span class="line">directives: &#123; </span><br><span class="line">   &#39;fontsize&#39;: function (el, binding) &#123; </span><br><span class="line">        &#x2F;&#x2F; 注意：这个 function 等同于把代码写到了 bind 和 update 中去</span><br><span class="line">        el.style.fontSize &#x3D; parseInt(binding.value) + &#39;px&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">export default class Index extends Vue &#123;</span><br><span class="line">private msg: String &#x3D; &#39;曾经，我也是一个单纯的少年，单纯的我，傻傻的问，谁是世界上最单纯的男人&#39;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">&lt;Head&gt;&lt;&#x2F;Head&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-3-组件的生命周期函数"><a href="#2-3-组件的生命周期函数" class="headerlink" title="2.3 组件的生命周期函数"></a>2.3 组件的生命周期函数</h2><table><thead><tr><th>beforeCreate</th><th>在实例初始化之后被调用。<a href="https://cn.vuejs.org/v2/api/#beforeCreate">详见</a></th><th></th><th></th></tr></thead><tbody><tr><td>created</td><td>在实例创建完成后被立即调用。<a href="https://cn.vuejs.org/v2/api/#created">详见</a></td><td></td><td></td></tr><tr><td>beforeMount</td><td>在挂载开始之前被调用。<a href="https://cn.vuejs.org/v2/api/#beforeMount">详见</a></td><td></td><td></td></tr><tr><td>mounted</td><td>挂载到实例上去之后调用。<a href="https://cn.vuejs.org/v2/api/#mounted">详见</a> 注意：此处并不能确定子组件被全部挂载，如果需要子组件完全挂载之后在执行操作可以使用<code>$nextTick</code><a href="https://cn.vuejs.org/v2/api/#Vue-nextTick">Vue官方文档</a></td><td></td><td></td></tr><tr><td>beforeUpdate</td><td>数据更新时调用，发生在虚拟 DOM 打补丁之前。<a href="https://cn.vuejs.org/v2/api/#beforeUpdate">详见</a></td><td>仅H5平台支持</td><td></td></tr><tr><td>updated</td><td>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。<a href="https://cn.vuejs.org/v2/api/#updated">详见</a></td><td>仅H5平台支持</td><td></td></tr><tr><td>beforeDestroy</td><td>实例销毁之前调用。在这一步，实例仍然完全可用。<a href="https://cn.vuejs.org/v2/api/#beforeDestroy">详见</a></td><td></td><td></td></tr><tr><td>destroyed</td><td>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。<a href="https://cn.vuejs.org/v2/api/#destroyed">详见</a></td><td></td><td></td></tr></tbody></table><h2 id="2-4-组件的通讯"><a href="#2-4-组件的通讯" class="headerlink" title="2.4 组件的通讯"></a>2.4 组件的通讯</h2><h3 id="2-4-1-父组件给子组件传值"><a href="#2-4-1-父组件给子组件传值" class="headerlink" title="2.4.1 父组件给子组件传值"></a>2.4.1 父组件给子组件传值</h3><p>head.vue通过@props来接受外界传递到组件内部的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">这是头部组件</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue,</span><br><span class="line">Prop</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Head extends Vue &#123;</span><br><span class="line">&#x2F;*</span><br><span class="line">@Prop(options: (PropOptions | Constructor[] | Constructor) &#x3D; &#123;&#125;)</span><br><span class="line"></span><br><span class="line">@Prop装饰器接收一个参数，这个参数可以有三种写法：</span><br><span class="line">Constructor，例如String，Number，Boolean等，指定 prop 的类型；</span><br><span class="line">Constructor[]，指定 prop 的可选类型；</span><br><span class="line">PropOptions，可以使用以下选项：type，default，required，validator。</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;!表示非null 非undefined</span><br><span class="line">@Prop(String) readonly name!: string | undefined;</span><br><span class="line">@Prop(&#123;</span><br><span class="line">default: 30,</span><br><span class="line">type: Number</span><br><span class="line">&#125;) private age!: number;</span><br><span class="line">@Prop([String, Boolean]) private sex!: string | boolean;</span><br><span class="line"></span><br><span class="line">created()&#123;</span><br><span class="line">console.log(this.name,this.age,this.sex)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>其他组件在使用head组件的时候传递值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">&lt;Head :name&#x3D;&quot;name&quot; :age&#x3D;&quot;age&quot; :sex&#x3D;&quot;sex&quot;&gt;&lt;&#x2F;Head&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line">import Head from &#39;@&#x2F;components&#x2F;head.vue&#39;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">components:&#123;</span><br><span class="line">Head</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">export default class Index extends Vue &#123;</span><br><span class="line">private name &#x3D; &#39;张三&#39;;</span><br><span class="line">private age &#x3D; 1;</span><br><span class="line">private sex &#x3D; &#39;nan&#39;;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-4-2-子组件给父组件传值"><a href="#2-4-2-子组件给父组件传值" class="headerlink" title="2.4.2 子组件给父组件传值"></a>2.4.2 子组件给父组件传值</h3><p>通过@emit触发事件进行传递参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">&#x2F;&#x2F;父组件</span><br><span class="line">&lt;Head :name&#x3D;&quot;name&quot; :age&#x3D;&quot;age&quot; :sex&#x3D;&quot;sex&quot; @del&#x3D;&quot;delFromChild&quot; @add&#x3D;&quot;addFromChild&quot;&gt;&lt;&#x2F;Head&gt;</span><br><span class="line"></span><br><span class="line">addFromChild(data: any) &#123;</span><br><span class="line">    &#x2F;&#x2F; this.emitData &#x3D; data;</span><br><span class="line">    console.log(data, &quot;父组件 returnPersons&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">delFromChild(event: MouseEvent,data:any) &#123;</span><br><span class="line">    &#x2F;&#x2F; console.log(this.emitData);</span><br><span class="line">    console.log(event, &quot;父组件 delemit&quot;,data);</span><br><span class="line">&#125;</span><br><span class="line">Javascript</span><br><span class="line">&#x2F;&#x2F;子组件</span><br><span class="line"></span><br><span class="line">&lt;button @click&#x3D;&quot;del($event,&#123;id:1&#125;)&quot;&gt;点击触发del emit&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;add(&#123;name:&#39;张三&#39;&#125;)&quot;&gt;点击触发add emit&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">@Emit 装饰器接收一个可选参数，该参数是$Emit的第一个参数，充当事件名。如果没有提供这个参数，$Emit会将回调函数名的camelCase转为kebab-case，并将其作为事件名；</span><br><span class="line">@Emit会将回调函数的返回值作为第二个参数，如果返回值是一个Promise对象，$emit会在Promise对象被标记为resolved之后触发；</span><br><span class="line">@Emit的回调函数的参数，会放在其返回值之后，一起被$emit当做参数使用。</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;当前组件的del点击事件会触发delClick执行，delClick会触发父组件传递过来的del执行，就相当于之前的this.$emit()</span><br><span class="line">@Emit(&#39;del&#39;) private delClick(event: MouseEvent, data: any) &#123;&#125;</span><br><span class="line">del(event: MouseEvent, data: any) &#123;</span><br><span class="line">    this.delClick(event, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 如果此处不设置别名字,则默认使用下面的函数命名,该函数既代表当前组件的点击事件，又代表触发父组件传递过来的add事件</span><br><span class="line">@Emit()</span><br><span class="line">add(p: &#123;</span><br><span class="line">    name: string</span><br><span class="line">    &#125;) &#123;</span><br><span class="line">    console.log(&quot;add&quot;)</span><br><span class="line">    &#x2F;&#x2F; 此处不return,则会默认使用括号里的参数p;</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-3-兄弟组件通讯"><a href="#2-4-3-兄弟组件通讯" class="headerlink" title="2.4.3 兄弟组件通讯"></a>2.4.3 兄弟组件通讯</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">uni.$emit(eventName,OBJECT)  触发全局的自定事件。</span><br><span class="line">uni.$on(eventName,callback)  监听全局的自定义事件。事件可以由 uni.$emit 触发，回调函数会接收所有传入事件触发函数的额外参数。</span><br><span class="line">uni.$off([eventName, callback])  移除全局自定义事件监听器</span><br><span class="line">Javascript</span><br><span class="line">&#x2F;&#x2F;1.head.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;text&gt;这是头部&lt;&#x2F;text&gt;</span><br><span class="line"></span><br><span class="line">&lt;button @click&#x3D;&quot;send&quot;&gt;点击向head发送数据&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Head extends Vue &#123;</span><br><span class="line">send():void&#123;</span><br><span class="line">uni.$emit(&quot;eventType1&quot;,&quot;你好，head&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.foot.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;text&gt;这是尾巴&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue,</span><br><span class="line">Prop,</span><br><span class="line">Emit</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Head extends Vue &#123;</span><br><span class="line">created()&#123;</span><br><span class="line">uni.$on(&quot;eventType1&quot;,(data:any)&#x3D;&gt;&#123;</span><br><span class="line">console.log(&quot;收到来自foot的数据&quot;,data)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;index.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">&lt;Head&gt;&lt;&#x2F;Head&gt;</span><br><span class="line">&lt;Foot&gt;&lt;&#x2F;Foot&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line">import Head from &#39;@&#x2F;components&#x2F;head.vue&#39;</span><br><span class="line">import Foot from &#39;@&#x2F;components&#x2F;foot.vue&#39;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">components: &#123;</span><br><span class="line">Head,</span><br><span class="line">Foot</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">export default class Index extends Vue &#123;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h1 id="3-全局配置和页面配置"><a href="#3-全局配置和页面配置" class="headerlink" title="3 全局配置和页面配置"></a>3 全局配置和页面配置</h1><h2 id="3-1-通过globalStyle进行全局配置"><a href="#3-1-通过globalStyle进行全局配置" class="headerlink" title="3.1 通过globalStyle进行全局配置"></a>3.1 通过globalStyle进行全局配置</h2><p>用于设置应用的状态栏、导航条、标题、窗口背景色等。<a href="https://uniapp.dcloud.io/collocation/pages?id=globalstyle">详细文档</a></p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>navigationBarBackgroundColor</td><td>HexColor</td><td>#F7F7F7</td><td>导航栏背景颜色（同状态栏背景色）</td></tr><tr><td>navigationBarTextStyle</td><td>String</td><td>white</td><td>导航栏标题颜色及状态栏前景颜色，仅支持 black/white</td></tr><tr><td>navigationBarTitleText</td><td>String</td><td></td><td>导航栏标题文字内容</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>#ffffff</td><td>窗口的背景色</td></tr><tr><td>backgroundTextStyle</td><td>String</td><td>dark</td><td>下拉 loading 的样式，仅支持 dark / light</td></tr><tr><td>enablePullDownRefresh</td><td>Boolean</td><td>false</td><td>是否开启下拉刷新，详见<a href="https://uniapp.dcloud.io/use?id=%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">页面生命周期</a>。</td></tr><tr><td>onReachBottomDistance</td><td>Number</td><td>50</td><td>页面上拉触底事件触发时距页面底部距离，单位只支持px，详见<a href="https://uniapp.dcloud.io/use?id=%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">页面生命周期</a></td></tr></tbody></table><h2 id="3-2-创建新的message页面"><a href="#3-2-创建新的message页面" class="headerlink" title="3.2 创建新的message页面"></a>3.2 创建新的message页面</h2><p>右键pages新建message目录，在message目录下右键新建.vue文件,并选择基本模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">这是信息页面</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h2 id="3-3-通过pages来配置页面"><a href="#3-3-通过pages来配置页面" class="headerlink" title="3.3 通过pages来配置页面"></a>3.3 通过pages来配置页面</h2><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>path</td><td>String</td><td></td><td>配置页面路径</td></tr><tr><td>style</td><td>Object</td><td></td><td>配置页面窗口表现，配置项参考 <a href="https://uniapp.dcloud.io/collocation/pages?id=style">pageStyle</a></td></tr></tbody></table><p>pages数组数组中第一项表示应用启动页</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&quot;pages&quot;: [ </span><br><span class="line">&#123;</span><br><span class="line">&quot;path&quot;:&quot;pages&#x2F;message&#x2F;message&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;path&quot;: &quot;pages&#x2F;index&#x2F;index&quot;,</span><br><span class="line">&quot;style&quot;: &#123;</span><br><span class="line">&quot;navigationBarTitleText&quot;: &quot;uni-app&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>通过style修改页面的标题和导航栏背景色，并且设置h5下拉刷新的特有样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">&quot;pages&quot;: [ &#x2F;&#x2F;pages数组中第一项表示应用启动页，参考：https:&#x2F;&#x2F;uniapp.dcloud.io&#x2F;collocation&#x2F;pages</span><br><span class="line">&#123;</span><br><span class="line">&quot;path&quot;:&quot;pages&#x2F;message&#x2F;message&quot;,</span><br><span class="line">&quot;style&quot;: &#123;</span><br><span class="line">&quot;navigationBarBackgroundColor&quot;: &quot;#007AFF&quot;,</span><br><span class="line">&quot;navigationBarTextStyle&quot;: &quot;white&quot;,</span><br><span class="line">&quot;enablePullDownRefresh&quot;: true,</span><br><span class="line">&quot;disableScroll&quot;: true,</span><br><span class="line">&quot;h5&quot;: &#123;</span><br><span class="line">&quot;pullToRefresh&quot;: &#123;</span><br><span class="line">&quot;color&quot;: &quot;#007AFF&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="3-4-配置tabbar"><a href="#3-4-配置tabbar" class="headerlink" title="3.4 配置tabbar"></a>3.4 配置tabbar</h2><p>如果应用是一个多 tab 应用，可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页。</p><p><strong>Tips</strong></p><ul><li>当设置 position 为 top 时，将不会显示 icon</li><li>tabBar 中的 list 是一个数组，只能配置最少2个、最多5个 tab，tab 按数组的顺序排序。</li></ul><p><strong>属性说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>默认值</th><th>描述</th><th>平台差异说明</th></tr></thead><tbody><tr><td>color</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字默认颜色</td><td></td></tr><tr><td>selectedColor</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字选中时的颜色</td><td></td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>是</td><td></td><td>tab 的背景色</td><td></td></tr><tr><td>borderStyle</td><td>String</td><td>否</td><td>black</td><td>tabbar 上边框的颜色，仅支持 black/white</td><td>App 2.3.4+ 支持其他颜色值</td></tr><tr><td>list</td><td>Array</td><td>是</td><td></td><td>tab 的列表，详见 list 属性说明，最少2个、最多5个 tab</td><td></td></tr><tr><td>position</td><td>String</td><td>否</td><td>bottom</td><td>可选值 bottom、top</td><td>top 值仅微信小程序支持</td></tr></tbody></table><p>其中 list 接收一个数组，数组中的每个项都是一个对象，其属性值如下：</p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>pagePath</td><td>String</td><td>是</td><td>页面路径，必须在 pages 中先定义</td></tr><tr><td>text</td><td>String</td><td>是</td><td>tab 上按钮文字，在 5+APP 和 H5 平台为非必填。例如中间可放一个没有文字的+号图标</td></tr><tr><td>iconPath</td><td>String</td><td>否</td><td>图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px，当 postion 为 top 时，此参数无效，不支持网络图片，不支持字体图标</td></tr><tr><td>selectedIconPath</td><td>String</td><td>否</td><td>选中时的图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px ，当 postion 为 top 时，此参数无效</td></tr></tbody></table><p>案例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">&quot;tabBar&quot;: &#123;</span><br><span class="line">&quot;list&quot;: [</span><br><span class="line">&#123;</span><br><span class="line">&quot;text&quot;: &quot;首页&quot;,</span><br><span class="line">&quot;pagePath&quot;:&quot;pages&#x2F;index&#x2F;index&quot;,</span><br><span class="line">&quot;iconPath&quot;:&quot;static&#x2F;tabs&#x2F;home.png&quot;,</span><br><span class="line">&quot;selectedIconPath&quot;:&quot;static&#x2F;tabs&#x2F;home-active.png&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;text&quot;: &quot;信息&quot;,</span><br><span class="line">&quot;pagePath&quot;:&quot;pages&#x2F;message&#x2F;message&quot;,</span><br><span class="line">&quot;iconPath&quot;:&quot;static&#x2F;tabs&#x2F;message.png&quot;,</span><br><span class="line">&quot;selectedIconPath&quot;:&quot;static&#x2F;tabs&#x2F;message-active.png&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;text&quot;: &quot;我们&quot;,</span><br><span class="line">&quot;pagePath&quot;:&quot;pages&#x2F;contact&#x2F;contact&quot;,</span><br><span class="line">&quot;iconPath&quot;:&quot;static&#x2F;tabs&#x2F;contact.png&quot;,</span><br><span class="line">&quot;selectedIconPath&quot;:&quot;static&#x2F;tabs&#x2F;contact-active.png&quot;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-condition启动模式配置"><a href="#3-5-condition启动模式配置" class="headerlink" title="3.5 condition启动模式配置"></a>3.5 condition启动模式配置</h2><p>启动模式配置，仅开发期间生效，用于模拟直达页面的场景，如：小程序转发后，用户点击所打开的页面。</p><p>记得要在微信开发工具里选中你要调试的模式</p><p><strong>属性说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th></tr></thead><tbody><tr><td>current</td><td>Number</td><td>是</td><td>当前激活的模式，list节点的索引值</td></tr><tr><td>list</td><td>Array</td><td>是</td><td>启动模式列表</td></tr></tbody></table><p><strong>list说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>String</td><td>是</td><td>启动模式名称</td></tr><tr><td>path</td><td>String</td><td>是</td><td>启动页面路径</td></tr><tr><td>query</td><td>String</td><td>否</td><td>启动参数，可在页面的 <a href="https://uniapp.dcloud.io/use?id=%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">onLoad</a> 函数里获得</td></tr></tbody></table><h1 id="4-uni基础组件的基本使用"><a href="#4-uni基础组件的基本使用" class="headerlink" title="4 uni基础组件的基本使用"></a>4 uni基础组件的基本使用</h1><p>uni-app提供了丰富的基础组件给开发者，开发者可以像搭积木一样，组合各种组件拼接称自己的应用</p><p>uni-app中的组件，就像 <code>HTML</code> 中的 <code>div</code> 、<code>p</code>、<code>span</code> 等标签的作用一样，用于搭建页面的基础结构</p><h2 id="4-1-text文本组件的用法"><a href="#4-1-text文本组件的用法" class="headerlink" title="4.1 text文本组件的用法"></a>4.1 text文本组件的用法</h2><h4 id="001-text-组件的属性"><a href="#001-text-组件的属性" class="headerlink" title="001 - text 组件的属性"></a>001 - text 组件的属性</h4><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>selectable</td><td>boolean</td><td>false</td><td>否</td><td>文本是否可选</td></tr><tr><td>space</td><td>string</td><td>.</td><td>否</td><td>显示连续空格，可选参数：<code>ensp</code>、<code>emsp</code>、<code>nbsp</code></td></tr><tr><td>decode</td><td>boolean</td><td>false</td><td>否</td><td>是否解码</td></tr></tbody></table><ul><li><code>text</code> 组件相当于行内标签、在同一行显示</li><li>除了文本节点以外的其他节点都无法长按选中</li></ul><h4 id="002-代码案例"><a href="#002-代码案例" class="headerlink" title="002 - 代码案例"></a>002 - 代码案例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;!-- 长按文本是否可选 --&gt;</span><br><span class="line">  &lt;text selectable&#x3D;&#39;true&#39;&gt;来了老弟&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;!-- 显示连续空格的方式 --&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;text space&#x3D;&#39;ensp&#39;&gt;来了  老弟&lt;&#x2F;text&gt;</span><br><span class="line">  &lt;&#x2F;view&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;text space&#x3D;&#39;emsp&#39;&gt;来了  老弟&lt;&#x2F;text&gt;</span><br><span class="line">  &lt;&#x2F;view&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;text space&#x3D;&#39;nbsp&#39;&gt;来了  老弟&lt;&#x2F;text&gt;</span><br><span class="line">  &lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;text&gt;skyblue&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;!-- 是否解码 --&gt;</span><br><span class="line">  &lt;text decode&#x3D;&#39;true&#39;&gt;&amp;nbsp; &lt; &gt; &amp; &amp;apos; &amp;ensp; &amp;emsp;&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure><h2 id="4-2-view视图容器组件的用法"><a href="#4-2-view视图容器组件的用法" class="headerlink" title="4.2 view视图容器组件的用法"></a>4.2 view视图容器组件的用法</h2><blockquote><p>View 视图容器， 类似于 HTML 中的 div</p></blockquote><h4 id="001-组件的属性"><a href="#001-组件的属性" class="headerlink" title="001 - 组件的属性"></a>001 - 组件的属性</h4><p><a href="https://ehbhgh.github.io/2019/11/29/%E5%88%9D%E5%A7%8Buniapp/images/2view.png"><img src="https://ehbhgh.github.io/2019/11/29/%E5%88%9D%E5%A7%8Buniapp/images/2view.png" alt="img"></a></p><h4 id="002-代码案例-1"><a href="#002-代码案例-1" class="headerlink" title="002 - 代码案例"></a>002 - 代码案例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;view class&#x3D;&quot;box2&quot; hover-class&#x3D;&quot;box2_active&quot;&gt;</span><br><span class="line">  &lt;view class&#x3D;&#39;box1&#39; hover-class&#x3D;&#39;active&#39; hover-stop-propagation :hover-start-time&#x3D;&quot;2000&quot; :hover-stay-time&#x3D;&#39;2000&#39;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure><h2 id="4-3-button按钮组件的用法"><a href="#4-3-button按钮组件的用法" class="headerlink" title="4.3 button按钮组件的用法"></a>4.3 button按钮组件的用法</h2><h4 id="001-组件的属性-1"><a href="#001-组件的属性-1" class="headerlink" title="001 - 组件的属性"></a>001 - 组件的属性</h4><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>size</td><td>String</td><td>default</td><td>按钮的大小</td></tr><tr><td>type</td><td>String</td><td>default</td><td>按钮的样式类型</td></tr><tr><td>plain</td><td>Boolean</td><td>false</td><td>按钮是否镂空，背景色透明</td></tr><tr><td>disabled</td><td>Boolean</td><td>false</td><td>是否按钮</td></tr><tr><td>loading</td><td>Boolean</td><td>false</td><td>名称是否带 loading t图标</td></tr></tbody></table><ul><li><code>button</code> 组件默认独占一行，设置 <code>size</code> 为 <code>mini</code> 时可以在一行显示多个</li></ul><h4 id="002-案例代码"><a href="#002-案例代码" class="headerlink" title="002 - 案例代码"></a>002 - 案例代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;button size&#x3D;&#39;mini&#39; type&#x3D;&#39;primary&#39;&gt;前端&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;button size&#x3D;&#39;mini&#39; type&#x3D;&#39;default&#39; disabled&#x3D;&#39;true&#39;&gt;前端&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;button size&#x3D;&#39;mini&#39; type&#x3D;&#39;warn&#39; loading&#x3D;&#39;true&#39;&gt;前端&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><h3 id="1-7-4-image组件的使用"><a href="#1-7-4-image组件的使用" class="headerlink" title="1.7.4 image组件的使用"></a>1.7.4 image组件的使用</h3><p><a href="https://uniapp.dcloud.io/component/image?id=image">image</a>图片。</p><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th><th>平台差异说明</th></tr></thead><tbody><tr><td>src</td><td>String</td><td></td><td>图片资源地址</td><td></td></tr><tr><td>mode</td><td>String</td><td>‘scaleToFill’</td><td>图片裁剪、缩放的模式</td><td></td></tr></tbody></table><p><strong>Tips</strong></p><ul><li><code>&lt;image&gt;</code> 组件默认宽度 300px、高度 225px；</li><li><code>src</code> 仅支持相对路径、绝对路径，支持 base64 码；</li><li>页面结构复杂，css样式太多的情况，使用 image 可能导致样式生效较慢，出现 “闪一下” 的情况，此时设置 <code>image&#123;will-change: transform&#125;</code> ,可优化此问题。</li></ul><h1 id="5-uni-app中的样式"><a href="#5-uni-app中的样式" class="headerlink" title="5 uni-app中的样式"></a>5 uni-app中的样式</h1><ul><li><p>rpx 即响应式px，一种根据屏幕宽度自适应的动态单位。以750宽的屏幕为基准，750rpx恰好为屏幕宽度。屏幕变宽，rpx 实际显示效果会等比放大。</p></li><li><p>使用<code>@import</code>语句可以导入外联样式表，<code>@import</code>后跟需要导入的外联样式表的相对路径，用<code>;</code>表示语句结束</p></li><li><p>支持基本常用的选择器class、id、element等</p></li><li><p>在 <code>uni-app</code> 中不能使用 <code>*</code> 选择器。</p></li><li><p><code>page</code> 相当于 <code>body</code> 节点</p></li><li><p>定义在 App.vue 中的样式为全局样式，作用于每一个页面。在 pages 目录下 的 vue 文件中定义的样式（scoped）为局部样式，只作用在对应的页面，并会覆盖 App.vue 中相同的选择器。</p></li><li><p><code>uni-app</code> 支持使用字体图标，使用方式与普通 <code>web</code> 项目相同，需要注意以下几点：</p><ul><li><p>字体文件小于 40kb，<code>uni-app</code> 会自动将其转化为 base64 格式；</p></li><li><p>字体文件大于等于 40kb， 需开发者自己转换，否则使用将不生效；</p></li><li><p>字体文件的引用路径推荐使用以 ~@ 开头的绝对路径。</p></li><li><p><a href="https://www.jianshu.com/p/f423b4e937af">https://www.jianshu.com/p/f423b4e937af</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">@font-face &#123;</span><br><span class="line">    font-family: test1-icon;</span><br><span class="line">    src: url(&#39;~@&#x2F;static&#x2F;iconfont.ttf&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>如何使用scss或者less</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">&#x2F;&#x2F;1.安装插件</span><br><span class="line">npm install less less-loader --save</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.vue文件中使用 &lt;style lang&#x3D;&quot;less&quot;&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="6-uni的生命周期"><a href="#6-uni的生命周期" class="headerlink" title="6 uni的生命周期"></a>6 uni的生命周期</h1><h2 id="6-1-应用的生命周期"><a href="#6-1-应用的生命周期" class="headerlink" title="6.1 应用的生命周期"></a>6.1 应用的生命周期</h2><p>生命周期的概念：一个对象从创建、运行、销毁的整个过程被成为生命周期。</p><p>生命周期函数：在生命周期中每个阶段会伴随着每一个函数的触发，这些函数被称为生命周期函数</p><p><code>uni-app</code> 支持如下应用生命周期函数：</p><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>onLaunch</td><td>当<code>uni-app</code> 初始化完成时触发（全局只触发一次）</td></tr><tr><td>onShow</td><td>当 <code>uni-app</code> 启动，或从后台进入前台显示</td></tr><tr><td>onHide</td><td>当 <code>uni-app</code> 从前台进入后台</td></tr><tr><td>onError</td><td>当 <code>uni-app</code> 报错时触发</td></tr></tbody></table><h2 id="6-2-页面的生命周期"><a href="#6-2-页面的生命周期" class="headerlink" title="6.2 页面的生命周期"></a>6.2 页面的生命周期</h2><p><code>uni-app</code> 支持如下页面生命周期函数：</p><table><thead><tr><th>函数名</th><th>说明</th><th>平台差异说明</th><th>最低版本</th></tr></thead><tbody><tr><td>onLoad</td><td>监听页面加载，其参数为上个页面传递的数据，参数类型为Object（用于页面传参），参考<a href="https://uniapp.dcloud.io/api/router?id=navigateto">示例</a></td><td></td><td></td></tr><tr><td>onShow</td><td>监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面</td><td></td><td></td></tr><tr><td>onReady</td><td>监听页面初次渲染完成。</td><td></td><td></td></tr><tr><td>onHide</td><td>监听页面隐藏</td><td></td><td></td></tr><tr><td>onUnload</td><td>监听页面卸载</td><td></td><td></td></tr></tbody></table><h1 id="7-uni相关API"><a href="#7-uni相关API" class="headerlink" title="7 uni相关API"></a>7 uni相关API</h1><h2 id="7-1-下拉刷新"><a href="#7-1-下拉刷新" class="headerlink" title="7.1 下拉刷新"></a>7.1 下拉刷新</h2><h3 id="7-1-1-开启下拉刷新"><a href="#7-1-1-开启下拉刷新" class="headerlink" title="7.1.1 开启下拉刷新"></a>7.1.1 开启下拉刷新</h3><p>在uni-app中有两种方式开启下拉刷新</p><ul><li>需要在 <code>pages.json</code> 里，找到的当前页面的pages节点，并在 <code>style</code> 选项中开启 <code>enablePullDownRefresh</code></li><li>通过调用uni.startPullDownRefresh方法来开启下拉刷新</li></ul><h4 id="a-通过配置文件开启"><a href="#a-通过配置文件开启" class="headerlink" title="a) 通过配置文件开启"></a>a) 通过配置文件开启</h4><p>通过pages.json文件中找到当前页面的pages节点，并在 <code>style</code> 选项中开启 <code>enablePullDownRefresh</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">&#123;</span><br><span class="line">  &quot;path&quot;:&quot;pages&#x2F;list&#x2F;list&quot;,</span><br><span class="line">    &quot;style&quot;:&#123;</span><br><span class="line">      &quot;enablePullDownRefresh&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="b-通过API开启"><a href="#b-通过API开启" class="headerlink" title="b) 通过API开启"></a>b) 通过API开启</h4><p><a href="https://uniapp.dcloud.io/api/ui/pulldown">api文档</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">uni.startPullDownRefresh(&#123;&#125;)</span><br></pre></td></tr></table></figure><h3 id="7-1-2-监听下拉刷新"><a href="#7-1-2-监听下拉刷新" class="headerlink" title="7.1.2 监听下拉刷新"></a>7.1.2 监听下拉刷新</h3><p>通过onPullDownRefresh可以监听到下拉刷新的动作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">这是信息页面</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Index extends Vue &#123;</span><br><span class="line"></span><br><span class="line">startPull(): void &#123;</span><br><span class="line">uni.startPullDownRefresh(&#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line">onPullDownRefresh(): void &#123;</span><br><span class="line">console.log(&#39;触发下拉刷新了&#39;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h3 id="7-1-3-关闭下拉刷新"><a href="#7-1-3-关闭下拉刷新" class="headerlink" title="7.1.3 关闭下拉刷新"></a>7.1.3 关闭下拉刷新</h3><p>uni.stopPullDownRefresh() 停止当前页面下拉刷新</p><h2 id="7-2-上拉加载"><a href="#7-2-上拉加载" class="headerlink" title="7.2 上拉加载"></a>7.2 上拉加载</h2><p>通过在pages.json文件中找到当前页面的pages节点下style中配置onReachBottomDistance可以设置距离底部开启加载的距离，默认为50px</p><p>通过onReachBottom监听到触底的行为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;view v-for&#x3D;&quot;(item,index) in arr&quot; :key&#x3D;&quot;index&quot; class&#x3D;&quot;item&quot;&gt;</span><br><span class="line">&#123;&#123;item&#125;&#125;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Index extends Vue &#123;</span><br><span class="line">private arr &#x3D; [&#39;前端&#39;, &#39;java&#39;, &#39;ui&#39;, &#39;大数据&#39;, &#39;前端&#39;, &#39;java&#39;, &#39;ui&#39;, &#39;大数据&#39;,&#39;ui&#39;, &#39;大数据&#39;];</span><br><span class="line">startPull(): void &#123;</span><br><span class="line">uni.startPullDownRefresh(&#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line">onPullDownRefresh(): void &#123;</span><br><span class="line">console.log(&#39;触发下拉刷新了&#39;)</span><br><span class="line">&#125;</span><br><span class="line">onReachBottom() &#123;</span><br><span class="line">console.log(&#39;触底了&#39;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&quot;less&quot;&gt;</span><br><span class="line">.item &#123;</span><br><span class="line">height: 100px;</span><br><span class="line">line-height: 100px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;App.vue中添加</span><br><span class="line">&lt;style&gt;</span><br><span class="line">page&#123;</span><br><span class="line">overflow-y:scroll!important;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h2 id="7-3-网络请求"><a href="#7-3-网络请求" class="headerlink" title="7.3 网络请求"></a>7.3 网络请求</h2><p>在uni中可以调用uni.request方法进行请求网络请求</p><p>需要注意的是：在小程序中网络相关的 API 在使用前需要配置域名白名单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">uni.request(&#123;</span><br><span class="line">    url: &#39;http:&#x2F;&#x2F;localhost&#x2F;myUniApp&#x2F;php&#x2F;login.php&#39;, &#x2F;&#x2F;仅为示例，并非真实接口地址。</span><br><span class="line">    data: &#123;&#x2F;&#x2F;参数</span><br><span class="line">        rawData: rawData,</span><br><span class="line">        code: loginRes.code</span><br><span class="line">    &#125;,</span><br><span class="line">    header: &#123;</span><br><span class="line">        &#39;custom-header&#39;: &#39;hello&#39; &#x2F;&#x2F;自定义请求头信息</span><br><span class="line">    &#125;,</span><br><span class="line">    method:&#39;POST&#39;&#x2F;&#x2F;请求方式  或GET</span><br><span class="line">    success: res &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&#39;返回&#39;, res.data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>请求示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;sendGet&quot;&gt;发送请求&lt;&#x2F;button&gt;</span><br><span class="line">&lt;view v-if&#x3D;&quot;movieData&quot;&gt;</span><br><span class="line">&lt;text&gt;电影名字：&#123;&#123;movieData.originalName&#125;&#125;&lt;&#x2F;text&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">导演：</span><br><span class="line">&lt;text v-for&#x3D;&quot;item in movieData.director&quot;&gt;</span><br><span class="line">&#123;&#123;item.data[0].name&#125;&#125;</span><br><span class="line">&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view&gt;电影信息</span><br><span class="line">&#123;&#123;movieData.data[0].genre&#125;&#125;</span><br><span class="line">&#123;&#123;movieData.data[0].language&#125;&#125;</span><br><span class="line">&#123;&#123;movieData.data[0].description&#125;&#125;</span><br><span class="line">&#123;&#123;movieData.data[0].country&#125;&#125;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">type MovieBasicType &#x3D; &#123;</span><br><span class="line">genre:string</span><br><span class="line">name:string</span><br><span class="line">lang:string</span><br><span class="line">language:string</span><br><span class="line">poster:string</span><br><span class="line">description:string</span><br><span class="line">country:string</span><br><span class="line">&#125;</span><br><span class="line">type MovieDirectorType &#x3D; &#123;</span><br><span class="line">name:string,</span><br><span class="line">lang:string</span><br><span class="line">&#125;</span><br><span class="line">type MovieDataType &#x3D; &#123;</span><br><span class="line">id?:string,</span><br><span class="line">originalName?:string,</span><br><span class="line">duration?:number,</span><br><span class="line">data?:MovieBasicType[],</span><br><span class="line">director?:&#123;data:MovieDirectorType[]&#125;[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Index extends Vue &#123;</span><br><span class="line">private movieData:MovieDataType|null &#x3D; null</span><br><span class="line"></span><br><span class="line">sendGet():void &#123;</span><br><span class="line">uni.request(&#123;</span><br><span class="line">url: &#39;https:&#x2F;&#x2F;movie.querydata.org&#x2F;api?id&#x3D;1302425&#39;,</span><br><span class="line">success:(res) &#x3D;&gt;&#123;</span><br><span class="line">const resobj &#x3D; res.data;</span><br><span class="line">this.movieData &#x3D; resobj as MovieDataType;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;uni-app中对ts的支持只是一般，没有非常严格</span><br></pre></td></tr></table></figure><h2 id="7-4-数据缓存"><a href="#7-4-数据缓存" class="headerlink" title="7.4 数据缓存"></a>7.4 数据缓存</h2><p><a href="https://uniapp.dcloud.io/api/storage/storage?id=setstorage">官方文档</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;setStor&quot;&gt;存储数据-异步&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;setStorSync&quot;&gt;存储数据-同步&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;getStorage&quot;&gt;获取数据&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;getStorageSync&quot;&gt;获取数据-同步&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;removeStorage&quot;&gt;删除数据&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;removeStorageSync&quot;&gt;删除数据-同步&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Index extends Vue &#123;</span><br><span class="line"></span><br><span class="line">setStor(): void &#123;</span><br><span class="line">uni.setStorage(&#123;</span><br><span class="line">key: &#39;id&#39;,</span><br><span class="line">data: 100,</span><br><span class="line">success() &#123;</span><br><span class="line">console.log(&#39;存储成功&#39;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">setStorSync(): void &#123;</span><br><span class="line">uni.setStorageSync(&#39;id2&#39;, 100)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getStorage(): void &#123;</span><br><span class="line">uni.getStorage(&#123;</span><br><span class="line">key: &#39;id&#39;,</span><br><span class="line">success: res &#x3D;&gt; &#123;</span><br><span class="line">console.log(res)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">getStorageSync(): void &#123;</span><br><span class="line">const id &#x3D; uni.getStorageSync(&#39;id&#39;)</span><br><span class="line">console.log(id)</span><br><span class="line">&#125;</span><br><span class="line">removeStorage(): void &#123;</span><br><span class="line">uni.removeStorage(&#123;</span><br><span class="line">key: &#39;id&#39;,</span><br><span class="line">success: function() &#123;</span><br><span class="line">console.log(&#39;删除成功&#39;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">removeStorageSync(): void &#123;</span><br><span class="line">uni.removeStorageSync(&#39;id&#39;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h2 id="7-5-上传图片、预览图片"><a href="#7-5-上传图片、预览图片" class="headerlink" title="7.5 上传图片、预览图片"></a>7.5 上传图片、预览图片</h2><h3 id="7-5-1-上传图片"><a href="#7-5-1-上传图片" class="headerlink" title="7.5.1 上传图片"></a>7.5.1 上传图片</h3><p>uni.chooseImage方法从本地相册选择图片或使用相机拍照。</p><p>案例代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;chooseImg&quot; type&#x3D;&quot;primary&quot;&gt;上传图片&lt;&#x2F;button&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;image v-for&#x3D;&quot;item in imgArr&quot; :src&#x3D;&quot;item&quot; :key&#x3D;&quot;index&quot;&gt;&lt;&#x2F;image&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Index extends Vue &#123;</span><br><span class="line">private imgArr &#x3D; []</span><br><span class="line"></span><br><span class="line">chooseImg(): void &#123;</span><br><span class="line">uni.chooseImage(&#123;</span><br><span class="line">count: 9,</span><br><span class="line">success: res &#x3D;&gt; &#123;</span><br><span class="line">this.imgArr &#x3D; res.tempFilePaths</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h3 id="7-5-2-预览图片"><a href="#7-5-2-预览图片" class="headerlink" title="7.5.2 预览图片"></a>7.5.2 预览图片</h3><p>结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;image v-for&#x3D;&quot;item in imgArr&quot; :src&#x3D;&quot;item&quot; @click&#x3D;&quot;previewImg(item)&quot; :key&#x3D;&quot;item&quot;&gt;&lt;&#x2F;image&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure><p>预览图片的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">previewImg (current:any):void &#123;</span><br><span class="line">  uni.previewImage(&#123;</span><br><span class="line">    urls: this.imgArr,</span><br><span class="line">    current</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-6-uni中的导航跳转"><a href="#7-6-uni中的导航跳转" class="headerlink" title="7.6 uni中的导航跳转"></a>7.6 uni中的导航跳转</h2><h3 id="7-6-1-利用navigator进行跳转"><a href="#7-6-1-利用navigator进行跳转" class="headerlink" title="7.6.1 利用navigator进行跳转"></a>7.6.1 利用navigator进行跳转</h3><p>navigator详细文档：<a href="https://uniapp.dcloud.io/component/navigator">文档地址</a></p><p>跳转到普通页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;navigator url&#x3D;&quot;&#x2F;pages&#x2F;about&#x2F;about&quot; hover-class&#x3D;&quot;navigator-hover&quot;&gt;</span><br><span class="line">  &lt;button type&#x3D;&quot;default&quot;&gt;跳转到关于页面&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;navigator&gt;</span><br></pre></td></tr></table></figure><p>跳转到tabbar页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;navigator url&#x3D;&quot;&#x2F;pages&#x2F;message&#x2F;message&quot; open-type&#x3D;&quot;switchTab&quot;&gt;</span><br><span class="line">  &lt;button type&#x3D;&quot;default&quot;&gt;跳转到message页面&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;navigator&gt;</span><br></pre></td></tr></table></figure><h3 id="7-6-2-利用编程式导航进行跳转"><a href="#7-6-2-利用编程式导航进行跳转" class="headerlink" title="7.6.2 利用编程式导航进行跳转"></a>7.6.2 利用编程式导航进行跳转</h3><p><a href="https://ehbhgh.github.io/2019/11/29/%E5%88%9D%E5%A7%8Buniapp/[uni.navigateTo](https://uniapp.dcloud.io/api/router?id=navigateto)">导航跳转文档</a></p><h3 id="7-6-3-利用navigateTo进行导航跳转"><a href="#7-6-3-利用navigateTo进行导航跳转" class="headerlink" title="7.6.3 利用navigateTo进行导航跳转"></a>7.6.3 利用navigateTo进行导航跳转</h3><p>保留当前页面，跳转到应用内的某个页面，使用<code>uni.navigateBack</code>可以返回到原页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;goAbout&quot;&gt;跳转到关于页面&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><p>通过navigateTo方法进行跳转到普通页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">goAbout ():void &#123;</span><br><span class="line">  uni.navigateTo(&#123;</span><br><span class="line">    url: &#39;&#x2F;pages&#x2F;about&#x2F;about&#39;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过switchTab跳转到tabbar页面</strong></p><p>跳转到tabbar页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;goMessage&quot;&gt;跳转到message页面&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><p>通过switchTab方法进行跳转</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">goMessage ():void  &#123;</span><br><span class="line">  uni.switchTab(&#123;</span><br><span class="line">    url: &#39;&#x2F;pages&#x2F;message&#x2F;message&#39;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>redirectTo进行跳转</strong></p><p>关闭当前页面，跳转到应用内的某个页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;!-- template --&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;goMessage&quot;&gt;跳转到message页面&lt;&#x2F;button&gt;</span><br><span class="line">&lt;!-- js --&gt;</span><br><span class="line">goMessage ():void  &#123;</span><br><span class="line">  uni.switchTab(&#123;</span><br><span class="line">    url: &#39;&#x2F;pages&#x2F;message&#x2F;message&#39;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过onUnload测试当前组件确实卸载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">onUnload () &#123;</span><br><span class="line">  console.log(&#39;组件卸载了&#39;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-6-4-导航跳转传递参数"><a href="#7-6-4-导航跳转传递参数" class="headerlink" title="7.6.4 导航跳转传递参数"></a>7.6.4 导航跳转传递参数</h3><p>在导航进行跳转到下一个页面的同时，可以给下一个页面传递相应的参数，接收参数的页面可以通过onLoad生命周期进行接收</p><p>传递参数的页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">goAbout ():void  &#123;</span><br><span class="line">  uni.navigateTo(&#123;</span><br><span class="line">    url: &#39;&#x2F;pages&#x2F;about&#x2F;about?id&#x3D;80&#39;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收参数的页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">onLoad (options) &#123;</span><br><span class="line">    console.log(options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-条件注释实现跨端兼容"><a href="#8-条件注释实现跨端兼容" class="headerlink" title="8 条件注释实现跨端兼容"></a>8 条件注释实现跨端兼容</h1><p>条件编译是用特殊的注释作为标记，在编译时根据这些特殊的注释，将注释里面的代码编译到不同平台。</p><p><strong>写法：</strong>以 #ifdef 加平台标识 开头，以 #endif 结尾。</p><p>平台标识</p><table><thead><tr><th>值</th><th>平台</th><th>参考文档</th></tr></thead><tbody><tr><td>APP-PLUS</td><td>5+App</td><td><a href="http://www.html5plus.org/doc/">HTML5+ 规范</a></td></tr><tr><td>H5</td><td>H5</td><td></td></tr><tr><td>MP-WEIXIN</td><td>微信小程序</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/api/">微信小程序</a></td></tr><tr><td>MP-ALIPAY</td><td>支付宝小程序</td><td><a href="https://docs.alipay.com/mini/developer/getting-started">支付宝小程序</a></td></tr><tr><td>MP-BAIDU</td><td>百度小程序</td><td><a href="https://smartprogram.baidu.com/docs/develop/tutorial/codedir/">百度小程序</a></td></tr><tr><td>MP-TOUTIAO</td><td>头条小程序</td><td><a href="https://developer.toutiao.com/dev/cn/mini-app/develop/framework/basic-reference/introduction">头条小程序</a></td></tr><tr><td>MP-QQ</td><td>QQ小程序</td><td>（目前仅cli版支持）</td></tr><tr><td>MP</td><td>微信小程序/支付宝小程序/百度小程序/头条小程序/QQ小程序</td><td></td></tr></tbody></table><h2 id="8-1-组件的条件注释"><a href="#8-1-组件的条件注释" class="headerlink" title="8.1 组件的条件注释"></a>8.1 组件的条件注释</h2><p>代码演示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;!-- #ifdef H5 --&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">  h5页面会显示</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;!-- #endif --&gt;</span><br><span class="line">&lt;!-- #ifdef MP-WEIXIN --&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">  微信小程序会显示</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;!-- #endif --&gt;</span><br><span class="line">&lt;!-- #ifdef APP-PLUS --&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">  app会显示</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;!-- #endif --&gt;</span><br></pre></td></tr></table></figure><h2 id="8-2-api的条件注释"><a href="#8-2-api的条件注释" class="headerlink" title="8.2 api的条件注释"></a>8.2 api的条件注释</h2><p>代码演示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">onLoad () &#123;</span><br><span class="line">  &#x2F;&#x2F;#ifdef MP-WEIXIN</span><br><span class="line">  console.log(&#39;微信小程序&#39;)</span><br><span class="line">  &#x2F;&#x2F;#endif</span><br><span class="line">  &#x2F;&#x2F;#ifdef H5</span><br><span class="line">  console.log(&#39;h5页面&#39;)</span><br><span class="line">  &#x2F;&#x2F;#endif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-3-样式的条件注释"><a href="#8-3-样式的条件注释" class="headerlink" title="8.3 样式的条件注释"></a>8.3 样式的条件注释</h2><p>代码演示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Css</span><br><span class="line">&#x2F;* #ifdef H5 *&#x2F;</span><br><span class="line">view&#123;</span><br><span class="line">  height: 100px;</span><br><span class="line">  line-height: 100px;</span><br><span class="line">  background: red;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* #endif *&#x2F;</span><br><span class="line">&#x2F;* #ifdef MP-WEIXIN *&#x2F;</span><br><span class="line">view&#123;</span><br><span class="line">  height: 100px;</span><br><span class="line">  line-height: 100px;</span><br><span class="line">  background: green;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* #endif *&#x2F;</span><br></pre></td></tr></table></figure><h1 id="9-uni-ui的使用"><a href="#9-uni-ui的使用" class="headerlink" title="9 uni-ui的使用"></a>9 uni-ui的使用</h1><p>uni-app中的UI组件库：<a href="https://ask.dcloud.net.cn/article/35489">https://ask.dcloud.net.cn/article/35489</a></p><p><a href="https://uniapp.dcloud.io/component/README?id=uniui">uni-ui文档</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">&#x2F;&#x2F;1.将资料中的uni-ui放入到项目components目录下(注意：不要npm install @dcloudio&#x2F;uni-ui ，这种方式在子组件中无法使用)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.安装sass-loader</span><br><span class="line">npm install node-sass sass-loader@8.0.2      重启hubuilderX</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;3.在页面组件和自定义组件中使用uni-ui</span><br><span class="line">import uniBadge from &quot;@&#x2F;components&#x2F;uni-ui&#x2F;lib&#x2F;uni-badge&#x2F;uni-badge.vue&quot;;</span><br><span class="line">import uniGrid from &quot;@&#x2F;components&#x2F;uni-ui&#x2F;lib&#x2F;uni-grid&#x2F;uni-grid.vue&quot;;</span><br><span class="line">import uniGridItem from &quot;@&#x2F;components&#x2F;uni-ui&#x2F;lib&#x2F;uni-grid-item&#x2F;uni-grid-item.vue&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        uniBadge,</span><br><span class="line">        uniGrid,</span><br><span class="line">        uniGridItem</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;uni-badge text&#x3D;&quot;1&quot;&gt;&lt;&#x2F;uni-badge&gt;</span><br><span class="line">&lt;uni-badge text&#x3D;&quot;2&quot; type&#x3D;&quot;success&quot;&gt;&lt;&#x2F;uni-badge&gt;</span><br><span class="line">&lt;uni-badge text&#x3D;&quot;3&quot; type&#x3D;&quot;primary&quot; :inverted&#x3D;&quot;true&quot;&gt;&lt;&#x2F;uni-badge&gt;</span><br><span class="line">&lt;uni-grid :column&#x3D;&quot;3&quot;&gt;</span><br><span class="line">&lt;uni-grid-item&gt;</span><br><span class="line">&lt;text class&#x3D;&quot;text&quot;&gt;文本&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;uni-grid-item&gt;</span><br><span class="line">&lt;uni-grid-item&gt;</span><br><span class="line">&lt;text class&#x3D;&quot;text&quot;&gt;文本&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;uni-grid-item&gt;</span><br><span class="line">&lt;uni-grid-item&gt;</span><br><span class="line">&lt;text class&#x3D;&quot;text&quot;&gt;文本&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;uni-grid-item&gt;</span><br><span class="line">&lt;&#x2F;uni-grid&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#1.uni-app的基本使用&lt;/p&gt;
&lt;p&gt;课程介绍：&lt;/p&gt;
&lt;p&gt;基础部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;环境搭建&lt;/li&gt;
&lt;li&gt;页面外观配置&lt;/li&gt;
&lt;li&gt;数据绑定&lt;/li&gt;
&lt;li&gt;uni-app的生命周期&lt;/li&gt;
&lt;li&gt;组件的使用&lt;/li&gt;
&lt;li&gt;u</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>浅谈TypeScript</title>
    <link href="http://example.com/2021/04/15/%E6%B5%85%E8%B0%88TypeScript/"/>
    <id>http://example.com/2021/04/15/%E6%B5%85%E8%B0%88TypeScript/</id>
    <published>2021-04-15T03:12:21.000Z</published>
    <updated>2021-03-11T11:43:33.177Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><h2 id="1-1-TS简介"><a href="#1-1-TS简介" class="headerlink" title="1.1 TS简介"></a>1.1 TS简介</h2><p>TypeScript 是 JavaScript 的强类型版本。然后在编译期去掉类型和特有语法，生成纯粹的 JavaScript 代码。由于最终在浏览器中运行的仍然是 JavaScript，所以 TypeScript 并不依赖于浏览器的支持，也并不会带来兼容性问题。</p><p>TypeScript 是 JavaScript 的超集，这意味着他支持所有的 JavaScript 语法。并在此之上对 JavaScript 添加了一些扩展，如 class / interface / module 等。这样会大大提升代码的可阅读性。</p><p>和 JavaScript 弱类型不同，TypeScript 这种强类型语言最大的优势在于静态类型检查，可以在代码开发阶段就预知一些低级错误的发生。</p><ul><li>一种类似于 JavaScript 的语言，在 JavaScript 的基础之上增加了类型，同时增强了 JavaScript 部分语法功能</li><li>遵循 EcmaScript 6 标准规范</li><li>由微软开发</li><li>Angular 2 框架采用 TypeScript 编写</li><li>背后有微软和谷歌两大公司的支持</li><li>TypeScript 可以编译成 JavaScript 从而在支持 JavaScript 的环境中运行</li><li>TypeScript 和 JavaScript 的关系就好比 less 和 css 的关系</li></ul><p>TypeScript 中文网 <a href="https://www.tslang.cn/">https://www.tslang.cn/</a></p><p>在线编译环境 <a href="https://www.typescriptlang.org/play/index.html">https://www.typescriptlang.org/play/index.html</a></p><h2 id="1-2-TS环境搭建"><a href="#1-2-TS环境搭建" class="headerlink" title="1.2 TS环境搭建"></a>1.2 TS环境搭建</h2><ol><li>打开命令行，键入<code>npm i -g typescript</code> 全局安装TS</li><li>继续在命令行环境下键入 <code>tsc -init</code> 进行初始化，<br>你会发现根目录下多了 tsconfig.json 的文件，记录了编译成JS的选项</li><li>创建ts文件</li><li>打开VSCode进入该目录，按下 Ctrl+shift+B 快捷键会进行编译，初次编译会选择编译模式</li><li>输入node命令运行js代码</li></ol><h2 id="1-3-变量声明"><a href="#1-3-变量声明" class="headerlink" title="1.3 变量声明"></a>1.3 变量声明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">var</span><br><span class="line">- 作用域 : 全局作用域、函数作用域</span><br><span class="line">- 重复声明</span><br><span class="line">- 变量提升</span><br><span class="line"></span><br><span class="line">let</span><br><span class="line">- 块级作用域</span><br><span class="line">- 在同一个块中不能重复声明</span><br><span class="line"></span><br><span class="line">const</span><br><span class="line">- 声明同时必须赋值</span><br><span class="line">- 一旦声明不可改变（对象可以修改）</span><br><span class="line">- 块级作用域</span><br></pre></td></tr></table></figure><h2 id="1-4-基本数据类型"><a href="#1-4-基本数据类型" class="headerlink" title="1.4 基本数据类型"></a>1.4 基本数据类型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;字符串</span><br><span class="line">var uname:string &#x3D; &quot;zhangsan&quot;;</span><br><span class="line">let nickname: string &#x3D; &#39;张三&#39;;</span><br><span class="line">let isDone: boolean &#x3D; false;</span><br><span class="line">let age: number &#x3D; 37;</span><br><span class="line">let sentence: string &#x3D; &#96;Hello, my nickname is $&#123; nickname &#125;.</span><br><span class="line"></span><br><span class="line">I&#39;ll be $&#123; age + 1 &#125; years old next month.&#96;</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;数组</span><br><span class="line">&#x2F;&#x2F;TypeScript像JavaScript一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上[]，表示由此类型元素组成的一个数组：</span><br><span class="line">let list: number[] &#x3D; [1, 2, 3];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第二种方式是使用数组泛型，Array&lt;元素类型&gt;：</span><br><span class="line">let list: Array&lt;number&gt; &#x3D; [1, 2, 3];</span><br><span class="line">Javascript</span><br><span class="line">&#x2F;&#x2F;ts的数组只能存放单一数据类型的元素，元组则可以很好的解决此问题。</span><br><span class="line">&#x2F;&#x2F;元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为string和number类型的元组。</span><br><span class="line">&#x2F;&#x2F; Declare a tuple type</span><br><span class="line">let x: [string, number];</span><br><span class="line">&#x2F;&#x2F; Initialize it</span><br><span class="line">x &#x3D; [&#39;hello&#39;, 10]; &#x2F;&#x2F; OK</span><br><span class="line">&#x2F;&#x2F; Initialize it incorrectly</span><br><span class="line">x &#x3D; [10, &#39;hello&#39;]; &#x2F;&#x2F; Error</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;object类型</span><br><span class="line">- 允许赋任意值</span><br><span class="line">- 但是不能调用任意方法，即便它真的有</span><br><span class="line"></span><br><span class="line">let foo: object &#x3D; &#123;</span><br><span class="line">  name: &#39;Jack&#39;,</span><br><span class="line">  age: 18</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;知道即可，用的很少，没有类型校验和语法提示</span><br><span class="line">Javascript</span><br><span class="line">&#x2F;&#x2F;Any</span><br><span class="line">&#x2F;&#x2F;有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用 any类型来标记这些变量：</span><br><span class="line"></span><br><span class="line">let notSure: any &#x3D; 4;</span><br><span class="line">notSure &#x3D; &quot;maybe a string instead&quot;;</span><br><span class="line">notSure &#x3D; false; &#x2F;&#x2F; okay, definitely a boolean</span><br><span class="line">Javascript</span><br><span class="line">&#x2F;&#x2F;Void 类型</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;void类型像是与any类型相反，它表示没有任何类型。 当一个函数没有返回值时，你通常会见到其返回值类型是 void：</span><br><span class="line"></span><br><span class="line">function warnUser(): void &#123;</span><br><span class="line">  alert(&quot;This is my warning message&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;声明一个void类型的变量没有什么大用，因为你只能为它赋予undefined：</span><br><span class="line">let unusable: void &#x3D; undefined;</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;Null 和 Undefined</span><br><span class="line">&#x2F;&#x2F; Not much else we can assign to these variables!</span><br><span class="line">let u: undefined &#x3D; undefined;</span><br><span class="line">let n: null &#x3D; null;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;never</span><br><span class="line">never 是其它类型（包括 null 和 undefined）的子类型，代表从不会出现的值。</span><br><span class="line">let x: never;</span><br><span class="line">let y: number;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 运行错误，数字类型不能转为 never 类型</span><br><span class="line">x &#x3D; 123;</span><br><span class="line">&#x2F;&#x2F; 运行正确，never 类型可以赋值给 never类型</span><br><span class="line">x &#x3D; (()&#x3D;&gt;&#123; throw new Error(&#39;exception&#39;)&#125;)();</span><br><span class="line">&#x2F;&#x2F; 运行正确，never 类型可以赋值给 数字类型</span><br><span class="line">y &#x3D; (()&#x3D;&gt;&#123; throw new Error(&#39;exception&#39;)&#125;)();</span><br><span class="line">&#x2F;&#x2F; 返回值为 never 的函数可以是抛出异常的情况</span><br><span class="line">function error(message: string): never &#123;</span><br><span class="line">    throw new Error(message);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 返回值为 never 的函数可以是无法被执行到的终止点的情况</span><br><span class="line">function loop(): never &#123;</span><br><span class="line">    while (true) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;类型推断</span><br><span class="line">&#x2F;&#x2F; 有时候你会遇到这样的情况，你会比TypeScript更了解某个值的详细信息。 通常这会发生在你清楚地知道一个实体具有比它现有类型更确切的类型。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 TypeScript会假设你，程序员，已经进行了必须的检查。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 类型断言有两种形式。 其一是“尖括号”语法：</span><br><span class="line"></span><br><span class="line">let someValue: any &#x3D; true;</span><br><span class="line">let strLength: number &#x3D; (&lt;string&gt;someValue).length;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;另一个为as语法：</span><br><span class="line">let someValue: any &#x3D; &quot;this is a string&quot;;</span><br><span class="line">let strLength: number &#x3D; (someValue as string).length;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;两种形式是等价的。 至于使用哪个大多数情况下是凭个人喜好；然而，当你在TypeScript里使用JSX时，只有 as语法断言是被允许的。</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;枚举类型</span><br><span class="line"></span><br><span class="line">enum Color &#123;Red, Green, Blue&#125;;</span><br><span class="line">let c: Color &#x3D; Color.Blue;</span><br><span class="line">console.log(c);    &#x2F;&#x2F; 输出 2</span><br></pre></td></tr></table></figure><h2 id="1-5-解构赋值"><a href="#1-5-解构赋值" class="headerlink" title="1.5 解构赋值"></a>1.5 解构赋值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;数组解构</span><br><span class="line">let input &#x3D; [1, 2];</span><br><span class="line">let [first, second] &#x3D; input;</span><br><span class="line">console.log(first); &#x2F;&#x2F; outputs 1</span><br><span class="line">console.log(second); &#x2F;&#x2F; outputs 2</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;上面的写法等价于：</span><br><span class="line">first &#x3D; input[0];</span><br><span class="line">second &#x3D; input[1];</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;利用解构赋值交换变量：</span><br><span class="line">[first, second] &#x3D; [second, first];</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;函数参数解构：</span><br><span class="line">&#x2F;&#x2F;函数参数解构：</span><br><span class="line">function ff([first, second]: [number, number]) &#123; </span><br><span class="line">  console.log(first)</span><br><span class="line">  console.log(second)</span><br><span class="line">&#125;</span><br><span class="line">ff([1,2])</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;解构剩余参数：</span><br><span class="line">let [first, ...rest] &#x3D; [1, 2, 3, 4]</span><br><span class="line">console.log(first) &#x2F;&#x2F; 1</span><br><span class="line">console.log(rest) &#x2F;&#x2F; [2, 3, 4]</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;也可以忽略其它参数：</span><br><span class="line">let [first] &#x3D; [1, 2, 3, 4];</span><br><span class="line">console.log(first); &#x2F;&#x2F; outputs 1</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;或者跳过解构：</span><br><span class="line">let [, second, , fourth] &#x3D; [1, 2, 3, 4]</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;对象解构</span><br><span class="line">let o &#x3D; &#123;</span><br><span class="line">    a: &quot;foo&quot;,</span><br><span class="line">    b: 12,</span><br><span class="line">    c: &quot;bar&quot;</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F;let &#123; a, b &#125; &#x3D; o;</span><br><span class="line">&#x2F;&#x2F;let &#123;a, b&#125;: &#123;a: string, b: number&#125; &#x3D; o;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;你可以在对象里使用 ... 语法创建剩余变量：</span><br><span class="line">let &#123; a, ...passthrough &#125; &#x3D; o;</span><br><span class="line">let total &#x3D; passthrough.b + passthrough.c.length;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;属性解构重命名</span><br><span class="line">&#x2F;&#x2F;你也可以给属性以不同的名字：</span><br><span class="line">let &#123; a: newName1, b: newName2 &#125; &#x3D; o;</span><br></pre></td></tr></table></figure><h2 id="1-6-展开操作符-…"><a href="#1-6-展开操作符-…" class="headerlink" title="1.6 展开操作符 (…)"></a>1.6 展开操作符 (…)</h2><ul><li>展开数组</li><li>展开对象</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">let arr1 &#x3D; [1, 2, 3];</span><br><span class="line">let arr2 &#x3D; [4, 5, 6];</span><br><span class="line">let arr3 &#x3D; [...arr1, ...arr2];</span><br><span class="line"></span><br><span class="line">let obj1 &#x3D; &#123; a: 1, b: 2 &#125;;</span><br><span class="line">let obj2 &#x3D; &#123; c: 3 &#125;</span><br><span class="line">let obj3 &#x3D; &#123; ...obj1, ...obj2 &#125;;</span><br><span class="line">console.log(arr3,obj3)</span><br></pre></td></tr></table></figure><h2 id="1-7-函数"><a href="#1-7-函数" class="headerlink" title="1.7 函数"></a>1.7 函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;函数参数</span><br><span class="line">&#x2F;&#x2F;参数及返回值类型</span><br><span class="line">&#x2F;&#x2F;function 函数名字(参数1,参数2,参数3):函数返回值&#123;函数体&#125;</span><br><span class="line">function add(x: number, y: number): number &#123;</span><br><span class="line">    return x + y</span><br><span class="line">&#125;</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;可选参数</span><br><span class="line">function add(x: number, y?: number): number &#123;</span><br><span class="line">    return x + 10</span><br><span class="line">&#125;</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;默认参数</span><br><span class="line">function add(x: number, y: number &#x3D; 20): number &#123;</span><br><span class="line">    return x + y</span><br><span class="line">&#125;</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;剩余参数</span><br><span class="line">function sum(...args: number[]): number &#123;</span><br><span class="line">    let ret: number &#x3D; 0</span><br><span class="line">    args.forEach((item: number): void &#x3D;&gt; &#123;</span><br><span class="line">        ret +&#x3D; item</span><br><span class="line">    &#125;)</span><br><span class="line">    return ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(1, 2, 3)</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;箭头函数</span><br><span class="line">let add &#x3D; (x: number, y: number): number &#x3D;&gt; x + y</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;函数重载：重载是方法名字相同，而参数不同，返回类型可以相同也可以不同。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;参数类型不同：</span><br><span class="line">function disp(string):void; </span><br><span class="line">function disp(number):void;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;参数数量不同：</span><br><span class="line">function disp(n1:number):void; </span><br><span class="line">function disp(x:number,y:number):void;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;参数类型顺序不同：</span><br><span class="line">function disp(n1:number,s1:string):void; </span><br><span class="line">function disp(s:string,n:number):void;</span><br></pre></td></tr></table></figure><h2 id="1-8-联合类型"><a href="#1-8-联合类型" class="headerlink" title="1.8 联合类型"></a>1.8 联合类型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;联合类型（Union Types）可以通过管道(|)将变量设置多种类型，赋值时可以根据设置的类型来赋值。</span><br><span class="line"></span><br><span class="line">var val:string|number </span><br><span class="line">val &#x3D; 12 </span><br><span class="line">val &#x3D; &quot;Runoob&quot; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var arr:number[]|string[]; </span><br><span class="line">var i:number; </span><br><span class="line">arr &#x3D; [1,2,4] </span><br><span class="line">arr &#x3D; [&quot;Runoob&quot;,&quot;Google&quot;,&quot;Taobao&quot;]</span><br></pre></td></tr></table></figure><h2 id="1-9-类"><a href="#1-9-类" class="headerlink" title="1.9 类"></a>1.9 类</h2><h3 id="1-9-1-类的基本使用"><a href="#1-9-1-类的基本使用" class="headerlink" title="1.9.1 类的基本使用"></a>1.9.1 类的基本使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;基本示例</span><br><span class="line">class Person &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age: number;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;构造函数</span><br><span class="line">    constructor(name: string, age: number) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sayHello() &#123;</span><br><span class="line">        console.log(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let zs: Person &#x3D; new Person(&#39;张三&#39;, 18);</span><br></pre></td></tr></table></figure><h3 id="1-8-2-super关键字的使用"><a href="#1-8-2-super关键字的使用" class="headerlink" title="1.8.2 super关键字的使用"></a>1.8.2 super关键字的使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;继承</span><br><span class="line">class Animal &#123;</span><br><span class="line">    move(distanceInMeters: number &#x3D; 0) &#123;</span><br><span class="line">        console.log(&#96;Animal moved $&#123;distanceInMeters&#125;m.&#96;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Dog extends Animal &#123;</span><br><span class="line">    bark() &#123;</span><br><span class="line">        console.log(&#39;Woof! Woof!&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const dog &#x3D; new Dog();</span><br><span class="line">dog.bark();</span><br><span class="line">dog.move(10);</span><br><span class="line">dog.bark();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这个例子展示了最基本的继承：类从基类中继承了属性和方法。 这里， Dog是一个 派生类，它派生自 Animal 基类，通过 extends关键字。 派生类通常被称作 子类，基类通常被称作 超类。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;因为 Dog继承了 Animal的功能，因此我们可以创建一个 Dog的实例，它能够 bark()和 move()。</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;下面是一个更复杂的例子：</span><br><span class="line">class Animal &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    constructor(theName: string) &#123; </span><br><span class="line">        this.name &#x3D; theName; </span><br><span class="line">    &#125;</span><br><span class="line">    move(distanceInMeters: number &#x3D; 0) &#123;</span><br><span class="line">        console.log(&#96;$&#123;this.name&#125; moved $&#123;distanceInMeters&#125;m.&#96;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Snake extends Animal &#123;</span><br><span class="line">    constructor(name: string) &#123; </span><br><span class="line">        super(name); </span><br><span class="line">    &#125;</span><br><span class="line">    move(distanceInMeters &#x3D; 5) &#123;</span><br><span class="line">        console.log(&quot;Slithering...&quot;);</span><br><span class="line">        super.move(distanceInMeters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Horse extends Animal &#123;</span><br><span class="line">    constructor(name: string) &#123; </span><br><span class="line">        super(name); </span><br><span class="line">    &#125;</span><br><span class="line">    move(distanceInMeters &#x3D; 45) &#123;</span><br><span class="line">        console.log(&quot;Galloping...&quot;);</span><br><span class="line">        super.move(distanceInMeters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let sam &#x3D; new Snake(&quot;Sammy the Python&quot;);</span><br><span class="line">let tom: Animal &#x3D; new Horse(&quot;Tommy the Palomino&quot;);</span><br><span class="line"></span><br><span class="line">sam.move();</span><br><span class="line">tom.move(34);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;与前一个例子的不同点是，派生类包含了一个构造函数，它 必须调用 super()，它会执行基类的构造函数。 而且，在构造函数里访问 this的属性之前，我们 一定要调用 super()。 这个是TypeScript强制执行的一条重要规则。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这个例子演示了如何在子类里可以重写父类的方法。 Snake类和 Horse类都创建了 move方法，它们重写了从Animal继承来的 move方法，使得 move方法根据不同的类而具有不同的功能。 注意，即使 tom被声明为Animal类型，但因为它的值是 Horse，调用 tom.move(34)时，它会调用 Horse里重写的方法：</span><br><span class="line"></span><br><span class="line">Slithering...</span><br><span class="line">Sammy the Python moved 5m.</span><br><span class="line">Galloping...</span><br><span class="line">Tommy the Palomino moved 34m.</span><br></pre></td></tr></table></figure><h3 id="1-9-3-成员修饰符"><a href="#1-9-3-成员修饰符" class="headerlink" title="1.9.3 成员修饰符"></a>1.9.3 成员修饰符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;public 公共的</span><br><span class="line">class Animal &#123;</span><br><span class="line">    public name: string;</span><br><span class="line">    public constructor(theName: string) &#123; </span><br><span class="line">        this.name &#x3D; theName; </span><br><span class="line">    &#125;</span><br><span class="line">    public move(distanceInMeters: number) &#123;</span><br><span class="line">        console.log(&#96;$&#123;this.name&#125; moved $&#123;distanceInMeters&#125;m.&#96;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;private 私有的</span><br><span class="line">- 不能被外部访问，只能在类的内部访问使用</span><br><span class="line">- 私有成员不会被继承</span><br><span class="line"></span><br><span class="line">class Person &#123;</span><br><span class="line">  public name: string;</span><br><span class="line">  public age: number &#x3D; 18;</span><br><span class="line">  private type: string &#x3D; &#39;human&#39;</span><br><span class="line">  public constructor (name:string, age:number) &#123;</span><br><span class="line">    this.name &#x3D; name</span><br><span class="line">    this.age &#x3D; age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;protected 受保护的</span><br><span class="line">- 和 private 类似，但是可以被继承</span><br><span class="line"></span><br><span class="line">class Person &#123;</span><br><span class="line">    protected name: string;</span><br><span class="line">    constructor(name: string) &#123; </span><br><span class="line">        this.name &#x3D; name; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Employee extends Person &#123;</span><br><span class="line">    private department: string;</span><br><span class="line"></span><br><span class="line">    constructor(name: string, department: string) &#123;</span><br><span class="line">        super(name)</span><br><span class="line">        this.department &#x3D; department;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public getElevatorPitch() &#123;</span><br><span class="line">        return &#96;Hello, my name is $&#123;this.name&#125; and I work in $&#123;this.department&#125;.&#96;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let howard &#x3D; new Employee(&quot;Howard&quot;, &quot;Sales&quot;);</span><br><span class="line">console.log(howard.getElevatorPitch());</span><br><span class="line">console.log(howard.name); &#x2F;&#x2F; 错误</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;注意，我们不能在 Person类外使用 name，但是我们仍然可以通过 Employee类的实例方法访问，因为Employee是由 Person派生而来的。</span><br></pre></td></tr></table></figure><h3 id="1-9-4-getter和setter"><a href="#1-9-4-getter和setter" class="headerlink" title="1.9.4 getter和setter"></a>1.9.4 getter和setter</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    private _name:string;</span><br><span class="line"></span><br><span class="line">    constructor(name: string)</span><br><span class="line">    &#123;</span><br><span class="line">        this._name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    set name(value:string) &#123;this._name &#x3D; value;&#125;</span><br><span class="line">    get name() &#123;return this._name;&#125;</span><br><span class="line"></span><br><span class="line">    talk()</span><br><span class="line">    &#123;</span><br><span class="line">        alert(&quot;Hi, my name is &quot; + this.name + &quot;!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-9-5-静态成员"><a href="#1-9-5-静态成员" class="headerlink" title="1.9.5 静态成员"></a>1.9.5 静态成员</h3><ul><li>不需要实例化访问的成员称之为静态成员，即只能被类访问的成员</li><li><code>static</code> 关键字</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">class Person &#123;</span><br><span class="line">    &#x2F;&#x2F;静态变量</span><br><span class="line">    static country &#x3D; &quot;中国&quot;;</span><br><span class="line">    &#x2F;&#x2F;京塔方法</span><br><span class="line">    static sayhello() &#123; </span><br><span class="line">        console.log(&quot;hello&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    constructor () &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let p1 &#x3D; new Person();  </span><br><span class="line">let p2 &#x3D; new Person(); </span><br><span class="line"></span><br><span class="line">console.log(Person.country)  &#x2F;&#x2F;静态变量，直接通过类型来访问</span><br><span class="line">console.log(p1.country) &#x2F;&#x2F;错误</span><br></pre></td></tr></table></figure><h2 id="1-10-接口"><a href="#1-10-接口" class="headerlink" title="1.10 接口"></a>1.10 接口</h2><p>在面向对象编程中，接口是一种规范的定义，它定义了行为和动作规范，起到一种限制和规范的作用。<br>接口不关心状态数据，也不关心方法的实现细节，它只规定了一些属性和方法，而实现接口的类必须提供具体的信息。</p><h3 id="1-10-1-接口对类的规范"><a href="#1-10-1-接口对类的规范" class="headerlink" title="1.10.1 接口对类的规范"></a>1.10.1 接口对类的规范</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;定义一个人的接口</span><br><span class="line">interface Human &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age: number;</span><br><span class="line">    say(word: string): void;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;让老师类实现Human接口，老师类实现接口的时候必须提供接口的具体信息</span><br><span class="line">class Teacher implements Human&#123;</span><br><span class="line">    name &#x3D; &quot;老师&quot;;</span><br><span class="line">    age &#x3D; 38;</span><br><span class="line">    say(word: string): void &#123;</span><br><span class="line">        console.log(&quot;老师说&quot;+word)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;让学生类实现Human接口，学生类实现接口的时候必须提供接口的具体信息</span><br><span class="line">class Student implements Human&#123;</span><br><span class="line">    name &#x3D; &quot;学生&quot;;</span><br><span class="line">    age &#x3D; 18;</span><br><span class="line">    say(word: string): void &#123;</span><br><span class="line">         console.log(&quot;学生说&quot;+word)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-10-2-接口对对象的规范"><a href="#1-10-2-接口对对象的规范" class="headerlink" title="1.10.2 接口对对象的规范"></a>1.10.2 接口对对象的规范</h3><p>TypeScript 中的接口除了可用于对类的一部分行为进行抽象以外，也常用于对对象的形状（Shape）进行描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">interface Shape &#123;</span><br><span class="line">    head: string;</span><br><span class="line">    arm: string;</span><br><span class="line">&#125;</span><br><span class="line">interface Person &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age: number;</span><br><span class="line">    shape: Shape;</span><br><span class="line">    say(word: string): void;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let jack: Person &#x3D; &#123;</span><br><span class="line">    name: &#39;Jack&#39;,</span><br><span class="line">    age: 18,</span><br><span class="line">    shape: &#123;</span><br><span class="line">        head: &#39;head&#39;,</span><br><span class="line">        arm: &#39;arm&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    say(word: string) &#123;</span><br><span class="line">        console.log(word)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">jack.say(&#39;hi&#39;)</span><br></pre></td></tr></table></figure><h3 id="1-10-3-接口可选属性"><a href="#1-10-3-接口可选属性" class="headerlink" title="1.10.3 接口可选属性"></a>1.10.3 接口可选属性</h3><p>接口里的属性不全都是必需的。 有些是只在某些条件下存在，或者根本不存在。 可选属性在应用“option bags”模式时很常用，即给函数传入的参数对象中只有部分属性赋值了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">interface Person &#123;</span><br><span class="line">    gender: string,</span><br><span class="line">    age?: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let jack: Person &#x3D; &#123;</span><br><span class="line">    gender: &#39;Male&#39;</span><br><span class="line">    &#x2F;&#x2F; 可以不赋值 age 属性，因为是可选的</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-10-4-接口只读属性"><a href="#1-10-4-接口只读属性" class="headerlink" title="1.10.4 接口只读属性"></a>1.10.4 接口只读属性</h3><p>一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 <code>readonly</code>来指定只读属性:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">interface Person &#123;</span><br><span class="line">    readonly name: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let jack: Person &#x3D; &#123;</span><br><span class="line">    name: &#39;Jack&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jack.name &#x3D; &#39;Ivan&#39; &#x2F;&#x2F; 报错: name 是只读的</span><br><span class="line">readonly&#96; vs &#96;const</span><br></pre></td></tr></table></figure><ul><li>常量使用 const</li><li>对象属性使用 readonly</li></ul><h3 id="1-10-5-函数接口"><a href="#1-10-5-函数接口" class="headerlink" title="1.10.5 函数接口"></a>1.10.5 函数接口</h3><p>因为函数也是对象，所以我们也可以通过接口来对函数做“规定”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">interface Fn &#123;</span><br><span class="line">    (a: number, b: number): number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let add: Fn &#x3D; function(a: number, b: number): number &#123;</span><br><span class="line">    return a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(add(1, 2))</span><br></pre></td></tr></table></figure><h3 id="1-10-6-接口继承"><a href="#1-10-6-接口继承" class="headerlink" title="1.10.6 接口继承"></a>1.10.6 接口继承</h3><p>就像 ES6 的 class 一样，接口也可以做继承操作，效果就是会继承父接口的“规定”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">interface Animal &#123;</span><br><span class="line">    move(): void;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Human extends Animal &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let jack: Human &#x3D; &#123;</span><br><span class="line">    age: 18,</span><br><span class="line">    name: &#39;Jack&#39;,</span><br><span class="line">    move() &#123;</span><br><span class="line">        console.log(&#39;move&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-11-命名空间"><a href="#1-11-命名空间" class="headerlink" title="1.11 命名空间"></a>1.11 命名空间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;命名空间就是内部模块，目的就是解决重名问题。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;a.ts  声明命名空间</span><br><span class="line">&#x2F;&#x2F;TypeScript 的命名空间只对外暴露需要在外部访问的对象，命名空间内的对象通过 export 关键字对外暴露</span><br><span class="line">namespace Utils &#123;</span><br><span class="line">  export interface IPerson &#123;</span><br><span class="line">      name: string;</span><br><span class="line">      age: number;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;my.ts  使用命名空间</span><br><span class="line">&#x2F;&#x2F; reference 引用命名空间(可以加也可以不加)</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;reference path&#x3D;&quot;a.ts&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">const me: Utils.IPerson &#x3D; &#123;</span><br><span class="line">  name: &#39;funlee&#39;,</span><br><span class="line">  age: 18</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(me); &#x2F;&#x2F; &#123;name: &#39;funlee&#39;, age: 18&#125;</span><br></pre></td></tr></table></figure><h2 id="1-12-模块"><a href="#1-12-模块" class="headerlink" title="1.12 模块"></a>1.12 模块</h2><p>模块是在其自身的作用域里执行，并不是在全局作用域，这意味着定义在模块里面的变量、函数和类等在模块外部是不可见的，除非明确地使用 export 导出它们。类似地，我们必须通过 import 导入其他模块导出的变量、函数、类等。</p><p>两个模块之间的关系是通过在文件级别上使用 import 和 export 建立的(其实就是ES6的模块化语法)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;导出模块</span><br><span class="line">export var num &#x3D; 123;</span><br><span class="line">export var str &#x3D; &quot;你好&quot;;</span><br><span class="line">export function say()&#123;&#125;;</span><br><span class="line"></span><br><span class="line">var title &#x3D; &quot;标题&quot;;</span><br><span class="line">export default title;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;引入模块</span><br><span class="line">import title,&#123;num,str,say&#125; from &#39;.&#x2F;a&#39;</span><br><span class="line">console.log(title,str,say)</span><br></pre></td></tr></table></figure><h2 id="1-13-声明文件"><a href="#1-13-声明文件" class="headerlink" title="1.13 声明文件"></a>1.13 声明文件</h2><blockquote><p>d.ts为声明文件 主要用作类型的声明</p></blockquote><ul><li>在d.ts使用了declare，表示全局声明类型，需要结合tsconfig.json一起使用才能<br>有效果。 (使用方式：类似于命名空间)</li><li>或者使用export的方式，在普通ts中将d.ts导入(使用方式：类似于模块)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;data.d.ts    注意：只有声明没有实现</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;声明一个类型</span><br><span class="line">declare type StringFunc &#x3D; () &#x3D;&gt; string;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;声明一个命名空间</span><br><span class="line">declare namespace API &#123;</span><br><span class="line">  &#x2F;&#x2F;导出CurrentUser接口类型</span><br><span class="line">  export interface CurrentUser &#123;</span><br><span class="line">    avatar?: string;</span><br><span class="line">    name?: string;</span><br><span class="line">    title?: string;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-14-作业"><a href="#1-14-作业" class="headerlink" title="1.14 作业"></a>1.14 作业</h2><p>写出下列ts代码的含义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;导出一个函数 函数名字是defineConfig，函数参数是config，参数类型是IConfigFromPlugins或者IConfig，返回值是IConfigFromPlugins或者IConfig</span><br><span class="line">export declare function defineConfig(config: IConfigFromPlugins | IConfig): IConfigFromPlugins | IConfig;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;声明一个类型叫OverlayFunc，该类型是一个函数，该函数的返回值是ReactNode</span><br><span class="line">declare type OverlayFunc &#x3D; () &#x3D;&gt; React.ReactNode;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;导出一个类型，该类型叫SiderTheme，他的值是light或者dark</span><br><span class="line">export type SiderTheme &#x3D; &#39;light&#39; | &#39;dark&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;声明一个常量，名字叫columns，他的类型是ProColumns的数组，数组中的元素是TableListItem</span><br><span class="line">const columns: ProColumns&lt;TableListItem&gt;[] &#x3D; []</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;声明一个常量，名字叫LoginMessage，他的类型是React.FC，React.FC中接收&#123;content: string&#125;类型的数据。LoginMessage的值是一个箭头函数，该函数通过解构赋值或者content作为函数的入参，函数没有返回值</span><br><span class="line">const LoginMessage: React.FC&lt;&#123;</span><br><span class="line">  content: string;</span><br><span class="line">&#125;&gt; &#x3D; (&#123; content &#125;) &#x3D;&gt; ()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;type的 | 和 &amp;</span><br><span class="line">type Env1 &#x3D; &#39;prod&#39; | &#39;test&#39; | &#39;dev&#39;;</span><br><span class="line">type Env2 &#x3D; &#39;prod&#39; | &#39;boe&#39; | &#39;ppe&#39;;</span><br><span class="line"></span><br><span class="line">type EnvUnion &#x3D; Env1 | Env2; &#x2F;&#x2F; &#39;prod&#39; | &#39;test&#39; | &#39;dev&#39; | &#39;boe&#39; | &#39;ppe&#39;  取并集</span><br><span class="line">type EnvInter &#x3D; Env1 &amp; Env2; &#x2F;&#x2F; &#39;prod&#39;   取交集</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;声明一个类型叫Partial，主要作用就是将T中的每一个键可选</span><br><span class="line">type Partial&lt;T&gt; &#x3D; &#123;</span><br><span class="line">  [P in keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;声明一个类型叫Pick 主要作用选择T中的符合条件的属性</span><br><span class="line">&#x2F;&#x2F;https:&#x2F;&#x2F;blog.csdn.net&#x2F;weixin_34376986&#x2F;article&#x2F;details&#x2F;93167453</span><br><span class="line">type Pick&lt;T, K extends keyof T&gt; &#x3D; &#123;</span><br><span class="line">    [P in K]: T[P];</span><br><span class="line">&#125;;</span><br><span class="line">                 </span><br><span class="line">&#x2F;&#x2F;判断T是不是继承U，如果是则取never类型，否则取T类型本身</span><br><span class="line">type Exclude&lt;T, U&gt; &#x3D; T extends U ? never : T;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;判断T是不是继承U，如果是则取T类型，否则取never类型</span><br><span class="line">type Extract&lt;T, U&gt; &#x3D; T extends U ? T : never;</span><br><span class="line">          </span><br><span class="line">&#x2F;&#x2F;Omit 主要作用 选择T中除了K之外的其他属性          </span><br><span class="line">type Omit&lt;T, K extends keyof any&gt; &#x3D; Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;声明一个常量REACT_APP_ENV，他的值是test  dev  pre 或者false中的任意一个</span><br><span class="line">declare const REACT_APP_ENV: &#39;test&#39; | &#39;dev&#39; | &#39;pre&#39; | false;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TypeScript&quot;&gt;&lt;a href=&quot;#TypeScript&quot; class=&quot;headerlink&quot; title=&quot;TypeScript&quot;&gt;&lt;/a&gt;TypeScript&lt;/h1&gt;&lt;h2 id=&quot;1-1-TS简介&quot;&gt;&lt;a href=&quot;#1-1-TS简介&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>js三大家族</title>
    <link href="http://example.com/2021/04/01/JS%E4%B8%89%E5%A4%A7%E5%AE%B6%E6%97%8F/"/>
    <id>http://example.com/2021/04/01/JS%E4%B8%89%E5%A4%A7%E5%AE%B6%E6%97%8F/</id>
    <published>2021-04-01T02:36:26.000Z</published>
    <updated>2021-03-11T11:38:03.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-1-三大家族和一个事件对象"><a href="#1-1-三大家族和一个事件对象" class="headerlink" title="1.1 三大家族和一个事件对象"></a>1.1 三大家族和一个事件对象</h1><p>三大家族（offset/scroll/client）</p><p>事件对象/event （事件被触动时，鼠标和键盘的状态）（通过属性控制）</p><h1 id="1-2-Offset家族简介"><a href="#1-2-Offset家族简介" class="headerlink" title="1.2 Offset家族简介"></a>1.2 Offset家族简介</h1><p>offset这个单词本身是–偏移，补偿，位移的意思。</p><p>js中有一套方便的获取元素尺寸的办法就是offset家族；</p><p>offsetWidth和offsetHight以及offsetLeft和offsetTop以及offsetParent</p><p>共同组成了offset家族。</p><h3 id="1-2-1-offsetWidth和offsetHight-（检测盒子自身宽高-padding-border）"><a href="#1-2-1-offsetWidth和offsetHight-（检测盒子自身宽高-padding-border）" class="headerlink" title="1.2.1 offsetWidth和offsetHight （检测盒子自身宽高+padding+border）"></a>1.2.1 offsetWidth和offsetHight （检测盒子自身宽高+padding+border）</h3><p>这两个属性，他们绑定在了所有的节点元素上。获取之后，只要调用这两个属性，我们就能够获取元素节点的宽和高。</p><p>offset宽/高 = 盒子自身的宽/高 + padding+border；</p><p>offsetWidth =width+padding+border；</p><p>offsetHeight =Height+padding+border；</p><h3 id="1-2-2-offsetLeft和offsetTop-（检测距离父盒子有定位的左-上面的距离）"><a href="#1-2-2-offsetLeft和offsetTop-（检测距离父盒子有定位的左-上面的距离）" class="headerlink" title="1.2.2 offsetLeft和offsetTop （检测距离父盒子有定位的左/上面的距离）"></a>1.2.2 offsetLeft和offsetTop （检测距离父盒子有定位的左/上面的距离）</h3><p>返回距离上级盒子（带有定位）左边s的位置</p><p>如果父级都没有定位则以body为准</p><p>offsetLeft 从父亲的padding 开始算,父亲的border 不算。</p><p>在父盒子有定位的情况下，offsetLeft == style.left(去掉px)</p><h3 id="1-2-3-offsetParent-（检测父系盒子中带有定位的父盒子节点）"><a href="#1-2-3-offsetParent-（检测父系盒子中带有定位的父盒子节点）" class="headerlink" title="1.2.3 offsetParent （检测父系盒子中带有定位的父盒子节点）"></a>1.2.3 offsetParent （检测父系盒子中带有定位的父盒子节点）</h3><p>1、返回改对象的父级 （带有定位）</p><p> 如果当前元素的父级元素没有进行CSS定位 （position为absolute或 relative，fixed）， offsetParent为body。</p><p>2、如果当前元素的父级元素中有CSS定位 （position为absolute或 relative，fixed）， offsetParent取最近的那个父级元素。</p><h1 id="1-3-offsetLeft和style-left区别"><a href="#1-3-offsetLeft和style-left区别" class="headerlink" title="1.3 offsetLeft和style.left区别"></a>1.3 offsetLeft和style.left区别</h1><p>一、最大区别在于offsetLeft可以返回没有定位盒子的距离左侧的位置。</p><p>而 style.left不可以</p><p>二、offsetTop 返回的是数字，而 style.top 返回的是字符串，除了数字外还带有单位：px。</p><p>三、offsetTop 只读，而 style.top 可读写。（只读是获取值，可写是赋值）</p><p>四、如果没有给 HTML 元素指定过 top 样式，则style.top 返回的是空字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">style.left在&#x3D;的左边和右边还不一样。（左边的时候是属性，右边的时候是值）</span><br></pre></td></tr></table></figure><h1 id="Scroll家族组成"><a href="#Scroll家族组成" class="headerlink" title="Scroll家族组成"></a>Scroll家族组成</h1><p>ScrollWidth和scrollHeight（不包括border）</p><p>检测盒子的宽高。（调用者：节点元素。属性。）</p><p>盒子内容的宽高。（如果有内容超出了，显示内容的高度）</p><p>IE567可以比盒子小。 IE8+火狐谷歌不能比盒子小</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="scrollLeft和scrollTop"><a href="#scrollLeft和scrollTop" class="headerlink" title="scrollLeft和scrollTop"></a>scrollLeft和scrollTop</h2><p>网页，被浏览器遮挡的头部和左边部分。</p><p>被卷去的头部和左边部分。</p><p>兼容性问题</p><p>一、未声明 DTD（谷歌只认识他）</p><p>document.body.scrollTop</p><p>二、已经声明DTD（IE678只认识他）</p><p>document.documentElement.scrollTop</p><p>三、火狐/谷歌/ie9+以上支持的</p><p>window.pageYOffset</p><h2 id="兼容写法"><a href="#兼容写法" class="headerlink" title="兼容写法"></a>兼容写法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">var aaa &#x3D; window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;</span><br><span class="line">Code</span><br><span class="line">var aaa &#x3D; document.documentElement.scrollTop + document.body.scrollTop;</span><br></pre></td></tr></table></figure><p>事件event</p><h2 id="1-1-事件对象的获取（event的获取）"><a href="#1-1-事件对象的获取（event的获取）" class="headerlink" title="1.1 事件对象的获取（event的获取）"></a>1.1 事件对象的获取（event的获取）</h2><p>IE678中，window.event</p><p>在火狐谷歌中，event或者，在事件绑定的函数中，加参，这个参数就是event.</p><p>Box.onclick = function (aaa){ aaa就是event }</p><h2 id="1-2-兼容获取方式有两种："><a href="#1-2-兼容获取方式有两种：" class="headerlink" title="1.2 兼容获取方式有两种："></a>1.2 兼容获取方式有两种：</h2><p>不写参数直接使用event;</p><p>写参数，但是为event….var event = event || window.event;(主要用这种)</p><h2 id="1-3-event内容重要内容"><a href="#1-3-event内容重要内容" class="headerlink" title="1.3 event内容重要内容"></a>1.3 event内容重要内容</h2><p><a href="https://img-blog.csdn.net/20170330141538969?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1ppb3M=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"><img src="https://img-blog.csdn.net/20170330141538969?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1ppb3M=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></a></p><p>PageY/pageX: 鼠标位于整个网页页面的顶部和左侧部分的距离。（页面）</p><p>ScreenY/screenX: 鼠标位于屏幕的上方和左侧的距离。（屏幕）</p><p>ClientX/clientY: 鼠标位于浏览器的左侧和顶部的距离。（浏览器大小和位置）</p><h2 id="1-1-PageY和pageX的兼容写法（很重要）"><a href="#1-1-PageY和pageX的兼容写法（很重要）" class="headerlink" title="1.1 PageY和pageX的兼容写法（很重要）"></a>1.1 PageY和pageX的兼容写法（很重要）</h2><p>在页面位置就等于 = 看得见的+看不见的</p><p>pageY/pageX=event.clientY/clientX+scroll().top/scroll().left</p><h1 id="client家族"><a href="#client家族" class="headerlink" title="client家族"></a>client家族</h1><h2 id="1-1-主要成员"><a href="#1-1-主要成员" class="headerlink" title="1.1 主要成员"></a>1.1 主要成员</h2><p>1、clientWidth 获取网页可视区域宽度（两种用法）</p><p>clientHeight 获取网页可视区域高度（两种用法）</p><p>调用者不同，意义不同：</p><p> 盒子调用： 指盒子本身。</p><p> body/html调用： 可视区域大小。</p><p>2、clientX 鼠标距离可视区域左侧距离（event调用）</p><p>clientY 鼠标距离可视区域上侧距离（event调用）</p><p>3、clientTop/clientLeft 盒子的border宽高</p><h2 id="1-2-三大家族区别（三大家族总结）"><a href="#1-2-三大家族区别（三大家族总结）" class="headerlink" title="1.2 三大家族区别（三大家族总结）"></a>1.2 三大家族区别（三大家族总结）</h2><h3 id="1-2-1-Width和height"><a href="#1-2-1-Width和height" class="headerlink" title="1.2.1 Width和height"></a>1.2.1 Width和height</h3><p>clientWidth = width + padding</p><p>clientHeight = height + padding</p><p>offsetWidth = width + padding + border</p><p>offsetHeight = height + padding + border</p><p>scrollWidth = 内容宽度（不包含border）width + padding</p><p>scrollHeight = 内容高度（不包含border）</p><h3 id="1-2-2-top和left"><a href="#1-2-2-top和left" class="headerlink" title="1.2.2 top和left"></a>1.2.2 top和left</h3><p>offsetTop/offsetLeft：</p><p> 调用者：任意元素。(盒子为主)</p><p> 作用：距离父系盒子中带有定位的距离。</p><p>scrollTop/scrollLeft:(盒子也可以调用，必须有滚动条)</p><p> 调用者：document.body.scrollTop/…..(window)</p><p> 作用：浏览器无法显示的部分（被卷去的部分）。</p><p>clientY/clientX:（clientTop/clientLeft 值的是border）</p><p> 调用者：event.clientX(event)</p><p> 作用：鼠标距离浏览器可视区域的距离（左、上）。</p><p>// width和height<br>// offset带border<br>// scroll不带border，内容的宽高<br>// client不带border</p><p>// top和left<br>// offset距离父系盒子带有定位的盒子之间的距离<br>// scroll被卷去的部分的距离<br>// clientborder的宽高</p><p>//clientX和clientY<br>// event调用，鼠标距离浏览器的可视区域的距离</p><h2 id="1-3-client家族特殊用法之-检浏览器宽-高度-可视区域"><a href="#1-3-client家族特殊用法之-检浏览器宽-高度-可视区域" class="headerlink" title="1.3 client家族特殊用法之:检浏览器宽/高度(可视区域)"></a>1.3 client家族特殊用法之:检浏览器宽/高度(可视区域)</h2><p><a href="https://img-blog.csdn.net/20170331094037076?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1ppb3M=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"><img src="https://img-blog.csdn.net/20170331094037076?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1ppb3M=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></a></p><h2 id="1-4-Onresize事件"><a href="#1-4-Onresize事件" class="headerlink" title="1.4 Onresize事件"></a>1.4 Onresize事件</h2><p>只要浏览器的大小改变，哪怕1像素，都会触动这个事件。</p><h2 id="1-5-案例：根据浏览器可视区域大小，给定背景色"><a href="#1-5-案例：根据浏览器可视区域大小，给定背景色" class="headerlink" title="1.5 案例：根据浏览器可视区域大小，给定背景色"></a>1.5 案例：根据浏览器可视区域大小，给定背景色</h2><h2 id="1-6-事件总结"><a href="#1-6-事件总结" class="headerlink" title="1.6 事件总结"></a>1.6 事件总结</h2><p>区分：</p><p>1.window.onscroll 屏幕滑动</p><p>2.window.onresize 浏览器大小变化</p><p>3.window.onload 页面加载完毕</p><p>4.div.onmousemove 鼠标在盒子上移动</p><p> （注意：不是盒子移动！！！）</p><p>5.onmouseup/onmousedown == onclick</p><h2 id="1-7-获得屏幕宽高"><a href="#1-7-获得屏幕宽高" class="headerlink" title="1.7 获得屏幕宽高"></a>1.7 获得屏幕宽高</h2><p>window.screen.width</p><p>分辨率是屏幕图像的精密度，指显示器所能显示的像素有多少。</p><p>我们的电脑一般：</p><p>横向1280个像素点，</p><p>纵向960个像素点。</p><p>我们看电影的时候是满屏和半屏的，就是这。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-1-三大家族和一个事件对象&quot;&gt;&lt;a href=&quot;#1-1-三大家族和一个事件对象&quot; class=&quot;headerlink&quot; title=&quot;1.1 三大家族和一个事件对象&quot;&gt;&lt;/a&gt;1.1 三大家族和一个事件对象&lt;/h1&gt;&lt;p&gt;三大家族（offset/scroll</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JS 中的闭包与模块</title>
    <link href="http://example.com/2021/03/11/hello-world/"/>
    <id>http://example.com/2021/03/11/hello-world/</id>
    <published>2021-03-11T15:55:43.236Z</published>
    <updated>2021-03-11T11:20:04.342Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS-中的闭包与模块"><a href="#JS-中的闭包与模块" class="headerlink" title="JS 中的闭包与模块"></a>JS 中的闭包与模块</h2><p>全局变量使用容易引发bug，咱们经常教导尽量不要使用全局变量，尽管全局变量在某些情况下是有用的。例如，在浏览器中使用JS时，咱们可以访问全局<code>window</code>对象，<code>window</code>中有很多有用的方法，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">window.alert(&#39;Hello world&#39;); &#x2F;&#x2F; Shows an alert</span><br><span class="line">window.setTimeout(callback, 3000); &#x2F;&#x2F; Delay execution</span><br><span class="line">window.fetch(someUrl); &#x2F;&#x2F; make XHR requests</span><br><span class="line">window.open(); &#x2F;&#x2F; Opens a new tab</span><br></pre></td></tr></table></figure><p>这些方法也像这样使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">alert(&#39;Hello world&#39;); &#x2F;&#x2F; Shows an alert</span><br><span class="line">setTimeout(callback, 3000); &#x2F;&#x2F; Delay execution</span><br><span class="line">fetch(someUrl); &#x2F;&#x2F; make XHR requests</span><br><span class="line">open(); &#x2F;&#x2F; Opens a new tab</span><br></pre></td></tr></table></figure><p>这是方便的。<code>Redux</code>是另一个“好”全局变量的例子:整个应用程序的状态存储在一个JS对象中，这个对象可以从整个应用程序(通过Redux)访问。但是当在一个团队如果同时有50个编写代码时，以如何处理这样的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">var arr &#x3D; [];</span><br><span class="line"></span><br><span class="line">function addToArr(element) &#123;</span><br><span class="line">  arr.push(element);</span><br><span class="line">  return element + &quot; added!&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>咱们同事在另一个文件中创建一个名为<code>arr</code>的新全局数组的几率有多大?我觉得非常高。JS中的全局变量非常糟糕的另一个原因是引擎足够友好，可以为咱们创建全局变量。如果忘了在变量名前加上<code>var</code>，就像这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">name &#x3D; &quot;Valentino&quot;;</span><br></pre></td></tr></table></figure><p>JS引擎为会创建一个全局变量，更糟糕的是，可以在函数中创建了“非预期”变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">function doStuff() &#123;</span><br><span class="line">  name &#x3D; &quot;Valentino&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doStuff();</span><br><span class="line"></span><br><span class="line">console.log(name); &#x2F;&#x2F; &quot;Valentino&quot;</span><br></pre></td></tr></table></figure><p>无辜的功能最终污染了全球环境。幸运的是，可以用“严格模式”来消除这种行为， 在每个JS文件使用<code>“use strict”</code>足以避免愚蠢的错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">function doStuff() &#123;</span><br><span class="line">  name &#x3D; &quot;Valentino&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doStuff();</span><br><span class="line"></span><br><span class="line">console.log(name); &#x2F;&#x2F; ReferenceError: name is not defined</span><br></pre></td></tr></table></figure><p>但一直使用严格模式也是一个问题，并不确实每个开发人员都会使用严格模式，因此，咱们必须找到一种解决“全局变量污染”问题的方法，幸运的是，JS 一直有一个内置的机制来解决这个问题。</p><h2 id="揭秘闭包"><a href="#揭秘闭包" class="headerlink" title="揭秘闭包"></a>揭秘闭包</h2><p>那么，咱们如何保护全局变量不被污染?让咱们从一个简单的解开始，把<code>arr</code>移动到一个函数中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">function addToArr(element) &#123;</span><br><span class="line">  var arr &#x3D; [];</span><br><span class="line">  arr.push(element);</span><br><span class="line">  return element + &quot; added to &quot; + arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>似乎合理，但结果不是咱们所期望的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">var firstPass &#x3D; addToArr(&quot;a&quot;);</span><br><span class="line">var secondPass &#x3D; addToArr(&quot;b&quot;);</span><br><span class="line">console.log(firstPass); &#x2F;&#x2F; a added to a</span><br><span class="line">console.log(secondPass); &#x2F;&#x2F; b added to b</span><br></pre></td></tr></table></figure><p><code>arr</code>在每次函数调用时都会被重置，现在它成了一个局部变量，而在第一个例子中咱们声明的<code>arr</code>是全局变量。全局变量是“实时的”，不会被重围。局部变量在函数执行完后就会被销毁了似乎没有办法防止局部变量被破坏？闭包会有帮助吗？但是什么是 闭包呢？</p><p>JS函数可以包含其他函数，这到现在是很常见的，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">function addToArr(element) &#123;</span><br><span class="line">  var arr &#x3D; [];</span><br><span class="line"></span><br><span class="line">  function push() &#123;</span><br><span class="line">    arr.push(element);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return element + &quot; added to &quot; + arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但如果咱们直接把 <code>push</code> 函数返回，又会怎么样呢？如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">function addToArr(element) &#123;</span><br><span class="line">  var arr &#x3D; [];</span><br><span class="line"></span><br><span class="line">  return function push() &#123;</span><br><span class="line">    arr.push(element);</span><br><span class="line">    console.log(arr);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;return element + &quot; added to &quot; + arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外部函数变成一个容器，返回另一个函数。第二个<code>return</code>语句被注释，因为该代码永远不会被执行。此时，咱们知道函数调用的结果可以保存在变量中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">var result &#x3D; addToArr();</span><br></pre></td></tr></table></figure><p>现在<code>result</code>变成了一个可执行的JS函数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">var result &#x3D; addToArr();</span><br><span class="line">result(&quot;a&quot;);</span><br><span class="line">result(&quot;b&quot;);</span><br></pre></td></tr></table></figure><p>只需修复一下，将参数“<code>element</code>”从外部函数移动到内部函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">function addToArr() &#123;</span><br><span class="line">  var arr &#x3D; [];</span><br><span class="line"></span><br><span class="line">  return function push(element) &#123;</span><br><span class="line">    arr.push(element);</span><br><span class="line">    console.log(arr);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;return element + &quot; added to &quot; + arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>神奇的现象出现了，完整代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">function addToArr() &#123;</span><br><span class="line">  var arr &#x3D; [];</span><br><span class="line"></span><br><span class="line">  return function push(element) &#123;</span><br><span class="line">    arr.push(element);</span><br><span class="line">    console.log(arr);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;return element + &quot; added to &quot; + arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var result &#x3D; addToArr();</span><br><span class="line">result(&quot;a&quot;); &#x2F;&#x2F; [ &#39;a&#39; ]</span><br><span class="line">result(&quot;b&quot;); &#x2F;&#x2F; [ &#39;a&#39;, &#39;b&#39; ]</span><br></pre></td></tr></table></figure><p>这种被称为JS闭包:一个能够记住其环境变量的函数。为此，内部函数必须是一个封闭(外部)函数的返回值。这种也称为<strong>工厂函数</strong>。代码可以稍作调整，变更可以取更好的命名，内部函数可以是匿名的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">function addToArr() &#123;</span><br><span class="line">  var arr &#x3D; [];</span><br><span class="line"></span><br><span class="line">  return function(element) &#123;</span><br><span class="line">    arr.push(element);</span><br><span class="line">    return element + &quot; added to &quot; + arr;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var closure &#x3D; addToArr();</span><br><span class="line">console.log(closure(&quot;a&quot;)); &#x2F;&#x2F; a added to a</span><br><span class="line">console.log(closure(&quot;b&quot;)); &#x2F;&#x2F; b added to a,b</span><br></pre></td></tr></table></figure><p>现在应该清楚了，“<code>闭包</code>”是内部函数。但有一个问题需要解决:咱们为什么要这样做?JS闭包的真正目的是什么?</p><h2 id="闭包的需要"><a href="#闭包的需要" class="headerlink" title="闭包的需要"></a>闭包的需要</h2><p>除了纯粹的“学术”知识之外，JS闭包还有很多用处：</p><ul><li>提供私有的全局变量</li><li>在函数调用之间保存变量(状态)</li></ul><p>JS中闭包最有趣的应用程序之一是<code>模块模式</code>。在ES6之前，除了将变量和方法封装在函数中之外，没有其他方法可以模块化JS代码并提供私有变量与方法”。闭包与立即调用的函数表达式相结合 是至今通用解决方案。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">var Person &#x3D; (function()&#123;</span><br><span class="line">  &#x2F;&#x2F; do something</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>在模块中可以有“私有”变量和方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">var Person &#x3D; (function() &#123;</span><br><span class="line">  var person &#x3D; &#123;</span><br><span class="line">    name: &quot;&quot;,</span><br><span class="line">    age: 0</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  function setName(personName) &#123;</span><br><span class="line">    person.name &#x3D; personName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function setAge(personAge) &#123;</span><br><span class="line">    person.age &#x3D; personAge;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>从外部咱们无法访问<code>person.name</code>或<code>person.age</code>。咱们也不能调用<code>setName</code>或<code>setAge</code>。模块内的所有内容都是“私有的”。如果想公开咱们的方法，我们可以返回一个包含对私有方法引用的对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">var Person &#x3D; (function() &#123;</span><br><span class="line">  var person &#x3D; &#123;</span><br><span class="line">    name: &quot;&quot;,</span><br><span class="line">    age: 0</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  function setName(personName) &#123;</span><br><span class="line">    person.name &#x3D; personName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function setAge(personAge) &#123;</span><br><span class="line">    person.age &#x3D; personAge;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return &#123;</span><br><span class="line">    setName: setName,</span><br><span class="line">    setAge: setAge</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>如果想获取<code>person</code>对象，添加一个获取 <code>person</code> 对象的方法并返回即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">var Person &#x3D; (function() &#123;</span><br><span class="line">  var person &#x3D; &#123;</span><br><span class="line">    name: &quot;&quot;,</span><br><span class="line">    age: 0</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  function setName(personName) &#123;</span><br><span class="line">    person.name &#x3D; personName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function setAge(personAge) &#123;</span><br><span class="line">    person.age &#x3D; personAge;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function getPerson() &#123;</span><br><span class="line">    return person.name + &quot; &quot; + person.age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return &#123;</span><br><span class="line">    setName: setName,</span><br><span class="line">    setAge: setAge,</span><br><span class="line">    getPerson: getPerson</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">Person.setName(&quot;Tom&quot;);</span><br><span class="line">Person.setAge(44);</span><br><span class="line">var person &#x3D; Person.getPerson();</span><br><span class="line">console.log(person); &#x2F;&#x2F; Tom 44</span><br></pre></td></tr></table></figure><p>这种方式，外部获取不到 <code>person</code> 对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">console.log(Person.person); &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure><p>模块模式不是构造JS代码的唯一方式。使用对象，咱们可以实现相同的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">var Person &#x3D; &#123;</span><br><span class="line">  name: &quot;&quot;,</span><br><span class="line">  age: 0,</span><br><span class="line">  setName: function(personName) &#123;</span><br><span class="line">    this.name &#x3D; personName;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; other methods here</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但是这样，内部属性就不在是私有的了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">var Person &#x3D; &#123;</span><br><span class="line">  name: &quot;&quot;,</span><br><span class="line">  age: 0,</span><br><span class="line">  setName: function(personName) &#123;</span><br><span class="line">    this.name &#x3D; personName;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; other methods here</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Person.setName(&quot;Tom&quot;);</span><br><span class="line"></span><br><span class="line">console.log(Person.name); &#x2F;&#x2F; Tom</span><br></pre></td></tr></table></figure><p>这是模块的主要卖点之一。另一个好处是，模块有助于组织代码，使其具有重用性和可读性。如，开发人员看到以下的代码就大概知道是做什么的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">var Person &#x3D; (function() &#123;</span><br><span class="line">  var person &#x3D; &#123;</span><br><span class="line">    name: &quot;&quot;,</span><br><span class="line">    age: 0</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  function setName(personName) &#123;</span><br><span class="line">    person.name &#x3D; personName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function setAge(personAge) &#123;</span><br><span class="line">    person.age &#x3D; personAge;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function getPerson() &#123;</span><br><span class="line">    return person.name + &quot; &quot; + person.age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return &#123;</span><br><span class="line">    setName: setName,</span><br><span class="line">    setAge: setAge,</span><br><span class="line">    getPerson: getPerson</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>全局变量很容易引发bug，咱们应该尽可能地避免它们。有时全局变量是有用的，需要格外小心使用，因为JS引擎可以自由地创建全局变量。</p><p>这些年来出现了许多模式来管理全局变量，模块模式就是其中之一。模块模式建立在闭包上，这是JS的固有特性。JS 中的闭包是一种能够“记住”其变量环境的函数，即使在后续函数调用之间也是如此。当咱们从另一个函数返回一个函数时，会创建一个闭包，这个模式也称为<strong>“工厂函数</strong>”。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ul><li>什么是闭包？</li><li>使用全局变量有哪些不好的方面？</li><li>什么是 JS 模块，为什么要使用它？</li></ul><p><a href="https://hexo.io/docs/one-command-deployment.html">https://hexo.io/docs/one-command-deployment.html</a>)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JS-中的闭包与模块&quot;&gt;&lt;a href=&quot;#JS-中的闭包与模块&quot; class=&quot;headerlink&quot; title=&quot;JS 中的闭包与模块&quot;&gt;&lt;/a&gt;JS 中的闭包与模块&lt;/h2&gt;&lt;p&gt;全局变量使用容易引发bug，咱们经常教导尽量不要使用全局变量，尽管全局变量在</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Offset家族简介</title>
    <link href="http://example.com/2021/03/11/Offset%E5%AE%B6%E6%97%8F%E7%AE%80%E4%BB%8B/"/>
    <id>http://example.com/2021/03/11/Offset%E5%AE%B6%E6%97%8F%E7%AE%80%E4%BB%8B/</id>
    <published>2021-03-11T15:47:28.000Z</published>
    <updated>2021-03-11T15:47:28.438Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>cookie session</title>
    <link href="http://example.com/2021/03/11/cookie-session/"/>
    <id>http://example.com/2021/03/11/cookie-session/</id>
    <published>2021-03-11T14:38:25.000Z</published>
    <updated>2021-03-11T14:41:05.742Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-cookie --save</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="引入与配置"><a href="#引入与配置" class="headerlink" title="引入与配置"></a>引入与配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const cookieParser &#x3D; require(&#39;cookie-parser&#39;);</span><br><span class="line">&#x2F;&#x2F;中间件 签名</span><br><span class="line">app.use(cookieParser(&#39;howlcn&#39;));</span><br></pre></td></tr></table></figure><h4 id="用cookie储存信息"><a href="#用cookie储存信息" class="headerlink" title="用cookie储存信息"></a>用cookie储存信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res.cookie(&#39;username&#39;,req.body.username,&#123;</span><br><span class="line">    maxAge:1000*60, &#x2F;&#x2F;cookie失效的时长（单位毫秒）</span><br><span class="line">    signed:true&#x2F;&#x2F;开启签名 方式用户篡改cookie</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="清空cookie"><a href="#清空cookie" class="headerlink" title="清空cookie"></a>清空cookie</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.cookie();</span><br></pre></td></tr></table></figure><h4 id="获取cookie中的数据"><a href="#获取cookie中的数据" class="headerlink" title="获取cookie中的数据"></a>获取cookie中的数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let username &#x3D; req.signedCookies.username;&#x2F;&#x2F;获取cookie中的username</span><br></pre></td></tr></table></figure><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>session底层还是调用了cookie</p><p><a href="https://i.loli.net/2019/05/30/5cef97889476388883.png"><img src="https://i.loli.net/2019/05/30/5cef97889476388883.png" alt="session"></a></p><h3 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-session --save</span><br></pre></td></tr></table></figure><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><h4 id="引入与配置-1"><a href="#引入与配置-1" class="headerlink" title="引入与配置"></a>引入与配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const express &#x3D; require(&#39;express&#39;);</span><br><span class="line">const app &#x3D; express();</span><br><span class="line">const expressSession &#x3D; require(&#39;express-session&#39;);</span><br><span class="line">&#x2F;&#x2F;配置expressSession中间件</span><br><span class="line">app.use(expressSession(&#123;</span><br><span class="line">    &#x2F;&#x2F;cookie的名字</span><br><span class="line">    name:&#39;howlcn&#39;,</span><br><span class="line">    &#x2F;&#x2F;cookie签名的信息</span><br><span class="line">    secret:&#39;howlcn&#39;,</span><br><span class="line">    cookie:&#123;</span><br><span class="line">        maxAge:100000</span><br><span class="line">    &#125;,</span><br><span class="line">    resave:false,</span><br><span class="line">    &#x2F;&#x2F;saveUninitialized为true时会将没有初始化的session的数据保存到storage中</span><br><span class="line">    &#x2F;&#x2F;一般没有初始化的session是没有数据的  不必保存  则设置为false</span><br><span class="line">    saveUninitialized: false,</span><br><span class="line">    &#x2F;&#x2F;为true时，某客户端每一次访问都会重置cookie的重置时间(maxAge)</span><br><span class="line">    rolling:true,</span><br><span class="line">    &#x2F;&#x2F;指定session数据存放的地方(数据库),默认保存在服务器内存中（null也是）</span><br><span class="line">    store:null</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h4 id="用session存储数据"><a href="#用session存储数据" class="headerlink" title="用session存储数据"></a>用session存储数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.session.username &#x3D; username;</span><br></pre></td></tr></table></figure><h4 id="清空session"><a href="#清空session" class="headerlink" title="清空session"></a>清空session</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.session.destroy()</span><br></pre></td></tr></table></figure><h4 id="获取session中的信息"><a href="#获取session中的信息" class="headerlink" title="获取session中的信息"></a>获取session中的信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let username &#x3D; req.session.username;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;cookie&quot;&gt;&lt;a href=&quot;#cookie&quot; class=&quot;headerlink&quot; title=&quot;cookie&quot;&gt;&lt;/a&gt;cookie&lt;/h2&gt;&lt;h3 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vue中路由跳转view却不更新的问题与解决办法</title>
    <link href="http://example.com/2021/03/11/vue%E4%B8%AD%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%ACview%E5%8D%B4%E4%B8%8D%E6%9B%B4%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://example.com/2021/03/11/vue%E4%B8%AD%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%ACview%E5%8D%B4%E4%B8%8D%E6%9B%B4%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</id>
    <published>2021-03-11T14:20:48.000Z</published>
    <updated>2021-03-11T14:37:14.417Z</updated>
    
    <content type="html"><![CDATA[<p>一般情况下路由从<code>/myrouter</code>跳转至<code>/yourrouter</code>时，view会发生更新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">若遇到&#x2F;products&#x2F;:id这样只改变id号的场景。就不会发生更新</span><br></pre></td></tr></table></figure><p>情况如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.js</span><br><span class="line">&#123;</span><br><span class="line">    path: &quot;&#x2F;products&#x2F;:id&quot;,</span><br><span class="line">    name: &quot;product&quot;,</span><br><span class="line">    components: Product</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在路由<code>/products/:id</code>对应一个组件<code>Product.vue</code>,组件中有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;test1&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;p&gt;msg: &#123;&#123;msg&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    mounted()&#123;</span><br><span class="line">        this.init(this.$router.history.current.params.id);</span><br><span class="line">    &#125;，</span><br><span class="line">    methods:&#123;</span><br><span class="line">        init(id)&#123;</span><br><span class="line">            this.msg &#x3D; this.$router.history.current.params.id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>为什么上述情况会导致view不更新呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">答：由于router-view是复用的，单纯的改变id号并不会刷新router-view。追根揭底就是因为data没有变化，只要路由跳转时触发 init() 函数来改变data就可以了。</span><br></pre></td></tr></table></figure><p>解决办法：</p><ol><li><p>用 :key 来阻止“复用”</p><p>在父组件中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view :key&#x3D;&quot;key&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">computed: &#123;</span><br><span class="line">    key() &#123;</span><br><span class="line">        return this.$route.name !&#x3D;&#x3D; undefined? this.$route.name +new Date(): this.$route +new Date()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种办法实质上是让每次路由跳转时重新构建该组件，我们在它的生命周期中写一个打印语句就能看出来。</p></li><li><p>通过 watch 监听路由</p><p>在子组件中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123; &#x2F;&#x2F;通过watch来监听路由变化</span><br><span class="line">    &#39;$route&#39;: function () &#123;</span><br><span class="line">        this.init(this.$router.history.current.params.id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过 <code>vue-router</code>的钩子函数 <code>beforeRouteEnter</code> <code>beforeRouteUpdate</code> <code>beforeRouteLeave</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteEnter (to, from, next) &#123;</span><br><span class="line">   &#x2F;&#x2F; 在渲染该组件的对应路由被 confirm 前调用</span><br><span class="line">   &#x2F;&#x2F; 不！能！获取组件实例 &#96;this&#96;</span><br><span class="line">   &#x2F;&#x2F; 因为当钩子执行前，组件实例还没被创建</span><br><span class="line">&#125;,</span><br><span class="line">beforeRouteUpdate (to, from, next) &#123;</span><br><span class="line">   &#x2F;&#x2F; 在当前路由改变，但是该组件被复用时调用</span><br><span class="line">   &#x2F;&#x2F; 举例来说，对于一个带有动态参数的路径 &#x2F;foo&#x2F;:id，在 &#x2F;foo&#x2F;1 和 &#x2F;foo&#x2F;2 之间跳转的时候，</span><br><span class="line">   &#x2F;&#x2F; 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span><br><span class="line">   &#x2F;&#x2F; 可以访问组件实例 &#96;this&#96;</span><br><span class="line">&#125;,</span><br><span class="line">beforeRouteLeave (to, from, next) &#123;</span><br><span class="line">   &#x2F;&#x2F; 导航离开该组件的对应路由时调用</span><br><span class="line">   &#x2F;&#x2F; 可以访问组件实例 &#96;this&#96;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一般情况下路由从&lt;code&gt;/myrouter&lt;/code&gt;跳转至&lt;code&gt;/yourrouter&lt;/code&gt;时，view会发生更新。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://example.com/2021/03/11/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://example.com/2021/03/11/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2021-03-11T14:14:21.000Z</published>
    <updated>2021-03-11T14:18:41.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则就是对字符串进行查找、匹配、替换等操作的一串“规则字符串”</p><p>使用方法：在一对斜杠之间添加正则表达式 如：**/** 正则表达式 <strong>/</strong></p><h2 id="正则表达式的组成"><a href="#正则表达式的组成" class="headerlink" title="正则表达式的组成"></a>正则表达式的组成</h2><ul><li>普通字符</li><li>特殊字符（元字符）：正则表达式中具有特殊意义的字符</li></ul><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><table><thead><tr><th><strong>\d</strong></th><th><strong>表示数字</strong></th></tr></thead><tbody><tr><td><strong>\D</strong></td><td><strong>非数字</strong></td></tr><tr><td><strong>\s</strong></td><td><strong>空格符</strong></td></tr><tr><td><strong>\S</strong></td><td><strong>非空格符</strong></td></tr><tr><td><strong>\w</strong></td><td><strong>字母或数字或下划线</strong></td></tr><tr><td><strong>\W</strong></td><td><strong>非字母、数字、下划线</strong></td></tr><tr><td><strong>.</strong></td><td><strong>任意字符（不包含换行符）</strong></td></tr><tr><td><strong>\b</strong></td><td><strong>单词边界</strong></td></tr></tbody></table><p>实例1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;\d&#x2F;; &#x2F;&#x2F;新建一个正则对象</span><br><span class="line"> var str &#x3D; &#39;1&#39;;</span><br><span class="line">console.log(reg.test(str)); &#x2F;&#x2F;true  str中含有数字</span><br><span class="line">&#x2F;&#x2F;test()是正则对象中的一个方法，它会判断str是否满足正则表达式，返回boolean</span><br></pre></td></tr></table></figure><h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><p>限定之前表达式出现的次数</p><table><thead><tr><th>*****</th><th><strong>重复0次或多次</strong></th></tr></thead><tbody><tr><td><strong>+</strong></td><td><strong>重复1次或多次</strong></td></tr><tr><td><strong>？</strong></td><td><strong>重复0次或1次</strong></td></tr><tr><td><strong>{n}</strong></td><td><strong>重复n次 (连续)</strong></td></tr><tr><td><strong>{n,}</strong></td><td><strong>重复至少n次 (连续)</strong></td></tr><tr><td><strong>{n,m}</strong></td><td><strong>重复n到m次 (连续)</strong></td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;\d*&#x2F;;</span><br><span class="line">console.log(reg.test(&#39;w&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;12&#39;));&#x2F;&#x2F;true</span><br><span class="line">var reg &#x3D; &#x2F;\d+&#x2F;;</span><br><span class="line">console.log(reg.test(&#39;w&#39;));&#x2F;&#x2F;false</span><br><span class="line">console.log(reg.test(&#39;12&#39;));&#x2F;&#x2F;true</span><br><span class="line">var reg &#x3D; &#x2F;\d?&#x2F;;</span><br><span class="line">console.log(reg.test(&#39;w&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;12&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;w12&#39;));&#x2F;&#x2F;true</span><br><span class="line">&#x2F;&#x2F;这里12出现了两次，不满足“重复0次或1次”的条件为什么显示为true呢？</span><br><span class="line">&#x2F;&#x2F;当执行test()时，只要字符串中有部分满足条件则返回true）</span><br><span class="line">&#x2F;&#x2F;解决办法var reg &#x3D; &#x2F;^\d?$&#x2F;;  加上开始结束符（后面会介绍）</span><br><span class="line">var reg &#x3D; &#x2F;\d&#123;2&#125;&#x2F;;&#x2F;&#x2F;&#123;n&#125;</span><br><span class="line">console.log(reg.test(&#39;2&#39;));&#x2F;&#x2F;false</span><br><span class="line">console.log(reg.test(&#39;23&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;2w3&#39;));&#x2F;&#x2F;false  不连续时匹配失败</span><br><span class="line">console.log(reg.test(&#39;234&#39;));&#x2F;&#x2F;true  (理应为false)原因同上</span><br><span class="line">console.log(reg.test(&#39;ab234&#39;));&#x2F;&#x2F;true  (理应为false)原因同上  解决办法同上</span><br><span class="line">var reg &#x3D; &#x2F;\d&#123;2,&#125;&#x2F;;&#x2F;&#x2F;&#123;n,&#125;  &#x2F;&#x2F;同样存在以上问题</span><br><span class="line">var reg &#x3D; &#x2F;\d&#123;2,6&#125;&#x2F;;&#x2F;&#x2F;&#123;n,m&#125;  &#x2F;&#x2F;同样存在以上问题</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="范围符"><a href="#范围符" class="headerlink" title="范围符[ ]"></a>范围符[ ]</h2><p>1、[a-z]、[A-Z]、[0-9],也可以综合写成[a-zA-Z0-9]；当然这范围是自己定义的，比如[a-b]，范围是a到b。</p><p>2、[\u4e00-\u9fa5] 匹配汉字的范围 其中\u4e00，\u9fa5是中日韩汉字Unicode表中对应的编码 4e00对应“一” 9fa5对应“龥”</p><p><a href="http://www.chi2ko.com/tool/CJK.htm">中日韩汉字Unicode表</a></p><p>3、[ab5&amp;@],仅匹配 a 或 b 或 5 或 &amp; 或 @</p><p>4、**[^ab5&amp;@]** 匹配除 a 或 b 或 5 或 &amp; 或 @之外的内容 （注意此处^是在[ ]内的，<strong>区别于开始符^</strong>,两者所处位置不同）</p><p>5、3 | a 匹配3或者a字符</p><h2 id="开始结束符号"><a href="#开始结束符号" class="headerlink" title="开始结束符号"></a>开始结束符号</h2><table><thead><tr><th><strong>^</strong></th><th><strong>开始符（强制规定匹配开始的地方）</strong></th></tr></thead><tbody><tr><td><strong>$</strong></td><td><strong>结束符（强制规定匹配结束的地方）</strong></td></tr></tbody></table><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">^\d 字符串要以数字开始，数字只能出现一次</span><br><span class="line">\d$  字符串要以数字结束，数字只能出现一次</span><br><span class="line">^\d$  字符串要以数字开始和结束，数字只能出现一次</span><br><span class="line">\d+$  字符串要以数字开始，以数字结束，数字只能出现一次</span><br><span class="line">^\d?$  字符串要以数字开头和结束，数字出现0次或1次</span><br></pre></td></tr></table></figure><p>我们来解释 <strong>var reg = /\d?/;</strong> 例子中出现的问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;\d?&#x2F;;</span><br><span class="line">console.log(reg.test(&#39;w&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;12&#39;));&#x2F;&#x2F;开始检测，当检测到 1 时，因为满足了数字出现0次，匹配成功，返回true，此时结束位置在1和2之间</span><br><span class="line">&#x2F;&#x2F;加入开始结束符</span><br><span class="line">var reg &#x3D; &#x2F;^\d?$&#x2F;;</span><br><span class="line">console.log(reg.test(&#39;w&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;12&#39;));&#x2F;&#x2F;当加入开始结束字符后，开始匹配位置强制从1开始 2结束</span><br><span class="line">&#x2F;&#x2F;则12是由两个数字的  不符合“重复0次或1次”的条件，则为false</span><br></pre></td></tr></table></figure><p>我们来解释 <strong>var reg = /\d{2}/;</strong> 例子中出现的问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;\d&#123;2&#125;&#x2F;;&#x2F;&#x2F;&#123;n&#125;</span><br><span class="line">console.log(reg.test(&#39;2&#39;));&#x2F;&#x2F;false</span><br><span class="line">console.log(reg.test(&#39;23&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;234&#39;));&#x2F;&#x2F;true  开始字符为2  结束字符为3</span><br><span class="line">console.log(reg.test(&#39;ww234&#39;));&#x2F;&#x2F;true 开始字符为2  结束字符为3</span><br><span class="line">var reg &#x3D; &#x2F;^\d&#123;2&#125;$&#x2F;;&#x2F;&#x2F;&#123;n&#125;</span><br><span class="line">console.log(reg.test(&#39;2&#39;));&#x2F;&#x2F;false</span><br><span class="line">console.log(reg.test(&#39;23&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;234&#39;));&#x2F;&#x2F;false  开始字符为2  结束字符为4</span><br><span class="line">console.log(reg.test(&#39;ab234&#39;));&#x2F;&#x2F;false 开始字符为a  结束字符为4</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="正则对象的创建方式"><a href="#正则对象的创建方式" class="headerlink" title="正则对象的创建方式"></a>正则对象的创建方式</h2><h3 id="1、new-RegExp"><a href="#1、new-RegExp" class="headerlink" title="1、new RegExp()"></a>1、new RegExp()</h3><p>RegExp(reg,msg) 参数一：正则表达式</p><p>参数二：附加条件（如：i 忽略大小写，g 全局匹配）</p><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var reg &#x3D; new RegExp(&#39;\\w+&#39;,&#39;ig&#39;);  &#x2F;&#x2F;注意，此处第一个\是转义字符，因为参数一不能直接传入正则表达式</span><br><span class="line">var reg &#x3D; new RegExp(&#39;[a-z]&#39;,&#39;ig&#39;);</span><br><span class="line">var str &#x3D; &quot;AaaC2_&quot;;</span><br><span class="line">console.log(reg.test(str));&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><h3 id="2、简写"><a href="#2、简写" class="headerlink" title="2、简写"></a>2、简写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;[a-z]&#x2F;ig;</span><br><span class="line">var str &#x3D; &quot;AaaC2_&quot;;</span><br><span class="line">console.log(reg.test(str));&#x2F;&#x2F;true</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="正则对象的方法"><a href="#正则对象的方法" class="headerlink" title="正则对象的方法"></a>正则对象的方法</h2><p>RegExp.test(‘字符串’); 判断字符串知否满足正则表达式 返回布尔值</p><p>RegExp.exec(‘字符串’); 判断字符串知否满足正则表达式 将找到的内容以数组的形式返回</p><p>1、不使用 “<code>g</code>“ 标志时,每次都返回第一个找的内容 而不继续向后查找</p><p>2、当正则表达式使用 “<code>g</code>“ 标志时，可以多次执行 <code>exec</code> 方法来查找同一个字符串中的成功匹配。当你这样做时，查找将从正则表达式的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex"><code>lastIndex</code></a> 属性指定的位置开始</p><p><strong>lastIndex</strong>:</p><p>只有正则表达式使用了表示全局检索的 “<code>g</code>“ 标志时，该属性才会起作用。此时应用下面的规则：</p><ul><li>如果 <code>lastIndex</code> 大于字符串的长度，则 <code>regexp.test</code> 和 <code>regexp.exec</code> 将会匹配失败，然后 <code>lastIndex</code> 被设置为 0。</li><li>如果 <code>lastIndex</code> 等于字符串的长度，且该正则表达式匹配空字符串，则该正则表达式匹配从 <code>lastIndex</code> 开始的字符串。（then the regular expression matches input starting at <code>lastIndex</code>.）</li><li>如果 <code>lastIndex</code> 等于字符串的长度，且该正则表达式不匹配空字符串 ，则该正则表达式不匹配字符串，<code>lastIndex</code> 被设置为 0.。</li><li>否则，<code>lastIndex</code> 被设置为紧随最近一次成功匹配的下一个位置。</li></ul><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;找出所有三个英文字母组成的  并且以A开头的单词</span><br><span class="line">var str &#x3D; &#39;Asd Asss wes sgetgs x Adv Wdf&#39;;</span><br><span class="line">var reg &#x3D; &#x2F;\bA[A-Za-z]&#123;2&#125;\b&#x2F;g;</span><br><span class="line">console.log(reg.lastIndex);&#x2F;&#x2F;初始值为0</span><br><span class="line">var word &#x3D; reg.exec(str);&#x2F;&#x2F;￥1￥</span><br><span class="line">console.log(reg.lastIndex);&#x2F;&#x2F;3</span><br><span class="line">while(word)&#123;</span><br><span class="line">    console.log(word);</span><br><span class="line">    word &#x3D; reg.exec(str);&#x2F;&#x2F;￥2￥</span><br><span class="line">    console.log(reg.lastIndex);</span><br><span class="line">&#125;</span><br><span class="line">onsole.log(word);&#x2F;&#x2F;null</span><br><span class="line">console.log(reg.lastIndex);&#x2F;&#x2F;0</span><br></pre></td></tr></table></figure><p>该函数运行的实质：exec每一次执行都有开始位置，而这个开始位置是由RegExp对象的lastIndex属性值所决定的；</p><p>以下为该段代码的执行顺序与解析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1、reg.lastIndex 的初始值为0</span><br><span class="line">2、执行￥1￥处的exec时，当前的lastIndex数值为0，则exec从字符串的0位置（即A字符）开始。执行结束，将**所找的字符串**（Asd）以数组的形式返回给word，并修改reg.lastIndex的值为&quot; **所找到的字符串最后一个的位置的下一个位置** &quot;（也就是d下标加一，为3），</span><br><span class="line">3、执行while循环，word此时为[Asd]数组，while语句判断成功</span><br><span class="line">4、执行￥2￥处的exec，此时reg.lastIndex为3，则从字符串中下标为3的字符开始执行，找到 &quot;Adv&quot;,  v的下标为24，则reg.lastIndex的值被设置为25，word此时为[Adv]数组</span><br><span class="line">5、判断while 成功</span><br><span class="line">6、执行￥2￥处的exec，此时reg.lastIndex为25，则从字符串中下标为25的字符开始执行，未找到满足条件的内容，则返回null给word，并将reg.lastIndex设为0；</span><br><span class="line">7、判断while,此时word为null，判断失败，则跳出循环</span><br><span class="line">8、程序结束</span><br></pre></td></tr></table></figure><h2 id="懒惰模式与贪婪模式"><a href="#懒惰模式与贪婪模式" class="headerlink" title="懒惰模式与贪婪模式"></a>懒惰模式与贪婪模式</h2><p>懒惰模式：在满足条件的前提下，尽可能<strong>少</strong>的匹配字符</p><p>贪婪模式：在满足条件的前提下，尽可能<strong>多</strong>的匹配字符</p><p>正则表达式的量词有：* + ？ {}</p><p>量词默认是贪婪模式，当在量词之后加上?时，将贪婪模式转换为懒惰模式。</p><h2 id="分组提取"><a href="#分组提取" class="headerlink" title="分组提取"></a>分组提取</h2><p>正则中（）表示分组</p><p>若存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((((a))((b)))(c))</span><br></pre></td></tr></table></figure><p>则第一组；(((a))((b)))(c)</p><p>第二组：((a))</p><p>第三组：(a)</p><p>第四组：(b)</p><p>第五组：(c)</p><p>找法：从左往右找左括号(</p><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;((\d+)(\w+))&#x2F;;</span><br><span class="line">var str &#x3D; &quot;123abc_c&quot;</span><br><span class="line">if(reg.test(str))&#123;</span><br><span class="line">    &#x2F;&#x2F;$后的数字 类似数组的下标</span><br><span class="line">    console.log(RegExp.$1);&#x2F;&#x2F;获得第一组(\d+)(\w+)的内容  则是123abc_c</span><br><span class="line">    console.log(RegExp.$2);&#x2F;&#x2F;获得第二组(\d+)的内容  则是123</span><br><span class="line">    console.log(RegExp.$3);&#x2F;&#x2F;获得第二组(\w+)的内容  则是abc_c</span><br><span class="line">&#125;</span><br><span class="line">字符串</span><br></pre></td></tr></table></figure><h2 id="字符串中正则的使用"><a href="#字符串中正则的使用" class="headerlink" title="字符串中正则的使用"></a>字符串中正则的使用</h2><p>方法：</p><table><thead><tr><th><strong>String.match(正则对象)</strong></th><th><strong>返回符合正则条件的集合</strong></th></tr></thead><tbody><tr><td><strong>String.replace(正则对象,”替换的字符串”)</strong></td><td><strong>替换字符串，若要全局替换，正则对象要加g</strong></td></tr><tr><td><strong>String.search(正则对象)</strong></td><td><strong>查找字符串，返回查找内容的第一次出现的位置</strong></td></tr><tr><td><strong>String.split(正则对象)</strong></td><td><strong>切割字符串，返回切割后的数组</strong></td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;match</span><br><span class="line">var str&#x3D;&quot;abc123ee23f90&quot;;</span><br><span class="line">&#x2F;&#x2F;将字符串中所有出现的每一个数字提取出来</span><br><span class="line">var arr &#x3D;  str.match(&#x2F;\d&#x2F;g);</span><br><span class="line">console.log(arr);</span><br><span class="line">&#x2F;&#x2F;将字符串中所有出现的连续的数字提取出来</span><br><span class="line">var arr &#x3D;  str.match(&#x2F;\d+&#x2F;g);</span><br><span class="line">console.log(arr);</span><br><span class="line">&#x2F;&#x2F;replace</span><br><span class="line">&#x2F;&#x2F;替换所有 - +</span><br><span class="line">var str &#x3D; &quot;a-b-+b-c&quot;;</span><br><span class="line">console.log(str.replace(&#x2F;-|\+&#x2F;g,&quot;*&quot;));&#x2F;&#x2F;结果a*b**b*c</span><br><span class="line">&#x2F;&#x2F;若不加g  则结果为a*b-+b-c</span><br><span class="line">&#x2F;&#x2F;search</span><br><span class="line">&#x2F;&#x2F;忽略大小写  找到第一个b的下标</span><br><span class="line">var str &#x3D; &quot;a-b-b-c&quot;;</span><br><span class="line">console.log(str.search(&#x2F;B&#x2F;i));&#x2F;&#x2F;结果2</span><br><span class="line">&#x2F;&#x2F;split</span><br><span class="line">var str&#x3D;&quot;a|b|c|&quot;;</span><br><span class="line">console.log(str.split(&#x2F;\|&#x2F;));&#x2F;&#x2F;结果  &quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h1&gt;&lt;p&gt;正则就是对字符串进行查找、匹配、替换等操作的一串“规则字符串”&lt;/p&gt;
&lt;p&gt;使用方法：在一对斜杠之间添加正则表达式</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>工具函数</title>
    <link href="http://example.com/2021/03/11/%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2021/03/11/%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0/</id>
    <published>2021-03-11T14:10:18.000Z</published>
    <updated>2021-03-11T14:13:38.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、数组去重"><a href="#1、数组去重" class="headerlink" title="1、数组去重"></a>1、数组去重</h2><p>原理：利用Js中对象的属性名不可重复的特点对数组进行去重操作</p><p>若有数组:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr &#x3D; [&#39;a&#39;,&#39;v&#39;,&#39;a&#39;,&#39;b&#39;,&#39;e&#39;,&#39;b&#39;,&#39;w&#39;,&#39;x&#39;]</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var object &#x3D; &#123;&#125;;</span><br><span class="line">    for(var key in arr)</span><br><span class="line">        if(!object[arr[key]])</span><br><span class="line">            object[arr[key]] &#x3D; 1;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Object</span><br><span class="line">    a: 1</span><br><span class="line">    b: 1</span><br><span class="line">    e: 1</span><br><span class="line">    v: 1</span><br><span class="line">    w: 1</span><br><span class="line">    x: 1</span><br></pre></td></tr></table></figure><p>此时object对象中的属性名便是去重后的结果。</p><h2 id="2、在字符串中找到所有的字符-o，并返回其下标"><a href="#2、在字符串中找到所有的字符-o，并返回其下标" class="headerlink" title="2、在字符串中找到所有的字符 o，并返回其下标"></a>2、在字符串中找到所有的字符 o，并返回其下标</h2><p>若有字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var s &#x3D; &#39;oresdfrgosdfsdo&#39;</span><br><span class="line"> &lt;script&gt;  </span><br><span class="line">    var index &#x3D; -1;</span><br><span class="line">    while(true)&#123;</span><br><span class="line">        index &#x3D; s.indexOf(&quot;o&quot;,index+1)</span><br><span class="line">        if(index &#x3D;&#x3D; -1)</span><br><span class="line">            break;</span><br><span class="line">            console.log(index);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">8</span><br><span class="line">14</span><br></pre></td></tr></table></figure><h2 id="3、返回给定参数的数据类型"><a href="#3、返回给定参数的数据类型" class="headerlink" title="3、返回给定参数的数据类型"></a>3、返回给定参数的数据类型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">*    getType</span><br><span class="line">*    @description 返回给定参数的数据类型</span><br><span class="line">*    @param &#123;Any&#125; 需要做类型检测的参数</span><br><span class="line">*    @return &#123;String&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line">function getType(args)&#123;</span><br><span class="line">    if (typeof arg &#x3D;&#x3D;&#x3D; &#39;number&#39; &amp;&amp; isNaN(arg)) return &#39;NaN&#39;;</span><br><span class="line">    let reg &#x3D; &#x2F;\s(\w&#123;1,&#125;)\]$&#x2F;g;</span><br><span class="line">    let str &#x3D; Object.prototype.toString.call(args);</span><br><span class="line">    let type &#x3D; reg.exec(str)[1];</span><br><span class="line">    return type</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; 1;</span><br><span class="line">var b &#x3D; false;</span><br><span class="line">var c &#x3D; &#39;ss&#39;;</span><br><span class="line">var d;</span><br><span class="line">var e &#x3D; null;</span><br><span class="line">var f &#x3D; NaN;</span><br><span class="line">var g &#x3D; &#123;&#125;;</span><br><span class="line">var h &#x3D; () &#x3D;&gt; &#123;&#125;</span><br><span class="line">var i &#x3D; [];</span><br><span class="line">console.log(checkType(a));</span><br><span class="line">console.log(checkType(b));</span><br><span class="line">console.log(checkType(c));</span><br><span class="line">console.log(checkType(d));</span><br><span class="line">console.log(checkType(e));</span><br><span class="line">console.log(checkType(f));</span><br><span class="line">console.log(checkType(g));</span><br><span class="line">console.log(checkType(h));</span><br><span class="line">console.log(checkType(i));</span><br></pre></td></tr></table></figure><h2 id="4、什么时候-val-1-amp-amp-val-2-amp-amp-val-3-为-true？"><a href="#4、什么时候-val-1-amp-amp-val-2-amp-amp-val-3-为-true？" class="headerlink" title="4、什么时候 val === 1 &amp;&amp; val === 2 &amp;&amp; val === 3 为 true？"></a>4、什么时候 val === 1 &amp;&amp; val === 2 &amp;&amp; val === 3 为 true？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var i&#x3D; 0;</span><br><span class="line">Object.defineProperty(window,&#39;val&#39;,&#123;</span><br><span class="line">    get:function()&#123;</span><br><span class="line">        return ++i;</span><br><span class="line">    &#125;,</span><br><span class="line">    set:function()&#123;</span><br><span class="line">        console.log(&#39;set&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(val &#x3D;&#x3D;&#x3D; 1 &amp;&amp; val &#x3D;&#x3D;&#x3D; 2 &amp;&amp; val &#x3D;&#x3D;&#x3D; 3);</span><br></pre></td></tr></table></figure><h2 id="5、计算一段文本的宽度"><a href="#5、计算一段文本的宽度" class="headerlink" title="5、计算一段文本的宽度"></a>5、计算一段文本的宽度</h2><p><strong>React</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @name: text-width ;</span><br><span class="line"> * @author: admin ;</span><br><span class="line"> * @description: 获取字符串宽度 ;</span><br><span class="line"> * *&#x2F;</span><br><span class="line">import memoize from &#39;lodash&#x2F;memoize&#39;;</span><br><span class="line">export default memoize((text, fontSize, options) &#x3D;&gt; &#123;</span><br><span class="line">    const &#123;fontFamily, fontWeight&#125; &#x3D; Object.assign(&#123;fontFamily: &#39;Arial&#39;, fontWeight: &#39;normal&#39;&#125;, options);</span><br><span class="line">    const canvas &#x3D; document.createElement(&#39;canvas&#39;),</span><br><span class="line">          ctx &#x3D; canvas.getContext(&#39;2d&#39;);</span><br><span class="line">    ctx.font &#x3D; &#96;$&#123;fontSize&#125; $&#123;fontFamily&#125; $&#123;fontWeight&#125;&#96;;</span><br><span class="line">    return ctx.measureText(text).width;</span><br><span class="line">&#125;, (text, fontSize, options) &#x3D;&gt; &#123;</span><br><span class="line">    const obj &#x3D; Object.assign(&#123;&#125;, options, &#123;text, fontSize&#125;);</span><br><span class="line">    return Object.keys(obj).map((key) &#x3D;&gt; &#96;$&#123;key&#125;-$&#123;obj[key]&#125;&#96;).join(&#39;,&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、数组去重&quot;&gt;&lt;a href=&quot;#1、数组去重&quot; class=&quot;headerlink&quot; title=&quot;1、数组去重&quot;&gt;&lt;/a&gt;1、数组去重&lt;/h2&gt;&lt;p&gt;原理：利用Js中对象的属性名不可重复的特点对数组进行去重操作&lt;/p&gt;
&lt;p&gt;若有数组:&lt;/p&gt;
&lt;figur</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>计算属性computed</title>
    <link href="http://example.com/2021/03/11/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7computed/"/>
    <id>http://example.com/2021/03/11/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7computed/</id>
    <published>2021-03-11T14:00:19.000Z</published>
    <updated>2021-03-11T14:01:49.385Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><h3 id="什么是计算属性"><a href="#什么是计算属性" class="headerlink" title="什么是计算属性"></a>什么是计算属性</h3><p>我们知道，在模板中可以直接通过插值语法显示一些data中的数据</p><p>但是在某些情况下，我们可能需要对数据进行一些转化后再显示，或者需要将多个数据结合起来进行显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">比如我们有&#96;firstName&#96;和&#96;lastName&#96;两个变量，我们需要显示完整的名称</span><br><span class="line">但是如果多个地方都需要显示完整的名称，我们就需要写多个&#96;&#123;&#123;firstName&#125;&#125;&#96;和&#96;&#123;&#123;lastName&#125;&#125;&#96;</span><br></pre></td></tr></table></figure><p>我们可以将上面的代码换成计算属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我们发现计算属性是写在实例的&#96;computed&#96;选项中的</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName+&#x27;  &#x27;+lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">`#app`</span>,</span></span><br><span class="line">            data: &#123; </span><br><span class="line"><span class="javascript">                firstName: <span class="string">&#x27;Lebron&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                lastName:<span class="string">&#x27;James&#x27;</span> </span></span><br><span class="line">            &#125;,</span><br><span class="line">            computed:&#123;</span><br><span class="line"><span class="javascript">                <span class="comment">/* 计算属性，一般不用动词 */</span></span></span><br><span class="line"><span class="javascript">                fullName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27;  &#x27;</span> + <span class="built_in">this</span>.lastName</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                getFullName ()&#123;</span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27;  &#x27;</span> + <span class="built_in">this</span>.lastName</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>计算属性不要加小括号()</p><h3 id="计算属性的复杂操作"><a href="#计算属性的复杂操作" class="headerlink" title="计算属性的复杂操作"></a>计算属性的复杂操作</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>总价格:&#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">`#app`</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                books: [</span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">id</span>: <span class="number">110</span>, <span class="attr">name</span>: <span class="string">&#x27;Unix编程艺术&#x27;</span>, <span class="attr">price</span>: <span class="number">119</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">id</span>: <span class="number">111</span>, <span class="attr">name</span>: <span class="string">&#x27;代码大全&#x27;</span>, <span class="attr">price</span>: <span class="number">105</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">id</span>: <span class="number">112</span>, <span class="attr">name</span>: <span class="string">&#x27;深入理解计算机原理&#x27;</span>, <span class="attr">price</span>: <span class="number">98</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">id</span>: <span class="number">113</span>, <span class="attr">name</span>: <span class="string">&#x27;现代操作系统&#x27;</span>, <span class="attr">price</span>: <span class="number">87</span> &#125;,</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            computed: &#123;</span><br><span class="line"><span class="javascript">                totalPrice: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> result  =<span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.books.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                        result += <span class="built_in">this</span>.books[i].price</span></span><br><span class="line">                    &#125;</span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> result</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="计算属性的setter和getter"><a href="#计算属性的setter和getter" class="headerlink" title="计算属性的setter和getter"></a>计算属性的<code>setter</code>和<code>getter</code></h3><p>我们之前在计算属性的基础操作中使用了一个方法<code>fullName</code>,如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fullName:function()&#123;</span><br><span class="line">                    return this.firstName + &#39;  &#39; + this.lastName</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><p>其实是这样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">                fullName:&#123;</span><br><span class="line">                    set:function()&#123;</span><br><span class="line"></span><br><span class="line">                    &#125;,</span><br><span class="line">                    get:function()&#123;</span><br><span class="line">                        return this.firstName + &#39;  &#39; + this.lastName</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>其中<code>set</code>属性是不需要实现的，我们不希望计算属性有<code>set</code>属性，其实计算属性是个只读属性，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">                fullName:&#123;</span><br><span class="line">                    get:function()&#123;</span><br><span class="line">                        return this.firstName + &#39;  &#39; + this.lastName</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>我们方便使用就使用第一种方式</p><p><strong>计算属性的方法，即使调用多次，计算属性也只是调用了一次，内部是有缓存的</strong>，如果方法的返回结果不变，就不会重复调用多次，直接调用缓存。</p><p><strong>使用<code>methods</code>的时候，调用几次，函数就会调用几次</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计算属性&quot;&gt;&lt;a href=&quot;#计算属性&quot; class=&quot;headerlink&quot; title=&quot;计算属性&quot;&gt;&lt;/a&gt;计算属性&lt;/h1&gt;&lt;h3 id=&quot;什么是计算属性&quot;&gt;&lt;a href=&quot;#什么是计算属性&quot; class=&quot;headerlink&quot; title=&quot;什么是</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>react hook实现redux的功能</title>
    <link href="http://example.com/2021/03/11/react-hook%E5%AE%9E%E7%8E%B0redux%E7%9A%84%E5%8A%9F%E8%83%BD/"/>
    <id>http://example.com/2021/03/11/react-hook%E5%AE%9E%E7%8E%B0redux%E7%9A%84%E5%8A%9F%E8%83%BD/</id>
    <published>2021-03-11T13:56:18.000Z</published>
    <updated>2021-03-11T13:56:47.236Z</updated>
    
    <content type="html"><![CDATA[<h3 id="React-hook-实现-Redux功能"><a href="#React-hook-实现-Redux功能" class="headerlink" title="React hook 实现 Redux功能"></a>React hook 实现 Redux功能</h3><h4 id="1-useContext的使用"><a href="#1-useContext的使用" class="headerlink" title="1. useContext的使用"></a>1. <code>useContext</code>的使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState, useContext, useMemo, createContext &#125; from &#39;react&#39;;</span><br><span class="line"></span><br><span class="line">const CountContext &#x3D; createContext();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;子组件</span><br><span class="line">const Count &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const &#123; count &#125; &#x3D; useContext(CountContext);</span><br><span class="line"></span><br><span class="line">  const counts &#x3D; useMemo(() &#x3D;&gt; &#123;</span><br><span class="line">    console.log(count);</span><br><span class="line">    return count;</span><br><span class="line">  &#125;, [count]);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;React.Fragment&gt;</span><br><span class="line">      &lt;p&gt;&#123;counts&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;React.Fragment&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 子组件</span><br><span class="line">const Num &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const &#123; num &#125; &#x3D; useContext(CountContext);</span><br><span class="line"></span><br><span class="line">  const nums &#x3D; useMemo(() &#x3D;&gt; &#123;</span><br><span class="line">    console.log(num);</span><br><span class="line">    return num;</span><br><span class="line">  &#125;, [num]);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;React.Fragment&gt;</span><br><span class="line">      &lt;p&gt;&#123;nums&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;React.Fragment&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;父组件</span><br><span class="line">const Example1 &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const [count, setCount] &#x3D; useState(0);</span><br><span class="line">  const [num, setNum] &#x3D; useState(1);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;YOU CLICK ME &#123;count&#125; TIMES&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div&gt;YOU CLICK His &#123;num&#125; TIMES&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; &#123; setCount(count + 1) &#125;&#125;&gt;点击按钮+1&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; &#123; setNum(num + 2) &#125;&#125;&gt;点击按钮+2&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;CountContext.Provider value&#x3D;&#123;&#123; count, num &#125;&#125;&gt;</span><br><span class="line">        &lt;Count &#x2F;&gt;</span><br><span class="line">        &lt;Num &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;CountContext.Provider&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Example1;</span><br></pre></td></tr></table></figure><p>通过<code>createContext()</code>创建一个<code>contenxt</code>环境可以想子孙组件传值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const CountContext &#x3D; createContext();</span><br></pre></td></tr></table></figure><p>通过在父组件注册：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;CountContext.Provider value&#x3D;&#123;&#123; count, num &#125;&#125;&gt;</span><br><span class="line">  &lt;Count &#x2F;&gt;</span><br><span class="line">  &lt;Num &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;CountContext.Provider&gt;</span><br></pre></td></tr></table></figure><p>在子组件中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const &#123; num &#125; &#x3D; useContext(CountContext);</span><br><span class="line">...</span><br><span class="line">const &#123; count &#125; &#x3D; useContext(CountContext);</span><br></pre></td></tr></table></figure><p>使用<code>useMemo</code>做性能优化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  const counts &#x3D; useMemo(() &#x3D;&gt; &#123;</span><br><span class="line">    console.log(count);</span><br><span class="line">    return count;</span><br><span class="line">  &#125;, [count]);</span><br><span class="line">&#x2F;&#x2F;count数值没有改变时，缓存值，不渲染</span><br></pre></td></tr></table></figure><h4 id="2-useReducer使用"><a href="#2-useReducer使用" class="headerlink" title="2. useReducer使用"></a>2. <code>useReducer</code>使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useReducer &#125; from &#39;react&#39;;</span><br><span class="line"></span><br><span class="line">const Example2 &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">  const reducer &#x3D; (state, action) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(state, action)</span><br><span class="line">    switch (action) &#123;</span><br><span class="line">      case &#39;add&#39;:</span><br><span class="line">        return state + 1</span><br><span class="line">      case &#39;sub&#39;:</span><br><span class="line">        return state - 1</span><br><span class="line">      default:</span><br><span class="line">        return state</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  const [count, dispatch] &#x3D; useReducer(reducer, 0);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;现在的数量是&#123;count&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; &#123; dispatch(&#39;add&#39;) &#125;&#125;&gt;Add&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; &#123; dispatch(&#39;sub&#39;) &#125;&#125;&gt;Sub&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Example2;</span><br></pre></td></tr></table></figure><p><code>useReducer</code> 接受一个 <code>reducer</code> 函数作为参数，<code>reducer</code> 接受两个参数一个是 <code>state</code> 另一个是 <code>action</code> 。然后返回一个状态<code>count</code>和 <code>dispath</code>，<code>count</code> 是返回状态中的值，而<code>dispatch</code> 是一个可以发布事件来更新 <code>state</code> 的。</p><h4 id="3-Redux的功能的实现"><a href="#3-Redux的功能的实现" class="headerlink" title="3. Redux的功能的实现"></a>3. <code>Redux</code>的功能的实现</h4><blockquote><p>对与<code>Redux</code>的实现，需要使用<code>useContext</code>、<code>useReducer</code>两个钩子函数</p></blockquote><ol><li><p>首先</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import Color from &#39;.&#x2F;component&#x2F;Color&#39;;</span><br><span class="line">import Button from &#39;.&#x2F;component&#x2F;Button&#39;;</span><br><span class="line">import ShowArea from &#39;.&#x2F;component&#x2F;ShowArea&#39;;</span><br><span class="line"></span><br><span class="line">const Example3 &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">  return &lt;Color&gt;</span><br><span class="line">    &lt;Button &#x2F;&gt;</span><br><span class="line">    &lt;ShowArea &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;Color&gt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Example3;</span><br></pre></td></tr></table></figure></li><li><p>然后创建<code>Color</code>组件，其中<code>Color</code>组件充当<code>Provider</code>的作用，向其他<code>子组件</code>传值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useReducer &#125; from &#39;react&#39;;</span><br><span class="line">import &#123; reducer &#125; from &#39;..&#x2F;store&#x2F;reducer&#39;;</span><br><span class="line">import &#123; ColorContext &#125; from &#39;..&#x2F;store&#x2F;index&#39;;</span><br><span class="line"></span><br><span class="line">const Color &#x3D; (props) &#x3D;&gt; &#123;</span><br><span class="line">  const [color, dispatch] &#x3D; useReducer(reducer, &#39;pink&#39;);</span><br><span class="line"></span><br><span class="line">  return &lt;ColorContext.Provider value&#x3D;&#123;&#123; color, dispatch &#125;&#125;&gt;</span><br><span class="line">    &#123;props.children&#125;</span><br><span class="line">  &lt;&#x2F;ColorContext.Provider&gt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Color;</span><br></pre></td></tr></table></figure></li><li><p>同时再创建<code>store</code>文件夹，再<code>store</code>文件夹下面创建<code>index.js</code>、<code>reducer.js</code>、<code>constants.js</code>、<code>actionCreators.js</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;index.js</span><br><span class="line"></span><br><span class="line">import &#123; createContext &#125; from &#39;react&#39;;</span><br><span class="line"></span><br><span class="line">export const ColorContext &#x3D; createContext(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; reducer.js</span><br><span class="line"></span><br><span class="line">import &#123; UPDATE_COLOR &#125; from &#39;.&#x2F;constants&#39;;</span><br><span class="line"></span><br><span class="line">export const reducer &#x3D; (state, action) &#x3D;&gt; &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case UPDATE_COLOR:</span><br><span class="line">      return action.data</span><br><span class="line">    default:</span><br><span class="line">      return state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; contants.js</span><br><span class="line"></span><br><span class="line">export const UPDATE_COLOR &#x3D; &#39;UPDATE_COLOR&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; actionCreators.js</span><br><span class="line"></span><br><span class="line">import &#123; UPDATE_COLOR &#125; from &#39;.&#x2F;constants&#39;;</span><br><span class="line"></span><br><span class="line">export const changeColor &#x3D; (data) &#x3D;&gt; (&#123;</span><br><span class="line">  type: UPDATE_COLOR,</span><br><span class="line">  data</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>创建<code>Button.js</code>提供<code>useReducer</code> 的 <code>dispatch</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useContext &#125; from &#39;react&#39;;</span><br><span class="line">import &#123; ColorContext &#125; from &#39;..&#x2F;store&#x2F;index&#39;;</span><br><span class="line">import &#123; changeColor &#125; from &#39;..&#x2F;store&#x2F;actionCreators&#39;;</span><br><span class="line"></span><br><span class="line">const Button &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const &#123; dispatch &#125; &#x3D; useContext(ColorContext);</span><br><span class="line"></span><br><span class="line">  const handleRed &#x3D; (data) &#x3D;&gt; &#123;</span><br><span class="line">    return dispatch(changeColor(data));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const handleBlue &#x3D; (data) &#x3D;&gt; &#123;</span><br><span class="line">    return dispatch(changeColor(data));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; &#123; handleRed(&#39;red&#39;) &#125;&#125;&gt;红色&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; &#123; handleBlue(&#39;blue&#39;) &#125;&#125;&gt;蓝色&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Button;</span><br></pre></td></tr></table></figure></li><li><p>创建<code>ShowArea.js</code>提供<code>useReducer</code>提供的<code>color</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useContext &#125; from &#39;react&#39;;</span><br><span class="line">import &#123; ColorContext &#125; from &#39;..&#x2F;store&#x2F;index&#39;;</span><br><span class="line"></span><br><span class="line">const ShowArea &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const &#123; color &#125; &#x3D; useContext(ColorContext);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div style&#x3D;&#123;&#123; color: color &#125;&#125;&gt;</span><br><span class="line">      字体颜色是&#123;color&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default ShowArea;</span><br></pre></td></tr></table></figure></li></ol><h5 id="如何就能实现Redux的功能"><a href="#如何就能实现Redux的功能" class="headerlink" title="如何就能实现Redux的功能"></a>如何就能实现<code>Redux</code>的功能</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;React-hook-实现-Redux功能&quot;&gt;&lt;a href=&quot;#React-hook-实现-Redux功能&quot; class=&quot;headerlink&quot; title=&quot;React hook 实现 Redux功能&quot;&gt;&lt;/a&gt;React hook 实现 Redux功能&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ES6——遍历对象属性的几种方式</title>
    <link href="http://example.com/2021/03/11/ES6%E2%80%94%E2%80%94%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2021/03/11/ES6%E2%80%94%E2%80%94%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2021-03-11T13:43:03.000Z</published>
    <updated>2021-03-11T13:50:17.042Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JavaScript遍历对象的几种方式"><a href="#JavaScript遍历对象的几种方式" class="headerlink" title="JavaScript遍历对象的几种方式"></a>JavaScript遍历对象的几种方式</h3><h4 id="1-自身可枚举属性"><a href="#1-自身可枚举属性" class="headerlink" title="1. 自身可枚举属性"></a>1. 自身可枚举属性</h4><blockquote><p><code>Object.keys()</code>方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和<code>for...in</code>循环遍历该对象时返回的顺序一致。如果对象的键-值都不可枚举，那么将返回由键组成的数组。</p></blockquote><p>这是合理的，因为大多数时候只需要关注对象自身的属性。</p><h5 id="来看看一个对象拥有自身和继承属性的例子，Object-keys-只返回自己的属性键"><a href="#来看看一个对象拥有自身和继承属性的例子，Object-keys-只返回自己的属性键" class="headerlink" title="来看看一个对象拥有自身和继承属性的例子，Object.keys()只返回自己的属性键"></a>来看看一个对象拥有自身和继承属性的例子，<code>Object.keys()</code>只返回自己的属性键</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let simpleColors &#x3D; &#123;</span><br><span class="line">   colorA: &#39;white&#39;,</span><br><span class="line">   colorB: &#39;black&#39;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let natureColors &#x3D; &#123;</span><br><span class="line">   colorC: &#39;green&#39;,</span><br><span class="line">   colorD: &#39;yellow&#39;</span><br><span class="line">&#125;;</span><br><span class="line">Object.setPrototypeOf(natureColors, simpleColors);</span><br><span class="line">console.dir(natureColors);&#x2F;&#x2F;simpleColors对象在natureColors原型上</span><br><span class="line">console.log(Object.keys(natureColors)); &#x2F;&#x2F;[&quot;colorC&quot;, &quot;colorD&quot;]</span><br><span class="line">console.log(natureColors[&#39;colorA&#39;]); &#x2F;&#x2F;white</span><br><span class="line">console.log(natureColors[&#39;colorB&#39;]); &#x2F;&#x2F;black</span><br></pre></td></tr></table></figure><p><code>Object.setPrototype()</code>方法设置一个指定的对象的原型到另一个对象或null</p><p><code>Object.keys(natureColors)</code>返回<code>natureColors</code>对象自身可枚举属性键:<code>[&#39;colorC&#39;, &#39;colorD&#39;]</code>。<code>natureColors</code>包含从<code>simpleColors</code>原型对象继承的属性，但是<code>Object.keys()</code>函数会跳过它们。<code>Object.keys()</code>函数会跳过它们。<code>Object.value和Object.entries()</code>也都是返回一个给定对象自身可枚举属性的键值对数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">let simpleColors &#x3D; &#123;</span><br><span class="line">      colorA: &#39;white&#39;,</span><br><span class="line">      colorB: &#39;black&#39;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    let natureColors &#x3D; &#123;</span><br><span class="line">      colorC: &#39;green&#39;,</span><br><span class="line">      colorD: &#39;yellow&#39;</span><br><span class="line">    &#125;;</span><br><span class="line">    Object.setPrototypeOf(natureColors, simpleColors);</span><br><span class="line">    console.log(Object.keys(natureColors)); &#x2F;&#x2F;[&quot;colorC&quot;, &quot;colorD&quot;]</span><br><span class="line">    console.log(Object.values(natureColors)); &#x2F;&#x2F;[&quot;green&quot;, &quot;yellow&quot;]</span><br><span class="line">    console.log(Object.entries(natureColors)); &#x2F;&#x2F;[Array(2), Array(2)]</span><br></pre></td></tr></table></figure><p>现在注意与<code>for...in</code>语句的区别，<code>for...in</code>不仅可以循环枚举自身属性还可以枚举原型链中的属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">let simpleColors &#x3D; &#123;</span><br><span class="line">      colorA: &#39;white&#39;,</span><br><span class="line">      colorB: &#39;black&#39;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    let natureColors &#x3D; &#123;</span><br><span class="line">      colorC: &#39;green&#39;,</span><br><span class="line">      colorD: &#39;yellow&#39;</span><br><span class="line">    &#125;;</span><br><span class="line">    Object.setPrototypeOf(natureColors, simpleColors);</span><br><span class="line"></span><br><span class="line">    let enumerableKeys &#x3D; [];</span><br><span class="line">    for(let key in natureColors) &#123;</span><br><span class="line">      enumerableKeys.push(key);</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(enumerableKeys); &#x2F;&#x2F; [&quot;colorC&quot;, &quot;colorD&quot;, &quot;colorA&quot;, &quot;colorB&quot;]</span><br></pre></td></tr></table></figure><p><code>enumerableKeys</code>数组包含<code>natureColors</code>自身属性键：<code>colorC</code>、<code>colorD</code>。</p><p>另外<code>for...in</code>也遍历了从<code>simpleColors</code>原型对象继承的属性</p><h4 id="2-Object-values-返回属性值"><a href="#2-Object-values-返回属性值" class="headerlink" title="2. Object.values()返回属性值"></a>2. <code>Object.values()</code>返回属性值</h4><blockquote><p><code>Object.values()</code>方法返回一个给定对象自身的所有可枚举属性值的数组，值顺序与使用<code>foe..in</code>循环的循序相同（区别在于<code>for...in</code>循环枚举原型链中的属性）。</p></blockquote><p>使用<code>Object.keys()</code>收集keys，然后通过key去对象取对应的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let meals &#x3D; &#123;</span><br><span class="line">      mealA: &#39;Breakfast&#39;,</span><br><span class="line">      mealB: &#39;Lunch&#39;,</span><br><span class="line">      mealC: &#39;Dinner&#39;</span><br><span class="line">    &#125;;</span><br><span class="line">    for(let key of Object.keys(meals)) &#123;</span><br><span class="line">      let mealName &#x3D; meals[key];</span><br><span class="line">      console.log(mealName);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>meal</code>是一个普通对象。使用<code>Object.keys(meals)</code>和枚举的<code>for...of</code>循环获取对象键值。但是<code>let mealName = meals[key];</code>没有多大的必要，可以进一步优化代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let meals &#x3D; &#123;</span><br><span class="line">      mealA: &#39;Breakfast&#39;,</span><br><span class="line">      mealB: &#39;Lunch&#39;,</span><br><span class="line">      mealC: &#39;Dinner&#39;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    for(let mealName of Object.values(meals)) &#123;</span><br><span class="line">      console.log(mealName);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>因为<code>Object.values(meals)</code>返回数组中的对象属性值，所以可以直接在 <code>for..of</code>中简化。<code>mealName</code>直接在循环中赋值。</p><h4 id="3-Object-entries"><a href="#3-Object-entries" class="headerlink" title="3.Object.entries()"></a>3.<code>Object.entries()</code></h4><blockquote><p><code>Object.entries()</code>方法返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 <code>for...in</code>循环遍历该对象时返回的顺序一致（区别在于 <code>for...in</code>循环也枚举原型链中的属性）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.entries()&#96; 返回键值对数组，如 &#96;[[key1,value1],[key2,value2],...,[keyN,valueN]]</span><br></pre></td></tr></table></figure><h5 id="可能直接使用这些键值对不怎么方便，但可以通过数组解构赋值方式访问键和值就变得非常容易，如下所示："><a href="#可能直接使用这些键值对不怎么方便，但可以通过数组解构赋值方式访问键和值就变得非常容易，如下所示：" class="headerlink" title="可能直接使用这些键值对不怎么方便，但可以通过数组解构赋值方式访问键和值就变得非常容易，如下所示："></a>可能直接使用这些键值对不怎么方便，但可以通过数组解构赋值方式访问键和值就变得非常容易，如下所示：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let meals &#x3D; &#123;</span><br><span class="line">      mealA: &#39;Breakfast&#39;,</span><br><span class="line">      mealB: &#39;Lunch&#39;,</span><br><span class="line">      mealC: &#39;Dinner&#39;</span><br><span class="line">    &#125;;</span><br><span class="line">    for (let [key, value] of Object.entries(meals)) &#123;</span><br><span class="line">      console.log(key + &#39;:&#39; + value);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; &#39;mealA:Breakfast&#39; &#39;mealB:Lunch&#39; &#39;mealC:Dinner&#39;</span><br></pre></td></tr></table></figure><p>如上所示，因为 <code>Object.entries()</code>返回一个与数组解构赋值兼容的集合，因此不需要为赋值或声明添加额外的行</p><h5 id="当普通对象要转换成-Map-时Object-entries-就很有用，因为-Object-entries-返回的格式与-Map构造函数接受的格式完全相同：-key-value-。"><a href="#当普通对象要转换成-Map-时Object-entries-就很有用，因为-Object-entries-返回的格式与-Map构造函数接受的格式完全相同：-key-value-。" class="headerlink" title="当普通对象要转换成 Map 时Object.entries()就很有用，因为 Object.entries()返回的格式与 Map构造函数接受的格式完全相同：(key,value)。"></a>当普通对象要转换成 <code>Map</code> 时<code>Object.entries()</code>就很有用，因为 <code>Object.entries()</code>返回的格式与 <code>Map</code>构造函数接受的格式完全相同：<code>(key,value)</code>。</h5><p>使用常规的 Map构造函数可以将一个二维键值对数组转换成一个 Map对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let greetings &#x3D; &#123;</span><br><span class="line">      morning: &#39;Good morning&#39;,</span><br><span class="line">      midday: &#39;Good day&#39;,</span><br><span class="line">      evening: &#39;Good evening&#39;</span><br><span class="line">    &#125;;</span><br><span class="line">    let greetingsMap &#x3D; new Map(Object.entries(greetings));</span><br><span class="line">    console.log(greetingsMap); &#x2F;&#x2F; &#123;&quot;morning&quot; &#x3D;&gt; &quot;Good morning&quot;, &quot;midday&quot; &#x3D;&gt; &quot;Good day&quot;, &quot;evening&quot; &#x3D;&gt; &quot;Good evening&quot;&#125;</span><br><span class="line">    console.log([...greetingsMap]); &#x2F;&#x2F; &#x3D;&gt; Object.entries(greetings)</span><br><span class="line">    console.log(greetingsMap.get(&#39;morning&#39;)); &#x2F;&#x2F; Good morning</span><br><span class="line">    console.log(greetingsMap.get(&#39;midday&#39;)); &#x2F;&#x2F; Good day</span><br><span class="line">    console.log(greetingsMap.get(&#39;evening&#39;)); &#x2F;&#x2F; Good evening</span><br></pre></td></tr></table></figure><p><code>Map</code> 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值</p><p>有趣的是， Map提供了与 <code>Object.values()</code>和 <code>Object.entries()</code> 等效的方法（只是它们返回<code>Iterators</code>），以便为 <code>Map</code>实例提取属性值或键值对：</p><ul><li><code>Map.prototype.values()</code> 等价于 <code>Object.values()</code></li><li><code>Map.prototype.entries()</code> 等价于 <code>Object.entries()</code></li></ul><p><code>map</code>是普通对象的改进版本，可以获取 <code>map</code> 的大小(对于普通对象，必须手动获取)，并使用任意对象类型作为键(普通对象使用字符串基元类型作为键)。</p><h5 id="让我们看看返回-values（）和-entries（）的-map的方法"><a href="#让我们看看返回-values（）和-entries（）的-map的方法" class="headerlink" title="让我们看看返回 .values（）和 .entries（）的 map的方法:"></a>让我们看看返回 .values（）和 .entries（）的 map的方法:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[...greetingsMap.values()];</span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; [&#39;Good morning&#39;, &#39;Good day&#39;, &#39;Good evening&#39;]</span><br><span class="line">[...greetingsMap.entries()];</span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; [ [&#39;morning&#39;, &#39;Good morning&#39;], [&#39;midday&#39;, &#39;Good day&#39;],</span><br><span class="line">&#x2F;&#x2F;      [&#39;evening&#39;, &#39;Good evening&#39;] ]</span><br></pre></td></tr></table></figure><p>注意： <strong>greetingsMap.values()和 greetingsMap.entries()返回迭代器对象。若要将结果放入数组，扩展运算符 …是必要的</strong></p><h4 id="4-对象属性的顺序"><a href="#4-对象属性的顺序" class="headerlink" title="4. 对象属性的顺序"></a>4. 对象属性的顺序</h4><p><code>JS</code>对象是简单的键值映射，因此，对象中属性的顺序是微不足道的， 在大多数情况下，不应该依赖它。</p><p>在<code>ES5</code>和早期标准中，根本没有指定属性的顺序。</p><p>然而，从<code>ES6</code>开始，属性的顺序是基于一个特殊的规则的，除非特指按照时间排序。通过两个新方法 <code>Object.getOwnPropertyNames</code>和 <code>Reflect.ownKeys</code>来编写示例讲解这一属性排序规则。</p><ol><li>数字：当属性的类型时数字类型时，会按照数字的从大到小的顺序进行排序；</li><li>字符串：当属性的类型是字符串时，会按照时间的先后顺序进行排序；</li><li><code>Symbol</code>：当属性的类型是<code>Symbol</code>时，会按照时间的先后顺序进行排序。</li></ol><p>如果需要有序集合，建议将数据存储到数组或 <code>Set</code>中</p><p><strong>总结</strong></p><p><code>Object.values()</code> 和 <code>Object.entries()</code> 是为<code>JS</code>开发人员提供新的标准化辅助函数的另一个改进步骤。</p><p><code>Object.entries()</code>最适用于数组解构赋值，其方式是将键和值轻松分配给不同的变量。此函数还可以轻松地将纯<code>JS对象</code>属性映射到 Map对象中</p><p>注意：<strong>Object.values()和Object.entries()返回数据的顺序是不确定的，所以不要依赖该方式。</strong></p><h4 id="5-补充"><a href="#5-补充" class="headerlink" title="5. 补充"></a>5. 补充</h4><h5 id="JS对象的可枚举属性和不可枚举属性"><a href="#JS对象的可枚举属性和不可枚举属性" class="headerlink" title="JS对象的可枚举属性和不可枚举属性"></a><code>JS</code>对象的可枚举属性和不可枚举属性</h5><blockquote><p>对象的每一个属性都有一个描述对象，用来描述和控制该属性的行为，用<code>Object.getOwnPropertyDescriptor</code>方法来获取该描述对象（用<code>Object.defineProperty</code>方法来设置）。</p></blockquote><p>描述对象的<code>enumerable</code>属性，称为”可枚举性“，如果该属性为<code>false</code>，就表示某些操作会忽略当前属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let obj &#x3D; &#123; start: &#39;123&#39; &#125;;</span><br><span class="line">    console.log(Object.getOwnPropertyDescriptor(obj, &#39;start&#39;))</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F; 输出内容：</span><br><span class="line">     configurable: true</span><br><span class="line">     enumerable: true</span><br><span class="line">     value: &quot;123&quot;</span><br><span class="line">     writable: true</span><br></pre></td></tr></table></figure><h5 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h5><ol><li><code>configurable</code>：表示能否通过<code>delete</code>删除此属性，能否修改属性的特性，或能否修改把属性修改为访问器属性，如果直接使用字面量定义对象，默认值为true</li><li><code>enumerable</code>: 表示该属性是否可枚举，即是否通过for-in循环或<code>Object.keys()</code>返回属性，如果直接使用字面量定义对象，默认值为true</li><li><code>writable</code>: 能否修改属性的值，如果直接使用字面量定义对象，默认值为true</li><li><code>value</code>: 该属性对应的值，默认为undefined</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let obj &#x3D; &#123;&#125;;</span><br><span class="line">    Object.defineProperties(obj, &#123;</span><br><span class="line">        name: &#123;</span><br><span class="line">            value: &#39;祖宗&#39;,</span><br><span class="line">            enumerable: false,  &#x2F;&#x2F;不可枚举</span><br><span class="line">        &#125;,</span><br><span class="line">        age: &#123;</span><br><span class="line">            value: 88,</span><br><span class="line">            enumerable: true,   &#x2F;&#x2F;可枚举</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    for (let key in obj) &#123;</span><br><span class="line">        console.log(&quot;key:&quot; + key + &#39;,&#39; + &#39;value:&#39; + obj[key]) &#x2F;&#x2F;key: value, value: 88</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="目前-有四个操作会忽略enumerable为false的属性。"><a href="#目前-有四个操作会忽略enumerable为false的属性。" class="headerlink" title="目前,有四个操作会忽略enumerable为false的属性。"></a>目前,有四个操作会忽略<code>enumerable</code>为<code>false</code>的属性。</h5><ol><li><code>for…in循环</code>：只遍历对象自身的和继承的可枚举的属性</li><li><code>Object.keys()</code>：返回对象自身的所有可枚举的属性的键名</li><li><code>JSON.stringify()</code>：只串行化对象自身的可枚举的属性</li><li><code>Object.assign()</code>： 忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;JavaScript遍历对象的几种方式&quot;&gt;&lt;a href=&quot;#JavaScript遍历对象的几种方式&quot; class=&quot;headerlink&quot; title=&quot;JavaScript遍历对象的几种方式&quot;&gt;&lt;/a&gt;JavaScript遍历对象的几种方式&lt;/h3&gt;&lt;h4 i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ES6——class语法糖</title>
    <link href="http://example.com/2021/03/11/ES6%E2%80%94%E2%80%94class%E8%AF%AD%E6%B3%95%E7%B3%96/"/>
    <id>http://example.com/2021/03/11/ES6%E2%80%94%E2%80%94class%E8%AF%AD%E6%B3%95%E7%B3%96/</id>
    <published>2021-03-11T13:39:48.000Z</published>
    <updated>2021-03-11T13:49:01.359Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ES6—class语法糖"><a href="#ES6—class语法糖" class="headerlink" title="ES6—class语法糖"></a>ES6—class语法糖</h3><blockquote><p>首先，ES6 的 <code>class</code> 属于一种“语法糖”，所以只是写法更加优雅，更加像面对对象的编程，其思想和 ES5 是一致的。</p></blockquote><h5 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function Point(x, y) &#123;</span><br><span class="line">  this.x &#x3D; x;</span><br><span class="line">  this.y &#x3D; y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Point.prototype.toString &#x3D; function() &#123;</span><br><span class="line">  return &#96;($&#123;this.x&#125;,$&#123;this.y&#125;)&#96;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">point &#x3D; new Point(4,5);</span><br><span class="line">console.log(point.toString());</span><br></pre></td></tr></table></figure><p>等同于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Point &#123;</span><br><span class="line">  constructor(x, y) &#123;</span><br><span class="line">    this.x &#x3D; x;</span><br><span class="line">    this.y &#x3D; y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    return &#96;($&#123;this.x&#125;,$&#123;this.y&#125;)&#96;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">const point &#x3D; new Point(1,2);</span><br><span class="line">console.log(point.toString());</span><br></pre></td></tr></table></figure><p>其中 <code>constructor</code> 方法是类的构造函数，是一个默认方法，通过 <code>new</code> 命令创建对象实例时，自动调用该方法。一个类必须有 <code>constructor</code> 方法，如果没有显式定义，一个默认的 <code>consructor</code> 方法会被默认添加。所以即使你没有添加构造函数，也是会有一个默认的构造函数的。一般 <code>constructor</code> 方法返回实例对象 <code>this</code> ，但是也可以指定 <code>constructor</code> 方法返回一个全新的对象，让返回的实例对象不是该类的实例。</p><h5 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h5><p><code>super</code>关键字，既可以当做函数使用，也可以当作对象使用。这两种情况下，它的用法完全不用</p><h5 id="1-当作函数使用"><a href="#1-当作函数使用" class="headerlink" title="1. 当作函数使用"></a>1. 当作函数使用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B extends A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * ES6要求，子类的构造函数必须</span><br><span class="line">     * 执行一次super()函数，否则会报错</span><br><span class="line">     *&#x2F;</span><br><span class="line">    super();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：在 <code>constructor</code> 中必须调用 <code>super</code> 方法，因为子类没有自己的 <code>this</code> 对象，而是继承父类的 <code>this</code> 对象，然后对其进行加工,而 <code>super</code> 就代表了父类的构造函数。<code>super</code> 虽然代表了父类 A 的构造函数，但是返回的是子类 B 的实例，即 <code>super</code> 内部的 <code>this</code> 指的是 B，因此 <code>super()</code> 在这里相当于 ```A.prototype.constructor.call(this, props)``。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    console.log(new.target.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B extends A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">new A(); &#x2F;&#x2F; A</span><br><span class="line">new B(); &#x2F;&#x2F; B</span><br></pre></td></tr></table></figure><p>可以看到，在 <code>super()</code> 执行时，它指向的是 子类 B 的构造函数，而不是父类 A 的构造函数。也就是说，<code>super()</code> 内部的 <code>this</code> 指向的是 B。</p><h5 id="2-当作普通对象使用"><a href="#2-当作普通对象使用" class="headerlink" title="2. 当作普通对象使用"></a>2. 当作普通对象使用</h5><p>在普通方法中，指向父类的原型对象；在静态方法中，指向父类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">  c() &#123;</span><br><span class="line">    return 2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B extends A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line">    console.log(super.c()); &#x2F;&#x2F;2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const b &#x3D; new B();</span><br></pre></td></tr></table></figure><p>上面代码中，子类 B 当中的 <code>super.c()</code>，就是将 <code>super</code> 当作一个对象使用。这时，<code>super</code> 在普通方法之中，指向 <code>A.prototype</code>，所以 <code>super.c()</code> 就相当于 <code>A.prototype.c()</code>。</p><p><strong>通过 super 调用父类的方法时，super 会绑定子类的 this。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    this.x &#x3D; 1;</span><br><span class="line">  &#125;</span><br><span class="line">  s() &#123;</span><br><span class="line">    console.log(this.x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B extends A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line">    this.x &#x3D; 2;</span><br><span class="line">  &#125;</span><br><span class="line">  m() &#123;</span><br><span class="line">    super.s();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let b &#x3D; new B();</span><br><span class="line">b.m(); &#x2F;&#x2F; 2</span><br></pre></td></tr></table></figure><p>上面代码中，<code>super.s()</code> 虽然调用的是 <code>A.prototytpe.s()</code>，但是 <code>A.prototytpe.s()</code>会绑定子类 B 的 <code>this</code>，导致输出的是 2，而不是 1。也就是说，实际上执行的是 <code>super.s.call(this)</code>。</p><p><strong>由于绑定子类的 this，所以如果通过 super 对某个属性赋值，这时 super 就是 this，赋值的属性会变成子类实例的属性。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    this.x &#x3D; 1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B extends A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line">    this.x &#x3D; 2;</span><br><span class="line">    super.x &#x3D; 3;</span><br><span class="line">    console.log(super.x); &#x2F;&#x2F; undefined</span><br><span class="line">    console.log(this.x); &#x2F;&#x2F; 3</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let b &#x3D; new B();</span><br></pre></td></tr></table></figure><p>上面代码中，<code>super.x</code> 赋值为 3，这时等同于对 <code>this.x</code> 赋值为 3。而当读取 <code>super.x</code> 的时候，调用的是 <code>A.prototype.x</code>，但并没有 <code>x</code> 方法，所以返回 undefined。</p><p><strong>注意，使用 super 的时候，必须显式指定是作为函数，还是作为对象使用，否则会报错。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;&#125;</span><br><span class="line">class B extends A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line">    console.log(super); &#x2F;&#x2F; 报错</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，<code>console.log(super);</code> 的当中的 <code>super</code>，无法看出是作为函数使用，还是作为对象使用，所以 JavaScript 引擎解析代码的时候就会报错。这是，如果能清晰的表明 <code>super</code> 的数据类型，就不会报错。</p><p><strong>最后，由于对象总是继承其他对象的，所以可以在任意一个对象中，使用 super 关键字</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;ES6—class语法糖&quot;&gt;&lt;a href=&quot;#ES6—class语法糖&quot; class=&quot;headerlink&quot; title=&quot;ES6—class语法糖&quot;&gt;&lt;/a&gt;ES6—class语法糖&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;首先，ES6 的 &lt;code&gt;cl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于input禁用中文输入法的问题</title>
    <link href="http://example.com/2021/03/11/%E5%85%B3%E4%BA%8Einput%E7%A6%81%E7%94%A8%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2021/03/11/%E5%85%B3%E4%BA%8Einput%E7%A6%81%E7%94%A8%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2021-03-11T12:55:08.000Z</published>
    <updated>2021-03-11T13:10:45.889Z</updated>
    
    <content type="html"><![CDATA[<p>完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;input&quot;&gt;</span><br><span class="line">    &lt;!-- &lt;input type&#x3D;&quot;tel&quot;&gt; --&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var input &#x3D; document.getElementById(&#39;input&#39;);</span><br><span class="line">        input.onkeydown &#x3D; function(e)&#123; &#x2F;&#x2F;检测键入的键的ASCLL码值</span><br><span class="line">            var event &#x3D; e || window.event;</span><br><span class="line">            if(event.keyCode !&#x3D; 8 &amp;&amp; (event.keyCode &lt; 48 || event.keyCode &gt; 57))&#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">                return true;   &#x2F;&#x2F;中文输入法的兼容性问题  如何禁用中文输入法</span><br><span class="line">        &#125;</span><br><span class="line">        var cpLock &#x3D; false;&#x2F;&#x2F;默认中文输入法关闭</span><br><span class="line">        &#x2F;&#x2F;中文输入法开始时触发compositionstart事件</span><br><span class="line">        document.addEventListener(&#39;compositionstart&#39;,function(e)&#123;</span><br><span class="line">                cpLock &#x3D; true;</span><br><span class="line">        &#125;);</span><br><span class="line">        &#x2F;&#x2F;中文输入法结束时触发compositionend事件</span><br><span class="line">        document.addEventListener(&#39;compositionend&#39;,function(e)&#123;</span><br><span class="line">                cpLock &#x3D; false;</span><br><span class="line">        &#125;);</span><br><span class="line">        input.oninput &#x3D; function()&#123;</span><br><span class="line">            if(cpLock)&#123;</span><br><span class="line">                &#x2F;&#x2F;将input中的A~Z  a~z都替换成空字符</span><br><span class="line">                this.value &#x3D; this.value.replace(&#x2F;[A-Za-z]&#x2F;g,&quot;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>注意点：1、oninput事件总是后于onkeydown执行</p><p> 2、compositionstart事件，非英文输入法开启时触发；</p><p> 3、compositionend事件，非英文输入法结束时触发；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;完整代码：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;b</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>creat-react-app</title>
    <link href="http://example.com/2021/03/11/creat-react-app/"/>
    <id>http://example.com/2021/03/11/creat-react-app/</id>
    <published>2021-03-11T12:53:35.000Z</published>
    <updated>2021-03-11T12:54:23.557Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、初始化React-App"><a href="#1、初始化React-App" class="headerlink" title="1、初始化React App"></a>1、初始化React App</h1><h2 id="1-1、安装"><a href="#1-1、安装" class="headerlink" title="1.1、安装"></a>1.1、安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 全局安装</span><br><span class="line">npm install -g create-react-app</span><br></pre></td></tr></table></figure><h2 id="1-2、创建一个app项目"><a href="#1-2、创建一个app项目" class="headerlink" title="1.2、创建一个app项目"></a>1.2、创建一个app项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 构建一个my-app的项目</span><br><span class="line">npm init react-app my-app</span><br></pre></td></tr></table></figure><h2 id="1-3、启动编译"><a href="#1-3、启动编译" class="headerlink" title="1.3、启动编译"></a>1.3、启动编译</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><h1 id="2、webpack配置"><a href="#2、webpack配置" class="headerlink" title="2、webpack配置"></a>2、webpack配置</h1><h2 id="2-1、react-app-rewired"><a href="#2-1、react-app-rewired" class="headerlink" title="2.1、react-app-rewired"></a>2.1、react-app-rewired</h2><blockquote><p>使用 react-app-rewired 添加或修改 webpack 的 配置</p></blockquote><h3 id="2-1-1、安装"><a href="#2-1-1、安装" class="headerlink" title="2.1.1、安装"></a>2.1.1、安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i react-app-rewired --save-dev</span><br></pre></td></tr></table></figure><h3 id="2-1-2、修改package-json"><a href="#2-1-2、修改package-json" class="headerlink" title="2.1.2、修改package.json"></a>2.1.2、修改package.json</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;react-app-rewired start&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;react-app-rewired build&quot;,</span><br><span class="line">    &quot;test&quot;: &quot;react-app-rewired test&quot;,</span><br><span class="line">    &quot;eject&quot;: &quot;react-scripts eject&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="2-1-3、新建配置文件"><a href="#2-1-3、新建配置文件" class="headerlink" title="2.1.3、新建配置文件"></a>2.1.3、新建配置文件</h3><blockquote><p>在根目录下新建config-override.js</p></blockquote><h4 id="1-配置路径"><a href="#1-配置路径" class="headerlink" title="(1) 配置路径"></a>(1) 配置路径</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const path &#x3D; require(&#39;path&#39;);</span><br><span class="line">function resolve(dir) &#123;</span><br><span class="line">    return path.join(__dirname, &#39;.&#39;, dir)</span><br><span class="line">&#125;</span><br><span class="line">module.exports &#x3D; function override(config, env) &#123;</span><br><span class="line">    config.resolve.alias &#x3D; &#123;</span><br><span class="line">        &#39;@components&#39;: resolve(&#39;src&#x2F;components&#39;),</span><br><span class="line">        &#39;@pages&#39;: resolve(&#39;src&#x2F;pages&#39;),</span><br><span class="line">        &#39;@util&#39;: resolve(&#39;src&#x2F;util&#39;),</span><br><span class="line">        &#39;@config&#39;: resolve(&#39;config&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">    return config;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-配置-loader"><a href="#2-配置-loader" class="headerlink" title="(2) 配置 loader"></a>(2) 配置 loader</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-2、proxy代理配置"><a href="#2-2、proxy代理配置" class="headerlink" title="2.2、proxy代理配置"></a>2.2、proxy代理配置</h2><h3 id="2-2-1、安装"><a href="#2-2-1、安装" class="headerlink" title="2.2.1、安装"></a>2.2.1、安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm http-proxy-middleware -dev</span><br></pre></td></tr></table></figure><h3 id="2-2-2、-新建配置文件"><a href="#2-2-2、-新建配置文件" class="headerlink" title="2.2.2、 新建配置文件"></a>2.2.2、 新建配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const proxy &#x3D; require(&#39;http-proxy-middleware&#39;);</span><br><span class="line">module.exports &#x3D; function (app) &#123;</span><br><span class="line">    app.use(</span><br><span class="line">        proxy(&#39;&#x2F;api&#39;, &#123;</span><br><span class="line">            target: &#39;http:&#x2F;&#x2F;localhost:4000&#39;,</span><br><span class="line">            changeOrigin: true,</span><br><span class="line">            pathRewrite: &#123;</span><br><span class="line">                &quot;^&#x2F;api&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    );</span><br><span class="line">    app.use(proxy(...));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意：代理路径匹配是懒惰的，当满足正则时则停止匹配。因此，当添加多个代理配置时，要注意代理路径的冲突，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.use(</span><br><span class="line">    proxy(&#39;&#x2F;api&#x2F;&#39;, &#123;</span><br><span class="line">        target: &#39;http:&#x2F;&#x2F;localhost:3000&#39;,</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line">app.use(</span><br><span class="line">    proxy(&#39;&#x2F;api2&#39;,&#123;</span><br><span class="line">        target: &#39;http:&#x2F;&#x2F;localhost:4000&#39;,</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>当请求路径为<code>/api2/audio</code> 时，我们想代理到 4000端口，但 却被3000端口代理了，这是因为<code>/api</code>满足<code>/api2</code>,则我们在配置时应该参照如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.use(</span><br><span class="line">    proxy(&#39;&#x2F;api&#39;, &#123;</span><br><span class="line">        target: &#39;http:&#x2F;&#x2F;localhost:3000&#39;,</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line">app.use(</span><br><span class="line">    proxy(&#39;&#x2F;api2&#x2F;&#39;,&#123;</span><br><span class="line">        target: &#39;http:&#x2F;&#x2F;localhost:4000&#39;,</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、初始化React-App&quot;&gt;&lt;a href=&quot;#1、初始化React-App&quot; class=&quot;headerlink&quot; title=&quot;1、初始化React App&quot;&gt;&lt;/a&gt;1、初始化React App&lt;/h1&gt;&lt;h2 id=&quot;1-1、安装&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Reack Hook</title>
    <link href="http://example.com/2021/03/11/Reack-Hook/"/>
    <id>http://example.com/2021/03/11/Reack-Hook/</id>
    <published>2021-03-11T12:52:06.000Z</published>
    <updated>2021-03-11T12:52:57.827Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reack-Hook"><a href="#Reack-Hook" class="headerlink" title="Reack Hook"></a>Reack Hook</h1><h2 id="Hook简介"><a href="#Hook简介" class="headerlink" title="Hook简介"></a>Hook简介</h2><blockquote><p>React 16.7.0开始推行Hook，到 React 16.8.0 Hook 稳定，Hooks开始被推广使用，它解决了传统使用生命周期而导致的相关代码逻辑分离、不相关代码逻辑混合在一个生命周期中、class中复杂的this指向、class不能被很好的压缩、class可能导致热重载不稳定</p></blockquote><blockquote><p>Hook为开发者提供了可以使用function创建微state，且一个state由一个对应的函数管理，还提供了专门处理副作用、实现redux、性能优化等功能，并且100%向后兼容，个人认为Hook是react未来发展的趋势，但并不意味着摒弃class。</p></blockquote><h2 id="Hook-API"><a href="#Hook-API" class="headerlink" title="Hook API"></a>Hook API</h2><h3 id="1、useState"><a href="#1、useState" class="headerlink" title="1、useState"></a>1、useState</h3><blockquote><p>useState返回一个数组，第一个值为state，第二个值为状态管理函数</p><p>值得注意的是：为了使得状态的操作函数 与其他函数区别开且和其对应的状态联系起来，在命名上有如下约定规则： set + 状态名</p><p>如有状态count，则对应状态管理函数命名为 setCount</p></blockquote><p>函数签名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const [状态名, 状态管理函数] &#x3D; useState(状态初始值);</span><br></pre></td></tr></table></figure><p>使用实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState &#125; from &#39;react&#39;;</span><br><span class="line"></span><br><span class="line">function Example() &#123;</span><br><span class="line">  &#x2F;&#x2F; 解构赋值获取useState返回的值，并给他们取名为count和setCount</span><br><span class="line">  const [count, setCount] &#x3D; useState(0);</span><br><span class="line">    </span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;&#123;count&#125;&lt;&#x2F;p&gt;</span><br><span class="line">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; setCount(count + 1)&#125;&gt;</span><br><span class="line">        Click me</span><br><span class="line">      &lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>状态管理函的实参必须有返回值，且此返回值会赋值给对应状态。</p><p>除上述使用形式外，还可以如下使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setCount(()&#x3D;&gt;&#123;</span><br><span class="line">    return count+1;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>对应使用场景</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 在原有state的基础上改变数据</span><br><span class="line">const [person,setPerson] &#x3D; useState(&#123;</span><br><span class="line">    name: &#39;王老板&#39;,</span><br><span class="line">    age: 18</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setState( state &#x3D;&gt; (&#123;</span><br><span class="line">    ...person,</span><br><span class="line">    age: ++state.age</span><br><span class="line">&#125;) )</span><br></pre></td></tr></table></figure><p><strong>踩坑记录</strong></p><ul><li><code>useState</code>中的数据务必是<code>immutable</code>数据，若两次传入同一对象则不会触发组件更新，如：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState &#125; from &#39;react&#39;</span><br><span class="line">export default props &#x3D;&gt; &#123;</span><br><span class="line">    const [list, setList] &#x3D; useState([1, 5, 3, 9])</span><br><span class="line">    return &lt;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &#123;list.map((item, idx) &#x3D;&gt; &lt;li key&#x3D;&#123;String(idx)&#125;&gt;&#123;item&#125;&lt;&#x2F;li&gt;)&#125;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">        &#123;&#x2F;* sort 不生成副本，直接返回原数组 *&#x2F;&#125;</span><br><span class="line">        &lt;button onClick&#x3D;&#123;()&#x3D;&gt; &#123;setList(list.sort((a, b) &#x3D;&gt; a - b))&#125;&#125;&gt;sort&lt;&#x2F;button&gt;</span><br><span class="line">        &#123;&#x2F;* slice 返回一个新的副本数组 *&#x2F;&#125;</span><br><span class="line">        &lt;button onClick&#x3D;&#123;()&#x3D;&gt; &#123;setList(list.slice().sort((a, b) &#x3D;&gt; a - b))&#125;&#125;&gt;slice&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击sort按钮后并不会出发更新！</p><ul><li><p><code>useState</code>对应的state只要发生改变，无论组件是否使用了<code>state</code>，该组件都会发生更新；</p><p><code>useRef</code>所保存的值，只有在组件中被使用且发生改变时，组件才会更新；</p><p>可以参照两者的区别，根据不同场景来判断使用哪种方式保存数据。</p></li><li><p>useState 是将新值直接覆盖掉旧值，而不是合并</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const [temp,setTemp] &#x3D; useState(&#123;a: 1, b: 2&#125;);</span><br><span class="line">setTemp(&#123;a: 2&#125;); &#x2F;&#x2F; temp &#x3D; &#123;a: 2&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2、useEffect"><a href="#2、useEffect" class="headerlink" title="2、useEffect"></a>2、useEffect</h3><blockquote><p>使用<code>useEffect</code>来处理副作用</p></blockquote><p>函数签名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;1  组件初次渲染后执行一次，依赖项每次改变时执行一次</span><br><span class="line">useEffect(()&#x3D;&gt;&#123;</span><br><span class="line">&#x2F;&#x2F;副作用动作</span><br><span class="line">&#125;,[依赖项])</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2  组件初次渲染后执行一次</span><br><span class="line">useEffect(()&#x3D;&gt;&#123;</span><br><span class="line">&#x2F;&#x2F;副作用动作</span><br><span class="line">&#125;,[])</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;3  组件初次渲染后执行一次，组件每次更新后执行一次</span><br><span class="line">useEffect(()&#x3D;&gt;&#123;</span><br><span class="line">&#x2F;&#x2F;副作用动作</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState, useEffect, useRef &#125; from &#39;react&#39;</span><br><span class="line"></span><br><span class="line">export default function Example() &#123;</span><br><span class="line">    const [count, setCount] &#x3D; useState(0);</span><br><span class="line">    const [val, setVal] &#x3D; useState(0);</span><br><span class="line">    const num &#x3D; useRef(0);</span><br><span class="line">    useEffect(()&#x3D;&gt;&#123;</span><br><span class="line">        console.log(&#39;1&#39;)</span><br><span class="line">    &#125;,[count]);</span><br><span class="line">    </span><br><span class="line">    useEffect(()&#x3D;&gt;&#123;</span><br><span class="line">        console.log(&#39;2&#39;)</span><br><span class="line">    &#125;,[]);</span><br><span class="line">    </span><br><span class="line">    useEffect(()&#x3D;&gt;&#123;</span><br><span class="line">        console.log(&#39;3&#39;)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return &lt;div&gt;</span><br><span class="line">    &lt;button onClick&#x3D;&#123;()&#x3D;&gt;&#123;setCount(count + 1)&#125;&#125;&gt;COUNT&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;button onClick&#x3D;&#123;()&#x3D;&gt;&#123;setVal(val + 1)&#125;&#125;&gt;VAL&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;button onClick&#x3D;&#123;()&#x3D;&gt;&#123;num.current +&#x3D; 1&#125;&#125;&gt;NUM&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;该组件初次渲染后的执行结果</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;点击一次 COUNT按钮 后的执行结果</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;点击一次 VAL按钮 后的执行结果</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;点击一次 NUM按钮 后的执行结果</span><br></pre></td></tr></table></figure><h4 id="（1）处理无需清除的effect"><a href="#（1）处理无需清除的effect" class="headerlink" title="（1）处理无需清除的effect"></a>（1）处理无需清除的effect</h4><blockquote><p>有时候，我们只想<strong>在 React 更新 DOM 之后运行一些额外的代码。</strong>比如发送网络请求，手动变更 DOM，记录日志，这些都是常见的无需清除的操作。因为我们在执行完这些操作之后，就可以忽略他们了。</p></blockquote><p>使用实例</p><p> 需求：监听url的变化来发送网络请求，保存返回结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState, useEffect &#125; from &#39;react&#39;</span><br><span class="line">import ajax from &#39;@utils&#x2F;ajax&#39;</span><br><span class="line">export default function Example(&#123; location &#125;) &#123;</span><br><span class="line">    </span><br><span class="line">    const [data, setData] &#x3D; useState(&#123;&#125;);</span><br><span class="line">    </span><br><span class="line">    useEffect(()&#x3D;&gt;&#123;</span><br><span class="line">        getData();</span><br><span class="line">    &#125;,[location]);</span><br><span class="line">    </span><br><span class="line">    const getData &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">        ajax.post().then(res &#x3D;&gt; &#123;</span><br><span class="line">            setData(res);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    return &lt;div&gt;&#123;data&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当location发生变化时，useEffect中函数就会自动执行</p><h4 id="（2）处理需要清除的effect"><a href="#（2）处理需要清除的effect" class="headerlink" title="（2）处理需要清除的effect"></a>（2）处理需要清除的effect</h4><blockquote><p>之前，我们研究了如何使用不需要清除的副作用，还有一些副作用是需要清除的。例如<strong>订阅外部数据源</strong>。这种情况下，清除工作是非常重要的，可以防止引起内存泄露！</p></blockquote><p>在useEffect中可选的返回一个清除函数，该清除函数会在组件卸载时自动执行，以达到清除effect的目的</p><p>函数签名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;useEffect的第二个参数不影响 ‘清除effect’ 动作</span><br><span class="line">useEffect(()&#x3D;&gt;&#123;</span><br><span class="line">    &#x2F;&#x2F;副作用动作</span><br><span class="line">    return () &#x3D;&gt; &#123;</span><br><span class="line">        &#x2F;&#x2F;清除effect</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">useEffect(() &#x3D;&gt; &#123;</span><br><span class="line">    function handleStatusChange(status) &#123;</span><br><span class="line">        setIsOnline(status.isOnline);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);</span><br><span class="line">    return () &#x3D;&gt; &#123;</span><br><span class="line">        ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>踩坑记录</strong></p><ul><li>在<code>useEffect</code>和<code>useLayoutEffect</code>中使用<code>async</code>和<code>await</code>语法时，要注意分离<code>async</code>默认返回的<code>promise</code>与<code>useEffect</code>和<code>useLayoutEffect</code>的<code>cleanup</code>函数，不要将<code>async</code>的返回函数返给<code>useEffect</code>。使用<code>IIFE</code>解决</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">useEffect(() &#x3D;&gt; &#123;</span><br><span class="line">    (async () &#x3D;&gt; &#123;</span><br><span class="line">        await fetchSomething();</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><h3 id="3、useMemo与useCallback"><a href="#3、useMemo与useCallback" class="headerlink" title="3、useMemo与useCallback"></a>3、useMemo与useCallback</h3><blockquote><ol><li>当组件state被修改时就会触发组件的重新渲染，无论前后state是否一致</li><li>父组件更新，子组件会自动更新</li><li>组件更新时，会卸载所有function，并重新创建function</li></ol></blockquote><p>这就出现了性能问题，当更新前后状态一致时，是无需更新的。</p><p>在之前使用生命周期时，我们通常的解决方案是调用生命周期钩子函数<code>shouldComponentUpdate</code>来判断新老props、states是否发生变化来决定当前组件是否需要更新（原理可参见 React 的 Diff）</p><p>Hooks出现后，我们可以直接使用function的形式来创建组件状态，但function自身并没有<code>shouldComponentUpdate</code>判断前后状态的能力。并且，每当函数组件被调用都会执行内部的所有的逻辑，其性能损耗显而易见。</p><p><strong>useMemo 与 useCallback 的区别与联系</strong></p><p>实际上<code>useCallback</code>是基于<code>useMemo</code>实现的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function useCallback(callback, args) &#123;</span><br><span class="line">return useMemo(() &#x3D;&gt; callback, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>useMemo</code>是返回<code>callback</code>执行后的结果</li><li><code>useCallback</code> 是直接返回被<code>useMemo</code>修饰的<code>callback</code>函数</li></ol><h4 id="（1）useMemo"><a href="#（1）useMemo" class="headerlink" title="（1）useMemo"></a>（1）useMemo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span><br><span class="line">export default function WithoutMemo() &#123;</span><br><span class="line">    const [count, setCount] &#x3D; useState(1);</span><br><span class="line">    const [val, setValue] &#x3D; useState(&#39;&#39;);</span><br><span class="line"> </span><br><span class="line">    function expensive() &#123;</span><br><span class="line">        console.log(&#39;compute&#39;);</span><br><span class="line">        let sum &#x3D; 0;</span><br><span class="line">        for (let i &#x3D; 0; i &lt; count * 100; i++) &#123;</span><br><span class="line">            sum +&#x3D; i;</span><br><span class="line">        &#125;</span><br><span class="line">        return sum;</span><br><span class="line">    &#125;</span><br><span class="line">    return &lt;div&gt;</span><br><span class="line">        &lt;h4&gt;&#123;count&#125;-&#123;val&#125;-&#123;expensive()&#125;&lt;&#x2F;h4&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;button onClick&#x3D;&#123;() &#x3D;&gt; setCount(count + 1)&#125;&gt;+c1&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;input value&#x3D;&#123;val&#125; onChange&#x3D;&#123;event &#x3D;&gt; setValue(event.target.value)&#125;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个组件中含有一个计算量很大的函数<code>expensive</code>，当我们修改 <code>conut</code> <code>val</code>任意一个状态时，<code>expensive</code>都会被触发，尽管<code>val</code>与<code>expensive</code>的计算毫无关系。</p><p>使用<code>useMemo</code>来解决该问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span><br><span class="line">export default function WithoutMemo() &#123;</span><br><span class="line">    const [count, setCount] &#x3D; useState(1);</span><br><span class="line">    const [val, setValue] &#x3D; useState(&#39;&#39;);</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F;使用useMemo</span><br><span class="line">    const expensive &#x3D; useMemo(() &#123;</span><br><span class="line">        console.log(&#39;compute&#39;);</span><br><span class="line">        let sum &#x3D; 0;</span><br><span class="line">        for (let i &#x3D; 0; i &lt; count * 100; i++) &#123;</span><br><span class="line">            sum +&#x3D; i;</span><br><span class="line">        &#125;</span><br><span class="line">        return sum;</span><br><span class="line">    &#125;,[count])</span><br><span class="line">    </span><br><span class="line">    return &lt;div&gt;</span><br><span class="line">        &lt;h4&gt;&#123;count&#125;-&#123;val&#125;-&#123;expensive&#125;&lt;&#x2F;h4&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;button onClick&#x3D;&#123;() &#x3D;&gt; setCount(count + 1)&#125;&gt;+c1&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;input value&#x3D;&#123;val&#125; onChange&#x3D;&#123;event &#x3D;&gt; setValue(event.target.value)&#125;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可知，<code>expensive</code>的计算只与count相关，则可使用<code>useMome</code>添加依赖值<code>count</code></p><p>当且仅当count发生有效改变时才会执行相应函数，并返回缓存值给<code>expensive</code></p><h4 id="（2）useCallback"><a href="#（2）useCallback" class="headerlink" title="（2）useCallback"></a>（2）useCallback</h4><p><code>useCallback</code>的特点、作用和用法与<code>useMemo</code>类似，但是他返回一个缓存的函数。</p><p>除了利用<code>useMemo</code>和<code>useCallback</code>的缓存特性以达到 ”减少某函数不必要的计算“ 外，还可以利用这特性实现 “避免子组件不必要的更新”，这里以<code>useCallback</code>为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState, useCallback, useEffect &#125; from &#39;react&#39;;</span><br><span class="line">function Parent() &#123;</span><br><span class="line">    const [count, setCount] &#x3D; useState(1);</span><br><span class="line">    const [val, setVal] &#x3D; useState(&#39;&#39;);</span><br><span class="line"> </span><br><span class="line">    const callback &#x3D; useCallback(() &#x3D;&gt; &#123;</span><br><span class="line">        return count;</span><br><span class="line">    &#125;, [count]);</span><br><span class="line">    return &lt;div&gt;</span><br><span class="line">        &lt;h4&gt;&#123;count&#125;- &#123;val&#125;&lt;&#x2F;h4&gt;</span><br><span class="line">        &lt;Child callback&#x3D;&#123;callback&#125;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function Child(&#123; callback &#125;) &#123;</span><br><span class="line">    const [count, setCount] &#x3D; useState(() &#x3D;&gt; callback());</span><br><span class="line">    useEffect(() &#x3D;&gt; &#123;</span><br><span class="line">        setCount(callback());</span><br><span class="line">    &#125;, [callback]);</span><br><span class="line">    return &lt;div&gt;</span><br><span class="line">        &#123;count&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子中的Child组件中 是依赖于父组件传递来的callback来创建的函数，一旦父组件中的callback发生改变则Child组件就会发生更新，若父组件中的callback不使用useCallback来封装，则父组件中的任意变量发生改变都会导致callback的变化进而导致子组件不必要的更新。</p><p>此外，所有依赖state或props来创建的函数，需要用到缓存函数的地方都是useCallback的使用场景。</p><p><strong>踩坑记录</strong></p><p>使用<code>lodash</code>中的<code>debounced</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState &#125; from &#39;react&#39;</span><br><span class="line">import &#123; debounce &#125; from &#39;lodash&#39;</span><br><span class="line"></span><br><span class="line">const Example &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    const [value, setValue] &#x3D; useState(&#39;&#39;);</span><br><span class="line"></span><br><span class="line">    const _debounce &#x3D; debounce((value)&#x3D;&gt;&#123;</span><br><span class="line">        console.log(value)</span><br><span class="line">    &#125;,3000);</span><br><span class="line"></span><br><span class="line">    const _onChange &#x3D; (e) &#x3D;&gt; &#123;</span><br><span class="line">        let value &#x3D; e.target.value;</span><br><span class="line">        setValue(value)</span><br><span class="line">        _debounce(value);</span><br><span class="line">    &#125;</span><br><span class="line">    return &lt;div&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; onChange&#x3D;&#123;_onChange&#125; value&#x3D;&#123;value&#125; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Example</span><br></pre></td></tr></table></figure><p>每当<code>onChange</code>被触发一次，都会执行<code>setValue</code>，进而导致刷新组件，使得每次都生成新的<code>debounce</code>，这就失去了函数防抖的效果。而此处的矛盾点就是“函数刷新导致生成了新的<code>debounce</code>”，这里就可以使用<code>useCallback</code>来解决。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState, useCallback &#125; from &#39;react&#39;</span><br><span class="line">import &#123; debounce &#125; from &#39;lodash&#39;</span><br><span class="line"></span><br><span class="line">const Example &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    const [value, setValue] &#x3D; useState(&#39;&#39;);</span><br><span class="line"></span><br><span class="line">    const _debounce &#x3D; useCallback(debounce((value)&#x3D;&gt;&#123;</span><br><span class="line">        console.log(value);</span><br><span class="line">    &#125;,3000),[]);</span><br><span class="line"></span><br><span class="line">    const _onChange &#x3D; (e) &#x3D;&gt; &#123;</span><br><span class="line">        let value &#x3D; e.target.value;</span><br><span class="line">        setValue(value);</span><br><span class="line">        _debounce(value);</span><br><span class="line">    &#125;</span><br><span class="line">    return &lt;div&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; onChange&#x3D;&#123;_onChange&#125; value&#x3D;&#123;value&#125; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Example</span><br></pre></td></tr></table></figure><p>这样每次组件刷新后执行的debounce都是同一个函数，进而使得debounce的防抖效果生效。</p><h3 id="4、useContext与useReducer"><a href="#4、useContext与useReducer" class="headerlink" title="4、useContext与useReducer"></a>4、useContext与useReducer</h3><h4 id="（1）useContext"><a href="#（1）useContext" class="headerlink" title="（1）useContext"></a>（1）useContext</h4><blockquote><p>实现同一子树下所有节点可统一共享子树根节点的数据</p></blockquote><p>函数签名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const value &#x3D; useContext(MyContext);</span><br></pre></td></tr></table></figure><blockquote><p>接收一个 context 对象（<code>React.createContext</code> 的返回值）并返回该 context 的当前值。当前的 context 值由上层组件中距离当前组件最近的 <code>&lt;MyContext.Provider&gt;</code> 的 <code>value</code> prop 决定。</p><p>当组件上层最近的 <code>&lt;MyContext.Provider&gt;</code> 更新时，该 Hook 会触发重渲染，并使用最新传递给 <code>MyContext</code> provider 的 context <code>value</code> 值。</p><p>别忘记 <code>useContext</code> 的参数必须是 <em>context 对象本身</em>：</p><ul><li><strong>正确：</strong> <code>useContext(MyContext)</code></li><li><strong>错误：</strong> <code>useContext(MyContext.Consumer)</code></li><li><strong>错误：</strong> <code>useContext(MyContext.Provider)</code></li></ul><p>调用了 <code>useContext</code> 的组件总会在 context 值变化时重新渲染。</p></blockquote><p>使用实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useContext &#125; from &#39;react&#39;</span><br><span class="line">&#x2F;&#x2F;创建Context对象，并附默认值 &#123;count: 1&#125;</span><br><span class="line">const MyContext &#x3D; React.createContext(&#123; count: 1 &#125;)</span><br><span class="line">const [count, setState] &#x3D; useState(1)</span><br><span class="line"></span><br><span class="line">export default function Example() &#123;</span><br><span class="line"></span><br><span class="line">    const Son &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">        return &lt;div&gt;</span><br><span class="line">            &lt;Grandson&gt;&lt;&#x2F;Grandson&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const Grandson &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">        &#x2F;&#x2F;使用useContext获取Context对象</span><br><span class="line">        const obj &#x3D; useContext(MyContext);</span><br><span class="line">        return &lt;div&gt;</span><br><span class="line">            Grandson---&#123;obj.count&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">    return &lt;MyContext.Provider value&#x3D;&#123;&#123; count: count &#125;&#125;&gt;</span><br><span class="line">        &lt;button onClick&#x3D;&#123;() &#x3D;&gt; &#123; setState(count + 1) &#125;&#125;&gt;ADD&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;Son&gt;&lt;&#x2F;Son&gt;</span><br><span class="line">    &lt;&#x2F;MyContext.Provider&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当点击按钮改变count时，所有消费者组件都会随之发生更新，这也就达到了跨层级组件直接共享数据的目的。</p><h4 id="（2）useReducer"><a href="#（2）useReducer" class="headerlink" title="（2）useReducer"></a>（2）useReducer</h4><p>函数签名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; reducer就是平时redux那种reducer函数</span><br><span class="line">&#x2F;&#x2F; initialState 初始化的state状态</span><br><span class="line">&#x2F;&#x2F; init 一个函数用于惰性计算state初始值</span><br><span class="line">const [state, dispatch] &#x3D; useReducer(reducer, initialArg, init);</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://zh-hans.reactjs.org/docs/hooks-reference.html#usestate"><code>useState</code></a> 的替代方案。它接收一个形如 <code>(state, action) =&gt; newState</code> 的 reducer，并返回当前的 state 以及与其配套的 <code>dispatch</code> 方法。（统一管理数据，并对<code>action</code>加以限制）</p><p>在某些场景下，<code>useReducer</code> 会比 <code>useState</code> 更适用，例如 state 逻辑较复杂且包含多个子值，或者下一个 state 依赖于之前的 state 等。并且，使用 <code>useReducer</code> 还能给那些会触发深更新的组件做性能优化，因为你可以向子组件传递 <code>dispatch</code> 而不是回调函数 。</p></blockquote><p><code>initialArg</code>作为<code>state</code>的初始值，若存在<code>init</code>,则<code>init</code>会将<code>initalArg</code>处理后的值作为<code>state</code>的初始值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reducer&#96;对应于&#96;dispatch&#96;,使用dispatch所传入的实参对应于&#96;reducer&#96;的&#96;action</span><br></pre></td></tr></table></figure><p>使用实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useReducer &#125; from &#39;react&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const initialState &#x3D; 0;</span><br><span class="line"></span><br><span class="line">const init &#x3D; (initialCount) &#x3D;&gt; &#123;</span><br><span class="line">    return &#123; count: initialCount &#125;</span><br><span class="line">&#125;</span><br><span class="line">function reducer(state, action) &#123;</span><br><span class="line">    switch (action.type) &#123;</span><br><span class="line">        case &#39;increment&#39;:</span><br><span class="line">            return &#123; count: state.count + 1 &#125;;</span><br><span class="line">        case &#39;decrement&#39;:</span><br><span class="line">            return &#123; count: state.count - 1 &#125;;</span><br><span class="line">        case &#39;RESET&#39;:</span><br><span class="line">            return init(action.payload)</span><br><span class="line">        default:</span><br><span class="line">            throw new Error();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default props &#x3D;&gt; &#123;</span><br><span class="line">    const [state, dispatch] &#x3D; useReducer(reducer, initialState, init);</span><br><span class="line">    return &lt;div&gt;</span><br><span class="line">        Count: &#123;state.count&#125;</span><br><span class="line">        &lt;br &#x2F;&gt;</span><br><span class="line">        &lt;button onClick&#x3D;&#123;() &#x3D;&gt; dispatch(&#123; type: &#39;decrement&#39; &#125;)&#125;&gt;SUB&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;br &#x2F;&gt;</span><br><span class="line">        &lt;button onClick&#x3D;&#123;() &#x3D;&gt; dispatch(&#123; type: &#39;increment&#39; &#125;)&#125;&gt;ADD&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;br &#x2F;&gt;</span><br><span class="line">        &lt;button onClick&#x3D;&#123;() &#x3D;&gt; dispatch(&#123; type: &#39;RESET&#39;, payload: initialState &#125;)&#125;&gt;RESET&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（3）useContext与useReducer结合使用"><a href="#（3）useContext与useReducer结合使用" class="headerlink" title="（3）useContext与useReducer结合使用"></a>（3）useContext与useReducer结合使用</h4><blockquote><p>结合使用useContext和useReducer以实现共享数据的统一管理和共享数据安全性保证</p></blockquote><p>使用实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useContext, useReducer &#125; from &#39;react&#39;</span><br><span class="line"></span><br><span class="line">export default props &#x3D;&gt; &#123;</span><br><span class="line">    const MyContext &#x3D; React.createContext(&#123; count: 1 &#125;);</span><br><span class="line"></span><br><span class="line">    const init &#x3D; (initalCount) &#x3D;&gt; &#123;</span><br><span class="line">        return &#123; count: initalCount &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function reducer(state, action) &#123;</span><br><span class="line">        switch (action.type) &#123;</span><br><span class="line">            case &#39;increment&#39;:</span><br><span class="line">                return &#123; count: state.count + 1 &#125;;</span><br><span class="line">            case &#39;decrement&#39;:</span><br><span class="line">                return &#123; count: state.count - 1 &#125;;</span><br><span class="line">            case &#39;RESET&#39;:</span><br><span class="line">                return init(action.payload)</span><br><span class="line">            default:</span><br><span class="line">                throw new Error();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const initialCount &#x3D; 0;</span><br><span class="line">    const [state, dispatch] &#x3D; useReducer(reducer, initialCount, init);</span><br><span class="line"></span><br><span class="line">    const Son1 &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">        return &lt;Grandson1&gt;&lt;&#x2F;Grandson1&gt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const Son2 &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">        const obj &#x3D; useContext(MyContext);</span><br><span class="line">        return &lt;div&gt;</span><br><span class="line">            Son2---&#123;obj.count&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const Grandson1 &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">        const obj &#x3D; useContext(MyContext);</span><br><span class="line">        return &lt;div&gt;</span><br><span class="line">            Grandson1---&#123;obj.count&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">    return &lt;MyContext.Provider value&#x3D;&#123;&#123; count: state.count &#125;&#125;&gt;</span><br><span class="line">        &lt;button onClick&#x3D;&#123;() &#x3D;&gt; dispatch(&#123; type: &#39;decrement&#39; &#125;)&#125;&gt;SUB&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;br &#x2F;&gt;</span><br><span class="line">        &lt;button onClick&#x3D;&#123;() &#x3D;&gt; dispatch(&#123; type: &#39;increment&#39; &#125;)&#125;&gt;ADD&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;br &#x2F;&gt;</span><br><span class="line">        &lt;button onClick&#x3D;&#123;() &#x3D;&gt; dispatch(&#123; type: &#39;RESET&#39;, payload: initialCount &#125;)&#125;&gt;RESET&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;Son1&gt;&lt;&#x2F;Son1&gt;</span><br><span class="line">        &lt;Son2&gt;&lt;&#x2F;Son2&gt;</span><br><span class="line">    &lt;&#x2F;MyContext.Provider&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们现在已经完成了useContext与useReducer的配合使用，我们现在将代码抽离出来，使其可以在任何组件中都可以快速调用</p><p>目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-example</span><br><span class="line">-components</span><br><span class="line">-Son</span><br><span class="line">-index.js</span><br><span class="line">-Grandson</span><br><span class="line">-index.js</span><br><span class="line">-store</span><br><span class="line">-index.js</span><br><span class="line">-reducer.js</span><br><span class="line">-index.js</span><br></pre></td></tr></table></figure><p>使用实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; example\store\index.js</span><br><span class="line">import React, &#123; useReducer, useContext &#125; from &#39;react&#39;</span><br><span class="line">import &#123; defaultState, reducer, init &#125; from &#39;.&#x2F;reducer&#39;</span><br><span class="line"></span><br><span class="line">const MyContext &#x3D; React.createContext();</span><br><span class="line"></span><br><span class="line">const Context &#x3D; props &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;将useReducer的返回值 [state,dispatch] 作为参数</span><br><span class="line">    const contextValue &#x3D; useReducer(reducer, defaultState, init);</span><br><span class="line"></span><br><span class="line">    return &lt;MyContext.Provider value&#x3D;&#123;contextValue&#125;&gt;</span><br><span class="line">        &#123;props.children&#125;</span><br><span class="line">    &lt;&#x2F;MyContext.Provider&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const useMyContext &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    return useContext(MyContext)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export &#123;</span><br><span class="line">    Context,</span><br><span class="line">    useMyContext</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; example\store\reducer.js</span><br><span class="line">export const defaultState &#x3D; &#123;</span><br><span class="line">    count: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export const init &#x3D; (initalState) &#x3D;&gt; &#123;</span><br><span class="line">    return &#123; </span><br><span class="line">        ...initalState,</span><br><span class="line">        count: initalState.count </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export const reducer &#x3D; (state, action) &#x3D;&gt; &#123;</span><br><span class="line">    switch (action.type) &#123;</span><br><span class="line">        case &#39;increment&#39;:</span><br><span class="line">            return &#123;</span><br><span class="line">                ...state,</span><br><span class="line">                count: state.count + 1</span><br><span class="line">            &#125;;</span><br><span class="line">        case &#39;decrement&#39;:</span><br><span class="line">            return &#123;</span><br><span class="line">                ...state,</span><br><span class="line">                count: state.count - 1</span><br><span class="line">            &#125;;</span><br><span class="line">        case &#39;RESET&#39;:</span><br><span class="line">            return init(defaultState)</span><br><span class="line">        default:</span><br><span class="line">            throw new Error();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; example\components\Grandson\index.js</span><br><span class="line">import React from &#39;react&#39;</span><br><span class="line">import &#123; useMyContext &#125; from &#39;..&#x2F;..&#x2F;store&#39;</span><br><span class="line">export default props &#x3D;&gt; &#123;</span><br><span class="line">    const [state, dispatch] &#x3D; useMyContext();</span><br><span class="line">    return &lt;div&gt;</span><br><span class="line">        Grandson --- &#123;state.count&#125;</span><br><span class="line">        &lt;button onClick&#x3D;&#123;() &#x3D;&gt; &#123; dispatch(&#123; type: &#39;increment&#39; &#125;) &#125;&#125;&gt;Grandson ADD&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;button onClick&#x3D;&#123;() &#x3D;&gt; &#123; dispatch(&#123; type: &#39;decrement&#39; &#125;) &#125;&#125;&gt;Grandson SUB&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;button onClick&#x3D;&#123;() &#x3D;&gt; &#123; dispatch(&#123; type: &#39;RESET&#39; &#125;) &#125;&#125;&gt;Grandson RESET&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; example\components\Son\index.js</span><br><span class="line">import React from &#39;react&#39;</span><br><span class="line">import Grandson from &#39;..&#x2F;Grandson&#39;</span><br><span class="line"></span><br><span class="line">export default props &#x3D;&gt; &#123;</span><br><span class="line">    return &lt;Grandson&gt;&lt;&#x2F;Grandson&gt;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;example\index.js</span><br><span class="line">import React from &#39;react&#39;</span><br><span class="line">import Son from &#39;.&#x2F;components&#x2F;Son&#39;</span><br><span class="line">import &#123; Context &#125; from &#39;.&#x2F;store&#39;</span><br><span class="line">export default props &#x3D;&gt; &#123;</span><br><span class="line">    return &lt;Context&gt;</span><br><span class="line">        &lt;Son&gt;&lt;&#x2F;Son&gt;</span><br><span class="line">    &lt;&#x2F;Context&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、useRef"><a href="#5、useRef" class="headerlink" title="5、useRef"></a>5、useRef</h3><p>函数签名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const refContainer &#x3D; useRef(initialValue);</span><br></pre></td></tr></table></figure><blockquote><p><code>useRef</code> 返回一个可变的 ref 对象，其 <code>.current</code> 属性被初始化为传入的参数（<code>initialValue</code>）。返回的 ref 对象在组件的整个生命周期内保持不变。</p></blockquote><p>使用实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;</span><br><span class="line"></span><br><span class="line">export default props &#x3D;&gt; &#123;</span><br><span class="line">    const refContainer &#x3D; useRef(null);</span><br><span class="line">    return &lt;div ref&#x3D;&#123;refContainer&#125;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除此之外，我们可以使子组件接受父组件的ref，让父组件有控制组件的能力，这里要借助<code>forwardRef</code></p><p>使用实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; father</span><br><span class="line">import React, &#123; useRef &#125; from &#39;react&#39;</span><br><span class="line">import Son from &#39;.&#x2F;components&#x2F;Son&#39;</span><br><span class="line">export default props &#x3D;&gt; &#123;</span><br><span class="line">    const refContainer &#x3D; useRef(null);</span><br><span class="line">    const changeInput &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">        refContainer.current.value &#x3D; &#39;啊，我被改了！&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return &lt;div &gt;</span><br><span class="line">        &lt;button onClick&#x3D;&#123;changeInput&#125;&gt;changeInput&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;Son ref&#x3D;&#123;refContainer&#125;&gt;&lt;&#x2F;Son&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; Son</span><br><span class="line">import React, &#123; forwardRef &#125; from &#39;react&#39;</span><br><span class="line">const Son &#x3D; (props,ref) &#x3D;&gt; &#123;</span><br><span class="line">    return &lt;div &gt;</span><br><span class="line">    &lt;input ref&#x3D;&#123;ref&#125;&gt;&lt;&#x2F;input&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#125;</span><br><span class="line">export default forwardRef(Son)</span><br></pre></td></tr></table></figure><p><strong>useRef 声明常量以保存可变值</strong></p><blockquote><p>除了使用useRef绑定DOM，它另一个重要作用就是声明一个常量保存可变值，绕开React的Capture Value特性</p><p>保存常量这一功能实际上是基于useMemo实现的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; function useRef (initialValue) &#123;</span><br><span class="line">&gt;    return useMemo (() &#x3D;&gt; (&#123; current : initialValue &#125;), []);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>可见 就是初始化的时候创建一个<code>&#123;current:initialValue&#125;</code>，不依赖任何数据，需要手动赋值修改</p></blockquote><p>使用实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useRef &#125; from &#39;react&#39;</span><br><span class="line">export default props &#x3D;&gt; &#123;</span><br><span class="line">    const count &#x3D; useRef(0);</span><br><span class="line">    const add &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">        count.current +&#x3D; 1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return &lt;div &gt;</span><br><span class="line">        &lt;h1&gt;&#123;count.current&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;button onClick&#x3D;&#123;add&#125;&gt;ADD&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>踩坑记录</strong></p><ul><li>注意与useState的区别与联系</li></ul><h3 id="6、useImperativeHandle"><a href="#6、useImperativeHandle" class="headerlink" title="6、useImperativeHandle"></a>6、useImperativeHandle</h3><blockquote><p><code>useImperativeHandle</code> 可以让你在使用 <code>ref</code> 时自定义暴露给父组件的实例值。在大多数情况下，应当避免使用 ref 这样的命令式代码。<code>useImperativeHandle</code> 应当与 <code>forwardRef</code> 一起使用</p></blockquote><p>使用实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;father</span><br><span class="line">import React, &#123; useRef &#125; from &#39;react&#39;</span><br><span class="line">import Son from &#39;.&#x2F;components&#x2F;Son&#39;</span><br><span class="line">export default props &#x3D;&gt; &#123;</span><br><span class="line">    const refContainer &#x3D; useRef(null);</span><br><span class="line">    const changeInput &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">        refContainer.current.focus()</span><br><span class="line">        &#x2F;&#x2F; console.log(refContainer)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return &lt;div &gt;</span><br><span class="line">        &lt;button onClick&#x3D;&#123;changeInput&#125;&gt;changeInput&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;Son ref&#x3D;&#123;refContainer&#125;&gt;&lt;&#x2F;Son&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; Son</span><br><span class="line">import React, &#123; useRef, forwardRef, useImperativeHandle &#125; from &#39;react&#39;</span><br><span class="line"></span><br><span class="line">function Son(props, ref) &#123;</span><br><span class="line">    &#x2F;&#x2F;新建一个ref  将此ref绑定在本组建内的input上</span><br><span class="line">    const inputRef &#x3D; useRef();</span><br><span class="line">    &#x2F;&#x2F;将 使得本组件input获取焦点的方法赋给父组件传递来的ref上 </span><br><span class="line">    useImperativeHandle(ref, () &#x3D;&gt; (&#123;</span><br><span class="line">        focus: () &#x3D;&gt; &#123;</span><br><span class="line">            inputRef.current.focus();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;));</span><br><span class="line">    return &lt;input ref&#x3D;&#123;inputRef&#125; &#x2F;&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default forwardRef(Son);</span><br></pre></td></tr></table></figure><h3 id="7、useLayoutEffect"><a href="#7、useLayoutEffect" class="headerlink" title="7、useLayoutEffect"></a>7、useLayoutEffect</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useLayoutEffect( () &#x3D;&gt; &#123; &#125;, [ 依赖项 ] );</span><br></pre></td></tr></table></figure><blockquote><p>其函数签名与 <code>useEffect</code> 相同，但它会在所有的 DOM 变更之后同步调用 effect。可以使用它来读取 DOM 布局并同步触发重渲染。在浏览器执行绘制之前，<code>useLayoutEffect</code> 内部的更新计划将被同步刷新。</p><p>尽可能使用标准的 <code>useEffect</code> 以避免阻塞视觉更新。</p></blockquote><h3 id="8、useDebugValue"><a href="#8、useDebugValue" class="headerlink" title="8、useDebugValue"></a>8、useDebugValue</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useDebugValue(value)</span><br></pre></td></tr></table></figure><blockquote><p><code>useDebugValue</code> 可用于在 React 开发者工具中显示自定义 hook 的标签。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; function useFriendStatus(friendID) &#123;</span><br><span class="line">&gt;   const [isOnline, setIsOnline] &#x3D; useState(null);</span><br><span class="line">&gt; </span><br><span class="line">&gt;   &#x2F;&#x2F; ...</span><br><span class="line">&gt; </span><br><span class="line">&gt;   &#x2F;&#x2F; 在开发者工具中的这个 Hook 旁边显示标签</span><br><span class="line">&gt;   &#x2F;&#x2F; e.g. &quot;FriendStatus: Online&quot;</span><br><span class="line">&gt;   useDebugValue(isOnline ? &#39;Online&#39; : &#39;Offline&#39;);</span><br><span class="line">&gt; </span><br><span class="line">&gt;   return isOnline;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="自定义Hook"><a href="#自定义Hook" class="headerlink" title="自定义Hook"></a>自定义Hook</h2><blockquote><p>在自定义函数中封装原有的Hook</p><p>约定该函数的名称为 <code>use</code>开头</p></blockquote><p>官网案例</p><p>由于<code>isOnline</code>的值是监听网络的结果决定的，则只需要暴露<code>state</code>即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState, useEffect &#125; from &#39;react&#39;;</span><br><span class="line"></span><br><span class="line">function useFriendStatus(friendID) &#123;</span><br><span class="line">  const [isOnline, setIsOnline] &#x3D; useState(null);</span><br><span class="line"></span><br><span class="line">  useEffect(() &#x3D;&gt; &#123;</span><br><span class="line">    function handleStatusChange(status) &#123;</span><br><span class="line">      setIsOnline(status.isOnline);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ChatAPI.subscribeToFriendStatus(friendID, handleStatusChange);</span><br><span class="line">    return () &#x3D;&gt; &#123;</span><br><span class="line">      ChatAPI.unsubscribeFromFriendStatus(friendID, handleStatusChange);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  return isOnline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我的案例</p><p>当自定义一个Hook，和普通Hook一样使用时，也可以将state对应的操作函数暴露出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState &#125; from &#39;react&#39;</span><br><span class="line">&#x2F;&#x2F;自定义Hook</span><br><span class="line">export default function useFriendStatus(value) &#123;</span><br><span class="line">    const [isOnline, setIsOnline] &#x3D; useState(value || false);</span><br><span class="line"></span><br><span class="line">    return [isOnline, setIsOnline];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;</span><br><span class="line">import &#123; useFriendStatus &#125; from &#39;.&#x2F;hooks&#39;;</span><br><span class="line">export default props &#x3D;&gt; &#123;</span><br><span class="line">    const [online, setOnline] &#x3D; useFriendStatus(false);</span><br><span class="line"></span><br><span class="line">    return &lt;div&gt;</span><br><span class="line">        &#123;online ? &#39;true&#39; : &#39;false&#39;&#125;</span><br><span class="line">        &lt;button onClick&#x3D;&#123;() &#x3D;&gt; &#123; setOnline(!online) &#125;&#125;&gt;SWITCH&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hook的规则"><a href="#Hook的规则" class="headerlink" title="Hook的规则"></a>Hook的规则</h2><h3 id="1、只在组件顶层中使用Hook"><a href="#1、只在组件顶层中使用Hook" class="headerlink" title="1、只在组件顶层中使用Hook"></a>1、只在组件顶层中使用Hook</h3><blockquote><p><strong>不要在循环，条件或嵌套函数中调用 Hook，</strong> 确保总是在你的 React 函数的最顶层调用他们。遵守这条规则，你就能确保 Hook 在每一次渲染中都按照同样的顺序被调用。这让 React 能够在多次的 <code>useState</code> 和 <code>useEffect</code> 调用之间保持 hook 状态的正确。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState &#125; from &#39;react&#39;</span><br><span class="line"></span><br><span class="line">function Example(props) &#123;</span><br><span class="line">    const [count, setCount] &#x3D; useState(0); &#x2F;&#x2F;Yes</span><br><span class="line">    </span><br><span class="line">    if(props.id)&#123;</span><br><span class="line">        &#x2F;&#x2F; const [count, setCount] &#x3D; useState(0); &#x2F;&#x2F;No</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   const fn &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">        &#x2F;&#x2F; const [count, setCount] &#x3D; useState(0); &#x2F;&#x2F;No</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、只在React-函数中调用Hook"><a href="#2、只在React-函数中调用Hook" class="headerlink" title="2、只在React 函数中调用Hook"></a>2、只在React 函数中调用Hook</h3><blockquote><p><strong>不要在普通的 JavaScript 函数中调用 Hook。</strong>你可以：</p><ul><li>在 React 的函数组件中调用 Hook</li><li>在自定义 Hook 中调用其他 Hook</li></ul><p>遵循此规则，确保组件的状态逻辑在代码中清晰可见。</p></blockquote><h3 id="3、其他"><a href="#3、其他" class="headerlink" title="3、其他"></a>3、其他</h3><ol><li>Hook在函数组件中使用（这里不称为 无状态组件），在class组件中是不起作用的</li><li>所有的Hook都是在DOM更新之后执行的</li></ol><h2 id="经验笔记"><a href="#经验笔记" class="headerlink" title="经验笔记"></a>经验笔记</h2><ol><li><p><strong>useState</strong>将函数入参给useState时，该函数是在DOM渲染前执行的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const [value,setValue] &#x3D; useState(()&#x3D;&gt;&#123;</span><br><span class="line">console.log(&#39;笨鸟先飞&#39;);</span><br><span class="line">return 0</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>useEffect</strong>是在DOM渲染结束后执行的</p></li><li><p><strong>useLayoutEffect</strong>与DOM渲染同步进行，在此函数中获取DOM，会导致偶发性报错</p></li><li><p>组件不要声明在另一个组件内</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 错误</span><br><span class="line">const FatherComponent &#x3D; (props) &#x3D;&gt; &#123;</span><br><span class="line">    const SonComponent &#x3D; () &#x3D;&gt; &#123; return &lt;div&gt;&lt;&#x2F;div&gt;&#125;</span><br><span class="line">    return &lt;div&gt;</span><br><span class="line">        &lt;SonComponent&gt;&lt;&#x2F;SonComponent&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 正确</span><br><span class="line">const SonComponent &#x3D; () &#x3D;&gt; &#123; return &lt;div&gt;&lt;&#x2F;div&gt;&#125;</span><br><span class="line"></span><br><span class="line">const FatherComponent &#x3D; (props) &#x3D;&gt; &#123;</span><br><span class="line">    return &lt;div&gt;</span><br><span class="line">        &lt;SonComponent&gt;&lt;&#x2F;SonComponent&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="参照文章："><a href="#参照文章：" class="headerlink" title="参照文章："></a>参照文章：</h2><ol><li><a href="https://react-1251415695.cos-website.ap-chengdu.myqcloud.com/docs/getting-started.html">React官方文档</a></li><li><a href="https://blog.csdn.net/sinat_17775997/article/details/94453167">useMemo与useCallback使用指南</a></li><li><a href="https://blog.csdn.net/gtLBTNq9mr3/article/details/93984397">useReducerde使用和原理</a></li></ol><p>文章还会继续更新完善</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Reack-Hook&quot;&gt;&lt;a href=&quot;#Reack-Hook&quot; class=&quot;headerlink&quot; title=&quot;Reack Hook&quot;&gt;&lt;/a&gt;Reack Hook&lt;/h1&gt;&lt;h2 id=&quot;Hook简介&quot;&gt;&lt;a href=&quot;#Hook简介&quot; class=&quot;</summary>
      
    
    
    
    
    <category term="React" scheme="http://example.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="http://example.com/2021/03/11/Git/"/>
    <id>http://example.com/2021/03/11/Git/</id>
    <published>2021-03-11T12:50:38.000Z</published>
    <updated>2021-03-11T12:51:21.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p><img src="https://howlcn1997.github.io/2019/09/20/Git/git.png" alt="git"></p><p><strong>专有名词：</strong></p><blockquote><ul><li>Workspace：工作区</li><li>Index / Stage：暂存区</li><li>Repository：仓库区（或本地仓库）</li><li>Remote：远程仓库</li></ul></blockquote><h2 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h2><p>代码拉取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone + Git仓库的地址</span><br></pre></td></tr></table></figure><p>切换分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -a  &#x2F;&#x2F;查看分支</span><br><span class="line">$ git checkout -b dev-0930 origin&#x2F;dev-0930  &#x2F;&#x2F;切换分支</span><br></pre></td></tr></table></figure><p>代码提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git status   &#x2F;&#x2F;查看已修改文件</span><br><span class="line">$ git add .    &#x2F;&#x2F;提交到暂存区</span><br><span class="line">$ git commit -m &quot;更新描述&quot;    &#x2F;&#x2F;提交到本地仓库</span><br><span class="line">$ git pull     &#x2F;&#x2F;拉取</span><br><span class="line">$ git push     &#x2F;&#x2F;提交到远程仓库</span><br></pre></td></tr></table></figure><h2 id="Git命令"><a href="#Git命令" class="headerlink" title="Git命令"></a>Git命令</h2><h3 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ git init</span><br><span class="line"> </span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ git init [project-name]</span><br><span class="line"> </span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url]</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 显示当前的Git配置</span><br><span class="line">$ git config --list</span><br><span class="line"> </span><br><span class="line"># 编辑Git配置文件</span><br><span class="line">$ git config -e [--global]</span><br><span class="line"> </span><br><span class="line"># 设置提交代码时的用户信息</span><br><span class="line">$ git config [--global] user.name &quot;[name]&quot;</span><br><span class="line">$ git config [--global] user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure><h3 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 添加指定文件到暂存区</span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"> </span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">$ git add [dir]</span><br><span class="line"> </span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">$ git add .</span><br><span class="line"> </span><br><span class="line"># 添加每个变化前，都会要求确认</span><br><span class="line"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class="line">$ git add -p</span><br><span class="line"> </span><br><span class="line"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"> </span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"> </span><br><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h3 id="代码的提交"><a href="#代码的提交" class="headerlink" title="代码的提交"></a>代码的提交</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"> </span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"> </span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">$ git commit -a</span><br><span class="line"> </span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git commit -v</span><br><span class="line"> </span><br><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"> </span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有本地分支</span><br><span class="line">$ git branch</span><br><span class="line"> </span><br><span class="line"># 列出所有远程分支</span><br><span class="line">$ git branch -r</span><br><span class="line"> </span><br><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">$ git branch -a</span><br><span class="line"> </span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"> </span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"> </span><br><span class="line"># 新建一个分支，指向指定commit</span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"> </span><br><span class="line"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"> </span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"> </span><br><span class="line"># 切换到上一个分支</span><br><span class="line">$ git checkout -</span><br><span class="line"> </span><br><span class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"> </span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"> </span><br><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"> </span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"> </span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote&#x2F;branch]</span><br></pre></td></tr></table></figure><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有tag</span><br><span class="line">$ git tag</span><br><span class="line"> </span><br><span class="line"># 新建一个tag在当前commit</span><br><span class="line">$ git tag [tag]</span><br><span class="line"> </span><br><span class="line"># 新建一个tag在指定commit</span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"> </span><br><span class="line"># 删除本地tag</span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"> </span><br><span class="line"># 删除远程tag</span><br><span class="line">$ git push origin :refs&#x2F;tags&#x2F;[tagName]</span><br><span class="line"> </span><br><span class="line"># 查看tag信息</span><br><span class="line">$ git show [tag]</span><br><span class="line"> </span><br><span class="line"># 提交指定tag</span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"> </span><br><span class="line"># 提交所有tag</span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"> </span><br><span class="line"># 新建一个分支，指向某个tag</span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"># 显示有变更的文件</span><br><span class="line">$ git status</span><br><span class="line"> </span><br><span class="line"># 显示当前分支的版本历史</span><br><span class="line">$ git log</span><br><span class="line"> </span><br><span class="line"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line">$ git log --stat</span><br><span class="line"> </span><br><span class="line"># 搜索提交历史，根据关键词</span><br><span class="line">$ git log -S [keyword]</span><br><span class="line"> </span><br><span class="line"># 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="line">$ git log [tag] HEAD --pretty&#x3D;format:%s</span><br><span class="line"> </span><br><span class="line"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br><span class="line">$ git log [tag] HEAD --grep feature</span><br><span class="line"> </span><br><span class="line"># 显示某个文件的版本历史，包括文件改名</span><br><span class="line">$ git log --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"> </span><br><span class="line"># 显示指定文件相关的每一次diff</span><br><span class="line">$ git log -p [file]</span><br><span class="line"> </span><br><span class="line"># 显示过去5次提交</span><br><span class="line">$ git log -5 --pretty --oneline</span><br><span class="line"> </span><br><span class="line"># 显示所有提交过的用户，按提交次数排序</span><br><span class="line">$ git shortlog -sn</span><br><span class="line"> </span><br><span class="line"># 显示指定文件是什么人在什么时间修改过</span><br><span class="line">$ git blame [file]</span><br><span class="line"> </span><br><span class="line"># 显示暂存区和工作区的差异</span><br><span class="line">$ git diff</span><br><span class="line"> </span><br><span class="line"># 显示暂存区和上一个commit的差异</span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"> </span><br><span class="line"># 显示工作区与当前分支最新commit之间的差异</span><br><span class="line">$ git diff HEAD</span><br><span class="line"> </span><br><span class="line"># 显示两次提交之间的差异</span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"> </span><br><span class="line"># 显示今天你写了多少行代码</span><br><span class="line">$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br><span class="line"> </span><br><span class="line"># 显示某次提交的元数据和内容变化</span><br><span class="line">$ git show [commit]</span><br><span class="line"> </span><br><span class="line"># 显示某次提交发生变化的文件</span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"> </span><br><span class="line"># 显示某次提交时，某个文件的内容</span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"> </span><br><span class="line"># 显示当前分支的最近几次提交</span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h3 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 下载远程仓库的所有变动</span><br><span class="line">$ git fetch [remote]</span><br><span class="line"> </span><br><span class="line"># 显示所有远程仓库</span><br><span class="line">$ git remote -v</span><br><span class="line"> </span><br><span class="line"># 显示某个远程仓库的信息</span><br><span class="line">$ git remote show [remote]</span><br><span class="line"> </span><br><span class="line"># 增加一个新的远程仓库，并命名</span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"># 更新分支  （当远程创建新的分支后）</span><br><span class="line">$ git remote update origin --prune</span><br><span class="line"> </span><br><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">$ git pull [remote] [branch]    &#x2F;&#x2F;相当于git pull &#x3D; git fetch + git merge，这样可能会产生冲突，需要手动解决。</span><br><span class="line"> </span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"> </span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">$ git push [remote] --force</span><br><span class="line"> </span><br><span class="line"># 推送所有分支到远程仓库</span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br><span class="line"> </span><br><span class="line"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"> </span><br><span class="line"># 恢复暂存区的所有文件到工作区</span><br><span class="line">$ git checkout .</span><br><span class="line"> </span><br><span class="line"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="line">$ git reset [file]</span><br><span class="line"> </span><br><span class="line"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line">$ git reset --hard</span><br><span class="line"> </span><br><span class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line">$ git reset [commit]</span><br><span class="line"> </span><br><span class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"> </span><br><span class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"> </span><br><span class="line"># 新建一个commit，用来撤销指定commit</span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">$ git revert [commit]</span><br><span class="line"> </span><br><span class="line"># 暂时将未提交的变化移除，稍后再移入</span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 生成一个可供发布的压缩包</span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure><h3 id="设置忽略上传文件"><a href="#设置忽略上传文件" class="headerlink" title="设置忽略上传文件"></a>设置忽略上传文件</h3><p>1、项目中生成<code>.gitignoe</code>文件</p><p>Git Bash 输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch .gitignoe</span><br></pre></td></tr></table></figure><p>2、配置.gitignoe</p><p>如：忽略上传node_module</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;node_modules</span><br></pre></td></tr></table></figure><p>3、常用规则</p><ol><li><code>/mtk/</code>过滤整个文件夹</li><li><code>*.zip</code>过滤所有.zip文件</li><li><code>/mtk/do.c</code>过滤某个具体文件</li></ol><p>配置语法</p><ol><li>以斜杠“/”开头表示目录；</li><li>以星号“*”通配多个字符；</li><li>以问号“?”通配单个字符</li><li>以方括号“[]”包含单个字符的匹配列表；</li><li>以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；</li></ol><p>此外： git 对于 .ignore 配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效；</p><p>如果你不慎在创建.gitignore文件之前就push了项目，那么即使你在.gitignore文件中写入新的过滤规则，这些规则也不会起作用，Git仍然会对所有文件进行版本管理。<br>简单来说，出现这种问题的原因就是Git已经开始管理这些文件了，所以你无法再通过过滤规则过滤它们。因此一定要养成在项目开始就创建.gitignore文件的习惯，否则一旦push，处理起来会非常麻烦</p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p><strong>每次项目开发之前要保证项目是最新的版本</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull   &#x2F;&#x2F;从仓库中拉取最新代码合并到本地代码中</span><br></pre></td></tr></table></figure><p><strong>项目开发不要在master中开发，切换到已有分支，或者新建分支</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">$ git checkout [branch-name]</span><br></pre></td></tr></table></figure><hr><p><strong>开发分支</strong>（本地分支）</p><blockquote><h4 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h4><p>hotfix-上线日期<br>如：hotfix-20190926</p></blockquote><p>新建本地提测分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b hotfix-20190926</span><br></pre></td></tr></table></figure><p>将本地分支关联到远程提测分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --set-upstream-to&#x3D;远程分支名 本地分支名</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;如：$ git branch --set-upstream-to&#x3D;origin&#x2F;hotfix-20190926 hotfix-20190926</span><br></pre></td></tr></table></figure><p>将已修改的代码提交</p><p><strong>提测分支</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;命名规则</span><br><span class="line">release&#x2F;日期</span><br><span class="line">如：release&#x2F;20190926</span><br></pre></td></tr></table></figure><p>本地若有release/20190926且关联了远程仓库分支则无需新建</p><p>若没有，</p><p>新建本地分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b release&#x2F;20190926</span><br></pre></td></tr></table></figure><p>本地分支关联到远程分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;如：$ git branch --set-upstream-to&#x3D;origin&#x2F;release&#x2F;20190926 release&#x2F;20190926</span><br></pre></td></tr></table></figure><p>拉取远程代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure><p>将本地开发分支中已修改的代码合并到本地提测分支中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge release&#x2F;20190926</span><br></pre></td></tr></table></figure><p>将本地提测分支中的代码提交到远程提测分支中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git push</span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure><p>若项目中安装了<code>commitlint/cli</code>和<code>commitlint/config-conventional</code></p><blockquote><p>这是对git commit -m 中的desc做限制 写描述时要遵循声明的规则</p><p>规则一般写在 README.md中</p></blockquote><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">### git commit message 规范</span><br><span class="line">提交commit代码格式：</span><br><span class="line">git commit -m &lt;type&gt;[optional scope]: &lt;description&gt;</span><br><span class="line"></span><br><span class="line">type ：用于表明我们这次提交的改动类型，是新增了功能？还是修改了测试代码？又或者是更新了文档？总结以下 11 种类型：</span><br><span class="line">- build：主要目的是修改项目构建系统(例如 glup，webpack，rollup 的配置等)的提交</span><br><span class="line">- ci：主要目的是修改项目继续集成流程(例如 Travis，Jenkins，GitLab CI，Circle等)的提交</span><br><span class="line">- docs：文档更新</span><br><span class="line">- feat：新增功能</span><br><span class="line">- fix：bug 修复</span><br><span class="line">- perf：性能优化</span><br><span class="line">- refactor：重构代码(既没有新增功能，也没有修复 bug)</span><br><span class="line">- style：不影响程序逻辑的代码修改(修改空白字符，补全缺失的分号等)</span><br><span class="line">- test：新增测试用例或是更新现有测试</span><br><span class="line">- revert：回滚某个更早之前的提交</span><br><span class="line">- chore：不属于以上类型的其他类型(日常事务)</span><br><span class="line"></span><br><span class="line">optional scope：一个可选的修改范围。用于标识此次提交主要涉及到代码中哪个模块。</span><br><span class="line"></span><br><span class="line">description：一句话描述此次提交的主要内容，做到言简意赅。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Git&quot;&gt;&lt;a href=&quot;#Git&quot; class=&quot;headerlink&quot; title=&quot;Git&quot;&gt;&lt;/a&gt;Git&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://howlcn1997.github.io/2019/09/20/Git/git.png&quot; alt</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="http://example.com/2021/03/11/MySQL/"/>
    <id>http://example.com/2021/03/11/MySQL/</id>
    <published>2021-03-11T12:39:46.000Z</published>
    <updated>2021-03-11T12:40:26.821Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="1、确保已安装wamp并且启动成功"><a href="#1、确保已安装wamp并且启动成功" class="headerlink" title="1、确保已安装wamp并且启动成功"></a>1、确保已安装wamp并且启动成功</h2><p>详情请见<a href="https://howlcn.github.io/2019/05/12/wamp%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">wamp环境搭建</a></p><h2 id="2、下载navicat-premium"><a href="#2、下载navicat-premium" class="headerlink" title="2、下载navicat premium"></a>2、下载navicat premium</h2><p>文件 -&gt; 新建连接</p><p>点击自己新建的链接，新建数据库 字符集uft8 排序规则utf8_bin</p><h2 id="3、在项目文件夹中安装mySQL"><a href="#3、在项目文件夹中安装mySQL" class="headerlink" title="3、在项目文件夹中安装mySQL"></a>3、在项目文件夹中安装mySQL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">npm install mysqljs&#x2F;mysql</span><br></pre></td></tr></table></figure><h2 id="4、在服务器js文件中使用mysql包"><a href="#4、在服务器js文件中使用mysql包" class="headerlink" title="4、在服务器js文件中使用mysql包"></a>4、在服务器js文件中使用mysql包</h2><h3 id="引入mysql包"><a href="#引入mysql包" class="headerlink" title="引入mysql包"></a>引入mysql包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const mysql &#x3D; require(&#39;mysql&#39;);</span><br></pre></td></tr></table></figure><h3 id="创建数据库链接"><a href="#创建数据库链接" class="headerlink" title="创建数据库链接"></a>创建数据库链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const connection &#x3D; mysql.createConnection(&#123;</span><br><span class="line">host: &#39;localhost&#39;, &#x2F;&#x2F;数据库所在的服务器的域名（或ip地址）</span><br><span class="line">user: &#39;me&#39;, &#x2F;&#x2F;登录数据库的账号</span><br><span class="line">password: &#39;secret&#39;, &#x2F;&#x2F;登陆数据库的密码</span><br><span class="line">database: &#39;book&#39; &#x2F;&#x2F;数据库的名称</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="执行链接操作"><a href="#执行链接操作" class="headerlink" title="执行链接操作"></a>执行链接操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.connect();</span><br></pre></td></tr></table></figure><h3 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h3><p>数据库的操作是异步的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">connection.query(&#39;数据库操作语句&#39;,function(error,results,fields)&#123; &#x2F;&#x2F;results 数据库语句执行完后的结果</span><br><span class="line">if(error) throw error;</span><br><span class="line">console.log(&#39;The solution is:&#39;,results[0].solution);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="关闭数据库"><a href="#关闭数据库" class="headerlink" title="关闭数据库"></a>关闭数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.end();</span><br></pre></td></tr></table></figure><h2 id="数据库常用语句"><a href="#数据库常用语句" class="headerlink" title="数据库常用语句"></a>数据库常用语句</h2><p>先给出代码大概框架</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">const mysql &#x3D; require(&#39;mysql&#39;);</span><br><span class="line"></span><br><span class="line">const connection &#x3D; mysql.createConnection(&#123;</span><br><span class="line">    host: &#39;localhost&#39;, &#x2F;&#x2F;数据库所在的服务器的域名（或ip地址）</span><br><span class="line">    user: &#39;root&#39;, &#x2F;&#x2F;登录数据库的账号</span><br><span class="line">    password: &#39;&#39;, &#x2F;&#x2F;登陆数据库的密码</span><br><span class="line">    database: &#39;book&#39; &#x2F;&#x2F;数据库的名称</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">connection.connect();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;此处开始进行数据库数据操作**********************之后的代码只有此处不同</span><br><span class="line">&#x2F;&#x2F; ？ 是为了给后面的数据进行填充</span><br><span class="line">let sql &#x3D; &#39;insert into book set ?&#39;;</span><br><span class="line">let data &#x3D; &#123;</span><br><span class="line">    name: &#39;百年孤独&#39;,</span><br><span class="line">    author: &#39;加西亚·马尔克斯&#39;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">connection.query(sql,data,function(error,results,fields)&#123; &#x2F;&#x2F;results 数据库语句执行完后的结果 是个对象</span><br><span class="line">    if(error) throw error;</span><br><span class="line">    if(results.affectedRows &#x3D;&#x3D; 1)&#123;</span><br><span class="line">        console.log(&#39;数据插入成功！&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;此处结束数据库数据操作************************</span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; ？ 是为了给后面的数据进行填充</span><br><span class="line">let sql &#x3D; &#39;insert into book set ?&#39;;</span><br><span class="line">let data &#x3D; &#123;</span><br><span class="line">    name: &#39;百年孤独&#39;,</span><br><span class="line">    author: &#39;加西亚·马尔克斯&#39;</span><br><span class="line">&#125;;</span><br><span class="line">connection.query(sql,data,function(error,results,fields)&#123; &#x2F;&#x2F;results 数据库语句执行完后的结果</span><br><span class="line">    if(error) throw error;</span><br><span class="line">    if(results.affectedRows &#x3D;&#x3D; 1)&#123;</span><br><span class="line">        console.log(&#39;数据插入成功！&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let sql &#x3D; &#39;delete from book where id&#x3D;?&#39;;</span><br><span class="line">let data &#x3D; [2];</span><br><span class="line"></span><br><span class="line">connection.query(sql,data,function(error,results,fields)&#123; &#x2F;&#x2F;results 数据库语句执行完后的结果</span><br><span class="line">    if(error) throw error;</span><br><span class="line">    if(results.affectedRows &#x3D;&#x3D; 1)&#123;</span><br><span class="line">        console.log(&#39;数据删除成功！&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let sql &#x3D; &#39;update book set name&#x3D;?,author&#x3D;? where id&#x3D;?&#39;;</span><br><span class="line">let data &#x3D; [&#39;红楼梦&#39;,&#39;曹雪芹&#39;,2];</span><br><span class="line"></span><br><span class="line">connection.query(sql,data,function(error,results,fields)&#123; &#x2F;&#x2F;results 数据库语句执行完后的结果</span><br><span class="line">    if(error) throw error;</span><br><span class="line">    if(results.affectedRows &#x3D;&#x3D; 1)&#123;</span><br><span class="line">        console.log(&#39;数据更新成功！&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;let sql &#x3D; &#39;select * from book&#39;; &#x2F;&#x2F; * 查询范围是全部数据</span><br><span class="line">&#x2F;&#x2F;let data &#x3D; null;</span><br><span class="line"></span><br><span class="line">let sql &#x3D; &#39;select * from book where id &#x3D; ?&#39;;  &#x2F;&#x2F;从所有数据中查询id为？的数据</span><br><span class="line">let data &#x3D; [1];</span><br><span class="line"></span><br><span class="line">connection.query(sql,data,function(error,results,fields)&#123; &#x2F;&#x2F;results 数据库语句执行完后的结果</span><br><span class="line">if(error) throw error;</span><br><span class="line">    console.log(results[0].name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>不难发现对数据的增删改查在代码层面是类似的。</p><h3 id="封装对数据库的操作"><a href="#封装对数据库的操作" class="headerlink" title="封装对数据库的操作"></a>封装对数据库的操作</h3><p>新建一个db.js文件，此js中的代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const mysql &#x3D; require(&#39;mysql&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;当sql是插入操作时，data需要是一个对象</span><br><span class="line">&#x2F;&#x2F;当sql是删改查时，data是一个数组数组中的数据与表中的字段顺序要一一对应</span><br><span class="line">exports.base &#x3D; (sql,data,callback)&#x3D;&gt;&#123;</span><br><span class="line">    const connection &#x3D; mysql.createConnection(&#123;</span><br><span class="line">        host: &#39;localhost&#39;,</span><br><span class="line">        user: &#39;root&#39;,</span><br><span class="line">        password: &#39;&#39;,</span><br><span class="line">        database: &#39;book&#39;</span><br><span class="line">    &#125;);</span><br><span class="line">    connection.connect();</span><br><span class="line">    connection.query(sql,data,function(error,results,fields)&#123;</span><br><span class="line">        if(error) throw error;</span><br><span class="line">        callback(results);</span><br><span class="line">    &#125;);</span><br><span class="line">    connection.end();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL&quot;&gt;&lt;a href=&quot;#MySQL&quot; class=&quot;headerlink&quot; title=&quot;MySQL&quot;&gt;&lt;/a&gt;MySQL&lt;/h1&gt;&lt;h2 id=&quot;1、确保已安装wamp并且启动成功&quot;&gt;&lt;a href=&quot;#1、确保已安装wamp并且启动成功&quot; class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ES6语法</title>
    <link href="http://example.com/2021/03/11/ES6%E8%AF%AD%E6%B3%95/"/>
    <id>http://example.com/2021/03/11/ES6%E8%AF%AD%E6%B3%95/</id>
    <published>2021-03-11T12:37:42.000Z</published>
    <updated>2021-03-11T12:38:58.554Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6新特性"><a href="#ES6新特性" class="headerlink" title="ES6新特性"></a>ES6新特性</h1><p>ES6 = ECMAScript 6</p><h2 id="申明变量let和const"><a href="#申明变量let和const" class="headerlink" title="申明变量let和const"></a>申明变量let和const</h2><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><h4 id="1、let申明变量不存在预解析；"><a href="#1、let申明变量不存在预解析；" class="headerlink" title="1、let申明变量不存在预解析；"></a>1、let申明变量不存在预解析；</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(flag);</span><br><span class="line">let flag &#x3D; 123;</span><br><span class="line">&#x2F;&#x2F;结果：报错</span><br></pre></td></tr></table></figure><h4 id="2、let声明的变量不允许重复"><a href="#2、let声明的变量不允许重复" class="headerlink" title="2、let声明的变量不允许重复"></a>2、let声明的变量不允许重复</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let flag &#x3D; 123;</span><br><span class="line">let flag &#x3D; 456;</span><br><span class="line">console.log(flag);</span><br></pre></td></tr></table></figure><h4 id="3、ES6引入了块级作用域"><a href="#3、ES6引入了块级作用域" class="headerlink" title="3、ES6引入了块级作用域"></a>3、ES6引入了块级作用域</h4><p>块内部定义的变量，在外部无法访问(PS: 只要被 { } 包裹起来，就形成块级作用域)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (true)&#123;</span><br><span class="line">let flag &#x3D; 123;</span><br><span class="line">&#125;</span><br><span class="line">console.log(flag);</span><br></pre></td></tr></table></figure><h4 id="4、let必须先声明在使用"><a href="#4、let必须先声明在使用" class="headerlink" title="4、let必须先声明在使用"></a>4、let必须先声明在使用</h4><p>因为用let申明的变量没有预解析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tem &#x3D; 123;</span><br><span class="line">let tem;  &#x2F;&#x2F;报错</span><br></pre></td></tr></table></figure><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>const声明的常量不能被重新赋值，且在申明的同时就要被初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const n &#x3D; 1;&#x2F;&#x2F;申明的同时就要初始化</span><br><span class="line">n &#x3D; 2;&#x2F;&#x2F;此处报错</span><br></pre></td></tr></table></figure><h2 id="变量的结构赋值"><a href="#变量的结构赋值" class="headerlink" title="变量的结构赋值"></a>变量的结构赋值</h2><h4 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; var a &#x3D;1,b&#x3D;2,c&#x3D;3;&#x2F;&#x2F;js中的写法</span><br><span class="line">let [a,b,c] &#x3D; [1,2,3];&#x2F;&#x2F;node中 数组的解构赋值</span><br><span class="line">console.log(a,b,c);&#x2F;&#x2F; 1 2 3</span><br><span class="line">&#x2F;&#x2F;声明时赋初值</span><br><span class="line">let [a&#x3D;123,b,c] &#x3D; [,456,];</span><br><span class="line">console.log(a,b,c);&#x2F;&#x2F; 123 456 undefined</span><br></pre></td></tr></table></figure><p>利用解构赋值交换两个变量的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let a &#x3D; 1;</span><br><span class="line">let b &#x3D; 2;</span><br><span class="line">[a, b] &#x3D; [b, a];</span><br><span class="line">console.log(a,b);&#x2F;&#x2F; 2 1</span><br></pre></td></tr></table></figure><p>对象的解构赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let &#123;foo,bar&#125; &#x3D; &#123;foo : &#39;hello&#39;,bar : &#39;hi&#39;&#125;;</span><br><span class="line">console.log(foo,bar);</span><br></pre></td></tr></table></figure><p>字符串的解构赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let [a,b,c,d,e] &#x3D; &quot;hello&quot;;</span><br><span class="line">console.log(a,b,c,d,e);&#x2F;&#x2F;h e l l o</span><br></pre></td></tr></table></figure><h2 id="字符串相关扩展"><a href="#字符串相关扩展" class="headerlink" title="字符串相关扩展"></a>字符串相关扩展</h2><h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><p>include(str [,index]) str 所要匹配的字符串 ； index 从什么位置开始匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#39;hello world&#39;.includes(&#39;world&#39;);&#x2F;&#x2F;true</span><br><span class="line">console.log(&#39;hello world&#39;.includes(&#39;world&#39;,7);&#x2F;&#x2F;false</span><br></pre></td></tr></table></figure><h3 id="startsWith"><a href="#startsWith" class="headerlink" title="startsWith()"></a>startsWith()</h3><p>判断字符串是否特定字符串开始</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#39;admin&#x2F;index.php&#39;.startsWith(&#39;admin&#39;));&#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><h3 id="endsWith"><a href="#endsWith" class="headerlink" title="endsWith()"></a>endsWith()</h3><p>判断字符串是否特定字符串结束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#39;admin&#x2F;index.php&#39;.startsWith(&#39;php&#39;));&#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>在js中若要拼接字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123;</span><br><span class="line">name:&#39;张三&#39;,</span><br><span class="line">age:13,</span><br><span class="line">gender:&#39;男&#39;</span><br><span class="line">&#125;</span><br><span class="line">var str &#x3D; &#39;&lt;div&gt;&lt;span&gt;&#39;+obj.name+&#39;&lt;&#x2F;span&gt;&lt;span&gt;&#39;+obj.age+&#39;&lt;&#x2F;span&gt;&lt;span&gt;&#39;+obj.gender+&#39;&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;&#39;;</span><br><span class="line">console.log(str);&#x2F;&#x2F;&lt;div&gt;&lt;span&gt;张三&lt;&#x2F;span&gt;&lt;span&gt;13&lt;&#x2F;span&gt;&lt;span&gt;男&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>利用模板字符串进行拼接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">let obj &#x3D; &#123;</span><br><span class="line">name:&#39;张三&#39;,</span><br><span class="line">age:13,</span><br><span class="line">gender:&#39;男&#39;</span><br><span class="line">&#125;</span><br><span class="line">let str &#x3D; &#39;&lt;div&gt;</span><br><span class="line">                &lt;span&gt;$&#123;obj.name&#125;&lt;&#x2F;span&gt;</span><br><span class="line">                &lt;span&gt;$&#123;obj.age&#125;&lt;&#x2F;span&gt;</span><br><span class="line">                &lt;span&gt;$&#123;obj.gender&#125;&lt;&#x2F;span&gt;</span><br><span class="line">   &lt;span&gt;$&#123;1+1&#125;&lt;&#x2F;span&gt;</span><br><span class="line">   &lt;span&gt;$&#123;fn(&#39;你好&#39;)&#125;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;&#39;;</span><br><span class="line">console.log(str);</span><br><span class="line">&#x2F;&#x2F;&lt;div&gt;</span><br><span class="line">&#x2F;&#x2F;    &lt;span&gt;张三&lt;&#x2F;span&gt;</span><br><span class="line">&#x2F;&#x2F;    &lt;span&gt;13&lt;&#x2F;span&gt;</span><br><span class="line">&#x2F;&#x2F;    &lt;span&gt;男&lt;&#x2F;span&gt;</span><br><span class="line">&#x2F;&#x2F;  &lt;span&gt;2&lt;&#x2F;span&gt;</span><br><span class="line">&#x2F;&#x2F;  &lt;span&gt;你好&lt;&#x2F;span&gt;</span><br><span class="line">&#x2F;&#x2F;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h2 id="函数的相关扩展"><a href="#函数的相关扩展" class="headerlink" title="函数的相关扩展"></a>函数的相关扩展</h2><p>1、参数的默认值</p><p>2、参数的解构赋值</p><p>3、rest参数</p><p>4、…扩展运算符</p><p>5、箭头函数</p><h3 id="参数的默认值"><a href="#参数的默认值" class="headerlink" title="参数的默认值"></a>参数的默认值</h3><p>在js中的若要给函数参数指定默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function foo(param)&#123;</span><br><span class="line">let p &#x3D; param || &#39;hello&#39;;</span><br><span class="line">console.log(p);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;foo();</span><br><span class="line">&#x2F;&#x2F;foo(&#39;nihao&#39;);</span><br></pre></td></tr></table></figure><p>在ES6中给函数参数指定默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function foo(param &#x3D; &#39;hello&#39;)&#123;</span><br><span class="line">console.log(p);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;foo();</span><br><span class="line">&#x2F;&#x2F;foo(&#39;nihao&#39;);</span><br></pre></td></tr></table></figure><h3 id="参数的解构赋值"><a href="#参数的解构赋值" class="headerlink" title="参数的解构赋值"></a>参数的解构赋值</h3><p>默认参数的做法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function foo(param &#x3D; &#39;hello&#39; , age &#x3D; 12)&#123;</span><br><span class="line">console.log(param,age);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;foo();</span><br><span class="line">&#x2F;&#x2F;foo(&#39;nihao&#39;,18);</span><br></pre></td></tr></table></figure><p>参数的解构赋值的做法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function foo(&#123;param,age&#125;&#125;)&#123;</span><br><span class="line">console.log(param,age);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;foo(&#123;&#125;);  &#x2F;&#x2F;注意 此时一定要传入一个对象</span><br><span class="line">&#x2F;&#x2F;添加默认参数</span><br><span class="line">function foo(&#123;param &#x3D; &#39;hello&#39;,age &#x3D; 12&#125;&#125;)&#123;</span><br><span class="line">console.log(param,age);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;foo(&#123;&#125;);  &#x2F;&#x2F;注意 此时一定要传入一个对象</span><br><span class="line">&#x2F;&#x2F;foo(&#123;param &#x3D; &#39;nihao&#39;,age &#x3D; 18&#125;)</span><br></pre></td></tr></table></figure><h3 id="rest参数（剩余参数）"><a href="#rest参数（剩余参数）" class="headerlink" title="rest参数（剩余参数）"></a>rest参数（剩余参数）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function foo(a,b,...param)&#123; &#x2F;&#x2F;...param会以数组的形式存储剩余的参数</span><br><span class="line">console.log(param);</span><br><span class="line">&#125;</span><br><span class="line">foo(1,2,3,4,5,6,7);&#x2F;&#x2F;[3,4,5,6,7]</span><br></pre></td></tr></table></figure><h3 id="扩展运算符-…"><a href="#扩展运算符-…" class="headerlink" title="扩展运算符 …"></a>扩展运算符 …</h3><p>使用 … 将数组拆撒后入参</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function foo(a,b,c,d)&#123;</span><br><span class="line">console.log(a + b + c + d);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;foo(1,2,3,4);&#x2F;&#x2F;传统调用方式</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;当要传入一个数组时 arr &#x3D; [1,2,3,4]</span><br><span class="line">&#x2F;&#x2F;方法一 使用foo.apply(null,arr);</span><br><span class="line">&#x2F;&#x2F;方法二 使用 ...   将数组拆散</span><br><span class="line">foo(...arr); &#x2F;&#x2F;10</span><br></pre></td></tr></table></figure><p>使用 … 合并数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let arr1 &#x3D; [1,2,3];</span><br><span class="line">let arr2 &#x3D; [4,5,6];</span><br><span class="line">let arr3 &#x3D; [...arr1,...arr2];</span><br><span class="line">console.log(arr3);&#x2F;&#x2F;[1,2,3,4,5,6]</span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;传统函数声明以及调用</span><br><span class="line">function foo(参数列表)&#123;</span><br><span class="line">函数体</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br><span class="line">&#x2F;&#x2F;ES6 中新增的函数申明以及调用  &#x3D;&gt;</span><br><span class="line">let foo &#x3D; (形参参数列表) &#x3D;&gt; &#123;函数体&#125;;</span><br><span class="line">foo(实参列表);</span><br><span class="line">&#x2F;&#x2F;用处 例子</span><br><span class="line">var arr &#x3D; [1,2,3,4];</span><br><span class="line">&#x2F;&#x2F;arr.forEach(function(e,index)&#123;</span><br><span class="line">&#x2F;&#x2F;    console.log(e);</span><br><span class="line">&#x2F;&#x2F;  console.log(index);</span><br><span class="line">&#x2F;&#x2F;&#125;);</span><br><span class="line">arr.forEach((e,index) &#x3D;&gt; &#123;console.log(e);console.log(index)&#125;);</span><br></pre></td></tr></table></figure><p>箭头函数的注意事项</p><p>1、箭头函数中this取决于函数的定义，而不是函数的调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;不使用箭头函数时 this取决于调用者  此时是window</span><br><span class="line">var obj &#x3D; &#123;</span><br><span class="line">name:&quot;张三&quot;,</span><br><span class="line">doSomething: function()&#123;</span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line">console.log(this);</span><br><span class="line">&#125;,1000);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.doSomething();&#x2F;&#x2F;window</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;使用箭头函数中的this 取决函数声明的环境 此时是在obj中声明的  则this指向obj</span><br><span class="line">var obj &#x3D; &#123;</span><br><span class="line">name:&quot;张三&quot;,</span><br><span class="line">doSomething: function()&#123;</span><br><span class="line">setTimeout(()&#x3D;&gt;&#123;</span><br><span class="line">console.log(this);</span><br><span class="line">&#125;,1000);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.doSomething();&#x2F;&#x2F;obj&#123;name:&quot;张三&quot;&#125;</span><br></pre></td></tr></table></figure><p>2、箭头参数不可以new</p><p>3、箭头函数不可以使用arguments获取参数列表，可以使用rest代替</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let foo &#x3D; (...param) &#x3D;&gt; console.log(param);</span><br><span class="line">foo(1,2,3,4);</span><br></pre></td></tr></table></figure><h2 id="数组的扩展"><a href="#数组的扩展" class="headerlink" title="数组的扩展"></a>数组的扩展</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">let a &#x3D; [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;].keys(); &#x2F;&#x2F;Array.keys()  返回数组的所有下标[0,1,2]</span><br><span class="line">console.log(a.next());  &#x2F;&#x2F;迭代返回当前位置的下标 0</span><br><span class="line">console.log(a.next());  &#x2F;&#x2F;1</span><br><span class="line">console.log(a.next());  &#x2F;&#x2F;2</span><br><span class="line"></span><br><span class="line">let b &#x3D; [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;].values(); &#x2F;&#x2F;Array.values()  返回数组的所有值</span><br><span class="line">console.log(b.next());  &#x2F;&#x2F;迭代返回当前位置的值  a</span><br><span class="line">console.log(b.next());  &#x2F;&#x2F;b</span><br><span class="line">console.log(b.next());  &#x2F;&#x2F;c</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;数组查找</span><br><span class="line">&#123;</span><br><span class="line">    console.log([1,2,3,4,5,6].find((item)&#x3D;&gt;&#123;  &#x2F;&#x2F;find 返回满足条件的第一个元素值</span><br><span class="line">        return item&gt;3;</span><br><span class="line">    &#125;));</span><br><span class="line">    </span><br><span class="line">    console.log([1,2,3,4,5,6].filter((item)&#x3D;&gt;&#123;  &#x2F;&#x2F;filter 返回满足条件的所有元素值</span><br><span class="line">        return item&gt;3;</span><br><span class="line">    &#125;));</span><br><span class="line">    </span><br><span class="line">    console.log([1,2,3,4,5,6].findIndex((item)&#x3D;&gt;&#123; &#x2F;&#x2F;findIndex 返回满条件的第一个元素下标</span><br><span class="line">        return item&gt;3;</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;数组包含</span><br><span class="line">&#123;</span><br><span class="line">    let arr &#x3D; [123,456,7,8,9,NaN];</span><br><span class="line">    console.log(arr.includes(456));&#x2F;&#x2F;Array.includes(item);在数组中查询有无item元素 返回boolean</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;也可以查询有无非数字</span><br><span class="line">    console.log([1,2,NaN].includes(1));</span><br><span class="line">    console.log([1,2,NaN].includes(NaN));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><p>ES6新增数据类型 属于基本数据类型，Symbol不可以new</p><p>Symbol声明的变量是唯一的，意义在于减少命名冲突；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;Symbol的变量是唯一的，所以a1和a2永远不相等</span><br><span class="line">    let a1 &#x3D; Symbol();</span><br><span class="line">    let a2 &#x3D; Symbol();</span><br><span class="line">    console.log(a1 &#x3D;&#x3D;&#x3D; a2);</span><br><span class="line">    </span><br><span class="line">   &#x2F;&#x2F;Symbol.for(key)</span><br><span class="line">   &#x2F;&#x2F;在使用Symbol时  会生成一个全局注册表，其中的数据以键值对的形式存在；能根据key来拿到对应的value</span><br><span class="line">   &#x2F;&#x2F;若  a3  a4的key是相同的  那么a3 a4是相同的</span><br><span class="line">    let a3 &#x3D; Symbol.for(&quot;a3&quot;);</span><br><span class="line">    let a4 &#x3D; Symbol.for(&quot;a3&quot;);</span><br><span class="line">    console.log(a3 &#x3D;&#x3D;&#x3D; a4);  &#x2F;&#x2F;true</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;问题  若改变a3的值  a4的值会改变吗？</span><br><span class="line">    &#x2F;&#x2F;是值复制   还是指针</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ES6中涉及到的数据结构"><a href="#ES6中涉及到的数据结构" class="headerlink" title="ES6中涉及到的数据结构"></a>ES6中涉及到的数据结构</h2><h3 id="数组Array"><a href="#数组Array" class="headerlink" title="数组Array"></a>数组Array</h3><p>数组中的元素可以重复，且数组中元素的排列是有序的（因此可以通过下标访问）</p><h3 id="集合Set"><a href="#集合Set" class="headerlink" title="集合Set"></a>集合Set</h3><p>集合的元素是唯一的，不可以重复出现，且集合中的元素是无序的（因此无法通过下标访问集合中的元素）</p><h4 id="Set中的方法"><a href="#Set中的方法" class="headerlink" title="Set中的方法"></a>Set中的方法</h4><table><thead><tr><th align="center"><strong>set.add(ele)</strong></th><th align="center"><strong>向set集合中追加ele元素</strong></th></tr></thead><tbody><tr><td align="center"><strong>set.has(ele)</strong></td><td align="center"><strong>判断set集合中是否存在ele元素</strong></td></tr><tr><td align="center"><strong>set.delete(ele)</strong></td><td align="center"><strong>从集合中删除ele元素</strong></td></tr><tr><td align="center"><strong>set.clear()</strong></td><td align="center"><strong>清空set集合</strong></td></tr><tr><td align="center"><strong>set.forEach( (ele) =&gt;{} )</strong></td><td align="center"><strong>遍历集和</strong></td></tr></tbody></table><p>set对象的创建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let set &#x3D; new set();</span><br></pre></td></tr></table></figure><h3 id="数组与集合的互相转换"><a href="#数组与集合的互相转换" class="headerlink" title="数组与集合的互相转换"></a>数组与集合的互相转换</h3><h4 id="数组-gt-集合"><a href="#数组-gt-集合" class="headerlink" title="数组==&gt;集合"></a>数组==&gt;集合</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [1,2,3];</span><br><span class="line">let set &#x3D; new set(arr);</span><br></pre></td></tr></table></figure><h4 id="集合-gt-数组"><a href="#集合-gt-数组" class="headerlink" title="集合==&gt;数组"></a>集合==&gt;数组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let set &#x3D; new set();</span><br><span class="line">let arr &#x3D; [...set];</span><br></pre></td></tr></table></figure><h3 id="weakSet"><a href="#weakSet" class="headerlink" title="weakSet"></a>weakSet</h3><p><strong>WeakSet 结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有下面区别。</strong></p><p> 1.WeakSet 的成员只能是对象，而不能是其他类型的值。</p><p> 2.WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不 再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。</p><p> 3.WeakSet 只有add/delete/clear/has三个方法，不能遍历，没有size属性等</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>Map也是由键值对构成的，和对象的区别在于Map的key也可以是一个对象，Object只可以是字符串</p><h2 id="代理和反射"><a href="#代理和反射" class="headerlink" title="代理和反射"></a>代理和反射</h2><h3 id="代理Proxy"><a href="#代理Proxy" class="headerlink" title="代理Proxy"></a>代理Proxy</h3><p>代理：通过代理对象访问目标对象</p><p>作用：</p><p> 1、控制目标对象的访问权限</p><p> 2、扩展目标对象方法</p><p>创建目标对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let targetObject &#x3D; &#123;</span><br><span class="line">name:&quot;target&quot;,</span><br><span class="line">    type:&quot;object&quot;,</span><br><span class="line">fun:function()&#123;</span><br><span class="line">console.log(&#39;目标对象的fun&#39;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建代理对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">var p &#x3D; new Proxy(targetObject,&#123;</span><br><span class="line">    &#x2F;&#x2F;target 就是目标的对象</span><br><span class="line">    &#x2F;&#x2F;key 就是目标对象中的每一个属性和方法</span><br><span class="line">    &#x2F;&#x2F;当代理对象直接获取属性和方法的等信息的时候都会来调用get方法</span><br><span class="line">get(target,key)&#123;</span><br><span class="line">if(key &#x3D;&#x3D;&#x3D; &#39;fun&#39;)&#123;</span><br><span class="line">console.log(&quot;代理对象调用目标对象的fun&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return target[key];</span><br><span class="line">&#125;,</span><br><span class="line">    &#x2F;&#x2F;当给对象的属性和方法赋值的时候调用set方法</span><br><span class="line">    &#x2F;&#x2F;target 就是目标的对象</span><br><span class="line">    &#x2F;&#x2F;key 就是目标对象中的每一个属性和方法</span><br><span class="line">    &#x2F;&#x2F;value 属性值</span><br><span class="line">    set(target,key,value)&#123;</span><br><span class="line">    &#x2F;&#x2F;如果key为type的时候就不给目标对象赋值</span><br><span class="line">    if(key &#x3D;&#x3D;&#x3D; &#39;type&#39;)&#123;</span><br><span class="line">        return target[type];</span><br><span class="line">        &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">            target[key] &#x3D; value;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;,</span><br><span class="line">    &#x2F;&#x2F;当通过 xx in obj 的时候调用has方法</span><br><span class="line">    has(target,key)&#123;</span><br><span class="line">        if(key &#x3D;&#x3D;&#x3D; &#39;type&#39;)&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F;当删除对象的属性时 调用此方法</span><br><span class="line">    deleteProperty(target,key)&#123;</span><br><span class="line">        if(key &#x3D;&#x3D;&#x3D; &#39;age&#39;)&#123;</span><br><span class="line">            delete target[key];</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">p.fun(); &#x2F;&#x2F;代理对象调用目标对象的fun     目标对象的fun</span><br><span class="line">p.name &#x3D; &#39;temp&#39;; &#x2F;&#x2F;修改无效  当使用点的方式来访问属性时 会调用set函数  而set函数中设置了对name的修改权限</span><br><span class="line">console.log(p);  &#x2F;&#x2F;&#123; name: &#39;target&#39;, type: &#39;object&#39;, fun: [Function: fun] &#125;</span><br><span class="line">p.type &#x3D; &#39;temp&#39;; &#x2F;&#x2F;修改成功  set中没有对type的权限要求</span><br><span class="line">console.log(p); &#x2F;&#x2F;&#123; name: &#39;target&#39;, type: &#39;temp&#39;, fun: [Function: fun] &#125;</span><br><span class="line"></span><br><span class="line">console.log(&#39;type&#39; in p); &#x2F;&#x2F;true  当使用in判断对象中是否有某属性时 会调用has函数 而我们在has中对type设置了权限 则无法访问</span><br><span class="line">console.log(&#39;name&#39; in p); &#x2F;&#x2F;true  未对name设置  则访问成功</span><br><span class="line"></span><br><span class="line">delete p.name;  &#x2F;&#x2F;删除失败   当使用点的方式来删除某属性时会默认调用deleteProperty方法 而我们在deleteProperty中限制了对name的删除权限 则删除失败</span><br><span class="line">delete p.type;  &#x2F;&#x2F;删除成功   </span><br><span class="line">console.log(p); &#x2F;&#x2F;&#123; name: &#39;target&#39;, fun: [Function: fun] &#125;</span><br></pre></td></tr></table></figure><h3 id="反射Reflect"><a href="#反射Reflect" class="headerlink" title="反射Reflect"></a>反射Reflect</h3><p> 反射机制是指程序在运行的时候访问、检测和修改它本身状态或行为的一种能力，例如一个对象能够在运行时知道自己有哪些方法和属性。</p><p> 反射的概念在编译型的编程语言中比较明显，比如java、C#、Object-c等。对于 <code>JavaScript</code>来说，反射就是获取对象的内部结构的信息，所以JS中的反射随处可见，比如for…in方式遍历对象。</p><p> 从ECMAScript6开始，JS引入Reflect这个API专门用于操作反射。</p><p> ES6中的反射，将抛出异常，异常捕获简化为返回一个boolean值来表示其是否正常运行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ES6新特性&quot;&gt;&lt;a href=&quot;#ES6新特性&quot; class=&quot;headerlink&quot; title=&quot;ES6新特性&quot;&gt;&lt;/a&gt;ES6新特性&lt;/h1&gt;&lt;p&gt;ES6 = ECMAScript 6&lt;/p&gt;
&lt;h2 id=&quot;申明变量let和const&quot;&gt;&lt;a href=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Nuxt</title>
    <link href="http://example.com/2021/03/11/Nuxt/"/>
    <id>http://example.com/2021/03/11/Nuxt/</id>
    <published>2021-03-11T12:32:57.000Z</published>
    <updated>2021-03-11T12:36:56.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nuxt"><a href="#Nuxt" class="headerlink" title="Nuxt"></a>Nuxt</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p> Nuxt 是一个基于 Vue 生态的更高层的框架，为开发服务端渲染(SSR)的 Vue 应用提供了极其便利的开发体验。</p><p> Vue.js是开发SPA单页面应用的，传统的SPA应用是将bundle.js从服务端获取，然后在客户端解析并挂载到dom。</p><p> Nuxt这个框架是用Vue开发多页应用，并在服务端渲染。我们可以将组件渲染为服务器端的 HTML 字符串，将它们直接发送到浏览器，最后将这些静态标记”激活”为客户端上完全可交互的应用程序。</p><p> Nuxt适合做新闻、博客、电影、咨询这样的需要搜索引擎提供流量的项目。如果你要做到是移动端项目，就没有必要用nuxt这个框架了。</p><p>Nuxt是基于Vue.js的服务端渲染框架，可以很好的解决SPA应用程序的首次加载问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Nuxt.js有如下特点：</span><br><span class="line">Vue 2 ： nuxt是基于Vue2开发的</span><br><span class="line">Vue Router  ： nuxt整合了路由功能，配置非常简单</span><br><span class="line">VueX  ： 支持vuex</span><br><span class="line">Vue Server Renderer  ： 支持服务端渲染</span><br><span class="line">Vue-meta  ： 支持meta标签配置</span><br></pre></td></tr></table></figure><p>Nuxt机制图示</p><p>未使用Nuxt：</p><p><img src="https://howlcn1997.github.io/2018/06/07/Nuxt/noNuxt.png" alt="noNuxt"></p><p>使用Nuxt：</p><p><img src="https://howlcn1997.github.io/2018/06/07/Nuxt/nuxt.png" alt="nuxt"></p><h2 id="二、创建Nuxt项目"><a href="#二、创建Nuxt项目" class="headerlink" title="二、创建Nuxt项目"></a>二、创建Nuxt项目</h2><p><a href="https://zh.nuxtjs.org/guide/installation/#%E6%96%B0%E6%89%8B%E6%A8%A1%E6%9D%BF">新手模板</a></p><p>确保安装了npx（npx在NPM版本5.2.0默认安装了）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx create-nuxt-app &lt;项目名&gt;</span><br></pre></td></tr></table></figure><p>或者使用yarn:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn create nuxt-app &lt;项目名&gt;</span><br></pre></td></tr></table></figure><p>配置：</p><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:3000</span><br></pre></td></tr></table></figure><h2 id="三、Nuxt基本使用"><a href="#三、Nuxt基本使用" class="headerlink" title="三、Nuxt基本使用"></a>三、Nuxt基本使用</h2><h3 id="3-1-路由"><a href="#3-1-路由" class="headerlink" title="3.1 路由"></a>3.1 路由</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;pages文件夹下面，文件名即路由</span><br><span class="line"></span><br><span class="line">#1.pages下新建search.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    这是search页面</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.index.vue使用路由 此处的search就是所创建的search.vue的文件名</span><br><span class="line">&lt;nuxt-link to&#x3D;&quot;&#x2F;search&quot;&gt;到search页面&lt;&#x2F;nuxt-link&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-嵌套子模版"><a href="#3-2-嵌套子模版" class="headerlink" title="3.2 嵌套子模版"></a>3.2 嵌套子模版</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#index.vue</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">      &lt;section class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">              &lt;logo&#x2F;&gt;</span><br><span class="line">             &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;section&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Logo from &#39;~&#x2F;components&#x2F;Logo.vue&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Logo</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-3-layouts布局文件"><a href="#3-3-layouts布局文件" class="headerlink" title="3.3 layouts布局文件"></a>3.3 layouts布局文件</h3><p> 默认情况下所有的页面都会默认使用layouts下面default.vue这个布局文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#default.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;头部&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;!--nuxt就相当于 router-view--&gt;</span><br><span class="line">    &lt;nuxt&#x2F;&gt;                     </span><br><span class="line">    &lt;h1&gt;尾巴&lt;&#x2F;h1&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>当然也可以创建自定义的布局文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;自定义布局文件</span><br><span class="line">&#x2F;&#x2F;1.layouts下新建一个user.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;用户页面头部&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;nuxt&#x2F;&gt;</span><br><span class="line">    &lt;h1&gt;用户页面底部&lt;&#x2F;h1&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&quot;css&quot; scoped&gt;</span><br><span class="line">  h1&#123;</span><br><span class="line">    color:green</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.pages下的search.vue指定使用哪个布局文件</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default&#123;</span><br><span class="line">    layout:&quot;user&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-4-全局CSS文件"><a href="#3-4-全局CSS文件" class="headerlink" title="3.4 全局CSS文件"></a>3.4 全局CSS文件</h3><p> 此css 文件将在所有组件中自动生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#1.在assets下新建css&#x2F;main.css</span><br><span class="line"></span><br><span class="line">#2.修改nuxt.config.css配置文件后</span><br><span class="line">&#x2F;*</span><br><span class="line">** global css</span><br><span class="line">*&#x2F;</span><br><span class="line">css: [</span><br><span class="line">    &#39;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&#39;,</span><br><span class="line">    &#39;~assets&#x2F;css&#x2F;main.css&#39;</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">#3.重启服务(配置文件的修改，重启后才能生效)</span><br></pre></td></tr></table></figure><h3 id="3-5-Vuex的使用"><a href="#3-5-Vuex的使用" class="headerlink" title="3.5 Vuex的使用"></a>3.5 Vuex的使用</h3><p> 在nuxt中使用vuex的时候无需new Vue.Store实例，nuxt会帮我们自动创建。默认情况下，会使用index.js这个store。</p><p> 每次修改增加Vuex时要重启服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#1.store&#x2F;index.js</span><br><span class="line">&#x2F;&#x2F;state存放数据</span><br><span class="line">export const state &#x3D; () &#x3D;&gt; (&#123;</span><br><span class="line">  list: [&#39;a&#39;,&#39;b&#39;],</span><br><span class="line">  user:&#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F;修改state</span><br><span class="line">export const mutations &#x3D; &#123;</span><br><span class="line">  increment (state,text) &#123;</span><br><span class="line">    state.list.push(text);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;异步提交mutations</span><br><span class="line">export const actions &#x3D; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">#2.store&#x2F;city.js</span><br><span class="line">export const state &#x3D; () &#x3D;&gt; (&#123;</span><br><span class="line">  list: [&#39;c&#39;,&#39;d&#39;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export const mutations &#x3D; &#123;</span><br><span class="line">  increment (state,text) &#123;</span><br><span class="line">    state.list.push(text);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在vue文件中使用vuex</p><ol><li>使用store/index.js中的state时 <code>$store.state.list</code></li><li>使用store/city.js中的state时 <code>$store.state.city.list</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#3.pages&#x2F;city.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    Page is city</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li</span><br><span class="line">        v-for&#x3D;&quot;(item,idx) in $store.state.list&quot;</span><br><span class="line">        :key&#x3D;&quot;idx&quot;&gt; &#123;&#123; item &#125;&#125; </span><br><span class="line">       &lt;&#x2F;li&gt;</span><br><span class="line"></span><br><span class="line">      &lt;input</span><br><span class="line">        type&#x3D;&quot;button&quot;</span><br><span class="line">        value&#x3D;&quot;增加信息index&quot;</span><br><span class="line">        @click&#x3D;&quot;addIndex&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;li</span><br><span class="line">        v-for&#x3D;&quot;(item,idx) in $store.state.city.list&quot;</span><br><span class="line">        :key&#x3D;&quot;idx&quot;&gt; &#123;&#123; item &#125;&#125; </span><br><span class="line">      &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input</span><br><span class="line">      type&#x3D;&quot;button&quot;</span><br><span class="line">      value&#x3D;&quot;增加信息city&quot;</span><br><span class="line">      @click&#x3D;&quot;addCity&quot;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import axios from &quot;axios&quot;</span><br><span class="line">  export default&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        list:[]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      addIndex()&#123;</span><br><span class="line">        this.$store.commit(&#39;increment&#39;, &quot;kk&quot;)</span><br><span class="line">      &#125;,</span><br><span class="line">      addCity()&#123;</span><br><span class="line">        this.$store.commit(&#39;city&#x2F;increment&#39;, &quot;jj&quot;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="四、SPA-SEO-SSR"><a href="#四、SPA-SEO-SSR" class="headerlink" title="四、SPA\SEO\SSR"></a>四、SPA\SEO\SSR</h2><h3 id="4-1-SPA-单页面应用"><a href="#4-1-SPA-单页面应用" class="headerlink" title="4.1 SPA:单页面应用"></a>4.1 SPA:单页面应用</h3><blockquote><p>SPA 时代，主要是在客户端端使用了<code>history</code>或<code>hash</code>（主要是为了低版本浏览器的兼容）API，在首次请求经服务端路由输出整个应用程序后，接下来的路由都由前端掌控了，前端通过路由作为中心枢纽控制一系列页面（组件）的渲染(DOM的生成)加载和数据交互。</p></blockquote><p>优点：</p><ol><li>页面之间的切换非常快</li><li>一定程度减少了后端服务器的压力</li><li>实现前后端分离，后端程序只需要提供api，不需要客户端到底是web端还是手机等</li></ol><p>缺点：</p><ol><li>首屏打开速度很慢</li><li>不利于SEO搜索引擎优化</li></ol><h3 id="4-2-SEO-搜索引擎优化"><a href="#4-2-SEO-搜索引擎优化" class="headerlink" title="4.2 SEO:搜索引擎优化"></a>4.2 SEO:搜索引擎优化</h3><blockquote><p>SEO是一种通过了解搜索引擎的运作规则（如何抓取网站页面，如何索引以及如何根据特定的关键字展现搜索结果排序等）来调整网站，以提高该网站在搜索引擎中某些关键词的搜索结果排名。</p><p>由于SPA使用Ajax动态获取数据，很难保证搜索引擎的正常爬取，并且有些搜索引擎不支持js和Ajax获取的数据，因此SSR诞生</p></blockquote><h3 id="4-3-SSR-服务器端渲染"><a href="#4-3-SSR-服务器端渲染" class="headerlink" title="4.3 SSR:服务器端渲染"></a>4.3 SSR:服务器端渲染</h3><blockquote><p>为了解决SPA不支持SEO的问题，我们也可以将同一个组件渲染为服务器端的 HTML 字符串，将它们直接发送到浏览器，但是这样的HTML页面还不具备交互能力，所以还需要与SPA框架配合，在浏览器上“混合”成可交互的应用程序。</p></blockquote><p>基本流程：当客户端向服务器发送请求后，web服务器根据路由拿到对应数据渲染并输出，且输出部分中包含两部分：</p><ol><li>路由页对应的页面及已渲染好的数据（解决首屏加载）</li><li>完整的SPA程序代码 （本地路由跳转，而不请求服务器）</li></ol><p>优点：</p><ol><li>更好的 SEO（搜索引擎爬虫抓取工具可以直接查看完全渲染的页面）</li><li>更快的内容到达时间 （不用等待所有的JS都下载完成，浏览器便能显示比较完整的页面了）</li></ol><p>缺点：</p><ol><li>占用更多的cpu和内存资源</li><li>一些常用的浏览器的api可能无法正常使用 （如：window，document，alert）</li><li>开发调试会有一些麻烦 （因为涉及到了浏览器及服务器，对于SPA的一些组件的声明周期的管理会变得复杂）</li></ol><h3 id="4-4-Nuxt对SSR支持"><a href="#4-4-Nuxt对SSR支持" class="headerlink" title="4.4 Nuxt对SSR支持"></a>4.4 Nuxt对SSR支持</h3><blockquote><p>从头搭建一个服务端渲染的应用是相当复杂的。幸运的是，我们有一个优秀的社区项目 <a href="https://nuxtjs.org/">Nuxt.js</a> 让这一切变得非常简单。Nuxt 是一个基于 Vue 生态的更高层的框架，为开发服务端渲染的 Vue 应用提供了极其便利的开发体验。</p><p>Nuxt.js 是使用 Webpack 和 Node.js 进行封装的基于Vue的SSR框架，预设了利用Vue.js开发<strong>服务端渲染</strong>的应用所需要的各种配置，使用它你可以不需要自己搭建一套 SSR 程序，而是通过其约定好的文件结构和API就可以实现一个首屏渲染的 Web 应用。</p><p>Nuxt.js 主要关注的是应用的 UI渲染。</p></blockquote><p><a href="https://juejin.im/post/58ff960ba22b9d0065b722cd">实现基于 Nuxt.js 的 SSR 应用</a></p><h2 id="五、数据预取"><a href="#五、数据预取" class="headerlink" title="五、数据预取"></a>五、数据预取</h2><h3 id="5-1-准备服务器接口"><a href="#5-1-准备服务器接口" class="headerlink" title="5.1 准备服务器接口"></a>5.1 准备服务器接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#1.server&#x2F;interface&#x2F;city.js</span><br><span class="line">var express &#x3D; require(&#39;express&#39;)</span><br><span class="line">var router &#x3D; express.Router()</span><br><span class="line">router.get(&#39;&#x2F;info&#39;, function (req, res) &#123;</span><br><span class="line">    return res.status(200).json([&#39;北京&#39;,&#39;天津&#39;])</span><br><span class="line">&#125;)</span><br><span class="line">module.exports &#x3D; router</span><br><span class="line"></span><br><span class="line">#2.server&#x2F;index.js</span><br><span class="line">const cityInterface &#x3D; require(&quot;.&#x2F;interface&#x2F;city&quot;)</span><br><span class="line">&#x2F;&#x2F;在app.use(nuxt.render)上面添加app.use(&quot;&#x2F;city&quot;,cityInterface)</span><br><span class="line">app.use(&quot;&#x2F;city&quot;,cityInterface);</span><br><span class="line">app.use(nuxt.render)</span><br><span class="line"></span><br><span class="line">#.重启服务</span><br><span class="line">localhost:3000&#x2F;city&#x2F;info  测试接口</span><br></pre></td></tr></table></figure><h3 id="5-2-不适用数据预取"><a href="#5-2-不适用数据预取" class="headerlink" title="5.2 不适用数据预取"></a>5.2 不适用数据预取</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#1.客户端pages下新建city.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    Page is city</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li</span><br><span class="line">        v-for&#x3D;&quot;(item,idx) in list&quot;</span><br><span class="line">        :key&#x3D;&quot;idx&quot;&gt; &#123;&#123; item &#125;&#125; &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import axios from &quot;axios&quot;</span><br><span class="line">  export default&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        list:[]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F;async表示方法返回一个Promise</span><br><span class="line">    &#x2F;&#x2F;await 同步等待</span><br><span class="line">    async mounted()&#123;</span><br><span class="line">      let &#123;status,data&#125; &#x3D; await axios.get(&quot;&#x2F;city&#x2F;info&quot;);</span><br><span class="line">      this.list &#x3D; data;</span><br><span class="line">      console.log(this.list);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="5-3-Nuxt-js的工作流"><a href="#5-3-Nuxt-js的工作流" class="headerlink" title="5.3 Nuxt.js的工作流"></a>5.3 Nuxt.js的工作流</h3><p><img src="https://howlcn1997.github.io/2018/06/07/Nuxt/1546049173524.png" alt="1546049173524"></p><ul><li>nuxtServerInit：如果在状态树(store)中指定了 <code>nuxtServerInit</code> 方法，Nuxt.js 调用它的时候会将页面的上下文对象作为第2个参数传给它（仅在服务端调用）。当我们想将服务端的一些数据传到客户端时，这个方法是非常好用的</li><li>middleware：中间件允许您定义一个自定义函数运行在一个页面或一组页面渲染之前，服务端首屏渲染和路由跳转前均执行对应中间件。可以用作页面跳转时验证用户信息操作(登陆拦截)。</li><li>asyncData会在组件加载前（限于页面组件）调用，可以在<strong>服务端首屏渲染或者在路由跳转时执行</strong>，专门用来请求数据，Nuxt.js 会将 <code>asyncData</code> 返回的数据融合组件 <code>data</code> 方法返回的数据一并返回给当前组件。asyncData应该是用于影响SEO的内容，也就是需要让爬虫读取的内容。</li></ul><h3 id="5-4-服务端数据预取"><a href="#5-4-服务端数据预取" class="headerlink" title="5.4 服务端数据预取"></a>5.4 服务端数据预取</h3><h4 id="nuxtServerInit"><a href="#nuxtServerInit" class="headerlink" title="nuxtServerInit"></a>nuxtServerInit</h4><blockquote><p>nuxtServerInit可以将服务端的数据通过vuex同步到客户端，该方法仅会在服务端首屏渲染时执行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#store&#x2F;index.js</span><br><span class="line">export const state &#x3D; () &#x3D;&gt; (&#123;</span><br><span class="line">  list: [],</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export const mutations &#x3D; &#123;</span><br><span class="line">  setlist (state,text) &#123;</span><br><span class="line">    text.forEach(item&#x3D;&gt;&#123;</span><br><span class="line">      state.list.push(item)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export const actions &#x3D; &#123;</span><br><span class="line">  &#x2F;&#x2F;将菜单信息写入到vuex实例中</span><br><span class="line">  async nuxtServerInit (&#123; commit &#125;, &#123; req ,app &#125;) &#123;</span><br><span class="line">    &#123;</span><br><span class="line">      let &#123;status, data&#125; &#x3D; await app.$axios.get(&quot;&#x2F;city&#x2F;info&quot;);</span><br><span class="line">      commit(&#39;setlist&#39;, data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#2.pages&#x2F;city.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    Page is city</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li</span><br><span class="line">        v-for&#x3D;&quot;(item,idx) in $store.state.list&quot;</span><br><span class="line">        :key&#x3D;&quot;idx&quot;&gt; &#123;&#123; item &#125;&#125; &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><h4 id="asyncData和fetch方法"><a href="#asyncData和fetch方法" class="headerlink" title="asyncData和fetch方法"></a>asyncData和fetch方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;使用asyncData进行ssr渲染</span><br><span class="line">async asyncData()&#123;</span><br><span class="line">    &#x2F;&#x2F;给data取别名，请求网址写全，因为在刷新浏览器的时候需要全路径请求服务器</span><br><span class="line">    let &#123;status,data:list&#125; &#x3D; await axios.get(&quot;http:&#x2F;&#x2F;127.0.0.1:3000&#x2F;city&#x2F;info&quot;);</span><br><span class="line">    if(status &#x3D;&#x3D; 200) &#123;</span><br><span class="line">        &#x2F;&#x2F;这边不能使用this.list &#x3D; list,因为获取不到this</span><br><span class="line">        &#x2F;&#x2F;通过return给页面返回数据</span><br><span class="line">        return &#123;</span><br><span class="line">            list</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async fetch (&#123; store, params &#125;)&#123;</span><br><span class="line">      &#x2F;&#x2F;当页面加载时触发可以执行请求来触发action来修改state</span><br><span class="line">      &#x2F;&#x2F;不可以return数据给页面</span><br><span class="line">      &#x2F;&#x2F;页面可以从this.$store中获取action修改的state</span><br><span class="line">      let &#123;status,data:list&#125; &#x3D; await axios.get(&quot;http:&#x2F;&#x2F;127.0.0.1:3000&#x2F;city&#x2F;info&quot;);</span><br><span class="line">      store.commit(&#39;setlist&#39;, list)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点：asyncData 和 fetch都只能够在页面组件中使用，如果想要在页面组件的子组件中使用ssr，可以使用nuxtServerInit<br>#注意点：由于 asyncData方法是在组件初始化前被调用的，所以在方法内是没有办法通过this来引用组件的实例。<br>#注意点：当用户请求页面时候服务端会先使用SSR来生成对应的页面文档结构，而在用户切换路由则是使用了SPA的模式。这意味着如果用户刷新页面，asyncData方法会在服务端执行；如果用户通过nuxt-link路由导航到当前页面，asyncData会在客户端执行</p><h3 id="5-5客户端数据预取"><a href="#5-5客户端数据预取" class="headerlink" title="5.5客户端数据预取"></a>5.5客户端数据预取</h3><blockquote><p>当asyncData方法是由路由跳转触发的时候，则使用客户端数据预取，asyncData方法会在客户端执行。可以通过控制台打印来查看是在浏览器执行还是在node执行就可以验证了。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">async asyncData(context)&#123;</span><br><span class="line">    &#x2F;&#x2F;给data取别名，请求网址写全</span><br><span class="line">    let &#123;status,data:list&#125; &#x3D; await axios.get(&quot;http:&#x2F;&#x2F;127.0.0.1:3000&#x2F;city&#x2F;info&quot;);</span><br><span class="line">    &#x2F;&#x2F;如果是客户端执行，则可以使用window对象</span><br><span class="line">    &#x2F;&#x2F;如果是服务端执行，则没有window对象</span><br><span class="line">    if(process.client)&#123;</span><br><span class="line">        console.log(window)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(status &#x3D;&#x3D; 200) &#123;</span><br><span class="line">        &#x2F;&#x2F;这边不能使用this.list &#x3D; list,因为获取不到this</span><br><span class="line">        &#x2F;&#x2F;通过return给页面返回数据</span><br><span class="line">        return &#123;</span><br><span class="line">            list</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、SSR原理"><a href="#六、SSR原理" class="headerlink" title="六、SSR原理"></a>六、SSR原理</h2><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180524/92672015b4914784ae5a800c4a655e25.jpeg" alt="img"></p><p><a href="https://ssr.vuejs.org/zh/">官方文档</a></p><p>如上图所示：webpack将 Source 打包出两个bundle文件。</p><ul><li><p>服务端渲染：Server Bundle用于服务端渲染，主要是获取异步数据，同步到组件中，并将组件渲染成HTML返回到前端，但是<strong>vue-ssr不能绑定javascript事件</strong>，也就是说服务器端使用vue-ssr渲染出来的返回到浏览器的也只能是HTML+CSS。</p></li><li><p>客户端渲染：Client Bundle 用于客户端渲染，之前说过服务器不能增加事件，那只能前端增加。所以我们看到SSR渲染的网页源码中有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.__NUXT__&#x3D;...</span><br></pre></td></tr></table></figure><p>代码，这是后端和前端在使用vuex共享数据。后端从vuex里面取到数据之后渲染成真正的HTML和css返回。客户端也是从vuex里面取到数据，客户端的渲染主要做2件事：</p><ul><li>拿到数据，使用 virtual-dom进行预渲染，然后和服务端渲染出来的进行比对，比对两边渲染的内容是不是一致的</li><li>对DOM元素的事件进行绑定，也就是回答的问题，事件在这块进行的处理</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Nuxt&quot;&gt;&lt;a href=&quot;#Nuxt&quot; class=&quot;headerlink&quot; title=&quot;Nuxt&quot;&gt;&lt;/a&gt;Nuxt&lt;/h1&gt;&lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
</feed>
