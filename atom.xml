<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>是方圆啊</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-12T07:09:38.943Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>是方圆啊</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅谈TypeScript</title>
    <link href="http://example.com/2021/04/15/%E6%B5%85%E8%B0%88TypeScript/"/>
    <id>http://example.com/2021/04/15/%E6%B5%85%E8%B0%88TypeScript/</id>
    <published>2021-04-15T03:12:21.000Z</published>
    <updated>2021-03-12T07:09:38.943Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><h2 id="1-1-TS简介"><a href="#1-1-TS简介" class="headerlink" title="1.1 TS简介"></a>1.1 TS简介</h2><p>TypeScript 是 JavaScript 的强类型版本。然后在编译期去掉类型和特有语法，生成纯粹的 JavaScript 代码。由于最终在浏览器中运行的仍然是 JavaScript，所以 TypeScript 并不依赖于浏览器的支持，也并不会带来兼容性问题。</p><p>TypeScript 是 JavaScript 的超集，这意味着他支持所有的 JavaScript 语法。并在此之上对 JavaScript 添加了一些扩展，如 class / interface / module 等。这样会大大提升代码的可阅读性。</p><p>和 JavaScript 弱类型不同，TypeScript 这种强类型语言最大的优势在于静态类型检查，可以在代码开发阶段就预知一些低级错误的发生。</p><ul><li>一种类似于 JavaScript 的语言，在 JavaScript 的基础之上增加了类型，同时增强了 JavaScript 部分语法功能</li><li>遵循 EcmaScript 6 标准规范</li><li>由微软开发</li><li>Angular 2 框架采用 TypeScript 编写</li><li>背后有微软和谷歌两大公司的支持</li><li>TypeScript 可以编译成 JavaScript 从而在支持 JavaScript 的环境中运行</li><li>TypeScript 和 JavaScript 的关系就好比 less 和 css 的关系</li></ul><p>TypeScript 中文网 <a href="https://www.tslang.cn/">https://www.tslang.cn/</a></p><p>在线编译环境 <a href="https://www.typescriptlang.org/play/index.html">https://www.typescriptlang.org/play/index.html</a></p><h2 id="1-2-TS环境搭建"><a href="#1-2-TS环境搭建" class="headerlink" title="1.2 TS环境搭建"></a>1.2 TS环境搭建</h2><ol><li>打开命令行，键入<code>npm i -g typescript</code> 全局安装TS</li><li>继续在命令行环境下键入 <code>tsc -init</code> 进行初始化，<br>你会发现根目录下多了 tsconfig.json 的文件，记录了编译成JS的选项</li><li>创建ts文件</li><li>打开VSCode进入该目录，按下 Ctrl+shift+B 快捷键会进行编译，初次编译会选择编译模式</li><li>输入node命令运行js代码</li></ol><h2 id="1-3-变量声明"><a href="#1-3-变量声明" class="headerlink" title="1.3 变量声明"></a>1.3 变量声明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">var</span><br><span class="line">- 作用域 : 全局作用域、函数作用域</span><br><span class="line">- 重复声明</span><br><span class="line">- 变量提升</span><br><span class="line"></span><br><span class="line">let</span><br><span class="line">- 块级作用域</span><br><span class="line">- 在同一个块中不能重复声明</span><br><span class="line"></span><br><span class="line">const</span><br><span class="line">- 声明同时必须赋值</span><br><span class="line">- 一旦声明不可改变（对象可以修改）</span><br><span class="line">- 块级作用域</span><br></pre></td></tr></table></figure><h2 id="1-4-基本数据类型"><a href="#1-4-基本数据类型" class="headerlink" title="1.4 基本数据类型"></a>1.4 基本数据类型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;字符串</span><br><span class="line">var uname:string &#x3D; &quot;zhangsan&quot;;</span><br><span class="line">let nickname: string &#x3D; &#39;张三&#39;;</span><br><span class="line">let isDone: boolean &#x3D; false;</span><br><span class="line">let age: number &#x3D; 37;</span><br><span class="line">let sentence: string &#x3D; &#96;Hello, my nickname is $&#123; nickname &#125;.</span><br><span class="line"></span><br><span class="line">I&#39;ll be $&#123; age + 1 &#125; years old next month.&#96;</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;数组</span><br><span class="line">&#x2F;&#x2F;TypeScript像JavaScript一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上[]，表示由此类型元素组成的一个数组：</span><br><span class="line">let list: number[] &#x3D; [1, 2, 3];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第二种方式是使用数组泛型，Array&lt;元素类型&gt;：</span><br><span class="line">let list: Array&lt;number&gt; &#x3D; [1, 2, 3];</span><br><span class="line">Javascript</span><br><span class="line">&#x2F;&#x2F;ts的数组只能存放单一数据类型的元素，元组则可以很好的解决此问题。</span><br><span class="line">&#x2F;&#x2F;元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为string和number类型的元组。</span><br><span class="line">&#x2F;&#x2F; Declare a tuple type</span><br><span class="line">let x: [string, number];</span><br><span class="line">&#x2F;&#x2F; Initialize it</span><br><span class="line">x &#x3D; [&#39;hello&#39;, 10]; &#x2F;&#x2F; OK</span><br><span class="line">&#x2F;&#x2F; Initialize it incorrectly</span><br><span class="line">x &#x3D; [10, &#39;hello&#39;]; &#x2F;&#x2F; Error</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;object类型</span><br><span class="line">- 允许赋任意值</span><br><span class="line">- 但是不能调用任意方法，即便它真的有</span><br><span class="line"></span><br><span class="line">let foo: object &#x3D; &#123;</span><br><span class="line">  name: &#39;Jack&#39;,</span><br><span class="line">  age: 18</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;知道即可，用的很少，没有类型校验和语法提示</span><br><span class="line">Javascript</span><br><span class="line">&#x2F;&#x2F;Any</span><br><span class="line">&#x2F;&#x2F;有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用 any类型来标记这些变量：</span><br><span class="line"></span><br><span class="line">let notSure: any &#x3D; 4;</span><br><span class="line">notSure &#x3D; &quot;maybe a string instead&quot;;</span><br><span class="line">notSure &#x3D; false; &#x2F;&#x2F; okay, definitely a boolean</span><br><span class="line">Javascript</span><br><span class="line">&#x2F;&#x2F;Void 类型</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;void类型像是与any类型相反，它表示没有任何类型。 当一个函数没有返回值时，你通常会见到其返回值类型是 void：</span><br><span class="line"></span><br><span class="line">function warnUser(): void &#123;</span><br><span class="line">  alert(&quot;This is my warning message&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;声明一个void类型的变量没有什么大用，因为你只能为它赋予undefined：</span><br><span class="line">let unusable: void &#x3D; undefined;</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;Null 和 Undefined</span><br><span class="line">&#x2F;&#x2F; Not much else we can assign to these variables!</span><br><span class="line">let u: undefined &#x3D; undefined;</span><br><span class="line">let n: null &#x3D; null;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;never</span><br><span class="line">never 是其它类型（包括 null 和 undefined）的子类型，代表从不会出现的值。</span><br><span class="line">let x: never;</span><br><span class="line">let y: number;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 运行错误，数字类型不能转为 never 类型</span><br><span class="line">x &#x3D; 123;</span><br><span class="line">&#x2F;&#x2F; 运行正确，never 类型可以赋值给 never类型</span><br><span class="line">x &#x3D; (()&#x3D;&gt;&#123; throw new Error(&#39;exception&#39;)&#125;)();</span><br><span class="line">&#x2F;&#x2F; 运行正确，never 类型可以赋值给 数字类型</span><br><span class="line">y &#x3D; (()&#x3D;&gt;&#123; throw new Error(&#39;exception&#39;)&#125;)();</span><br><span class="line">&#x2F;&#x2F; 返回值为 never 的函数可以是抛出异常的情况</span><br><span class="line">function error(message: string): never &#123;</span><br><span class="line">    throw new Error(message);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 返回值为 never 的函数可以是无法被执行到的终止点的情况</span><br><span class="line">function loop(): never &#123;</span><br><span class="line">    while (true) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;类型推断</span><br><span class="line">&#x2F;&#x2F; 有时候你会遇到这样的情况，你会比TypeScript更了解某个值的详细信息。 通常这会发生在你清楚地知道一个实体具有比它现有类型更确切的类型。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 TypeScript会假设你，程序员，已经进行了必须的检查。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 类型断言有两种形式。 其一是“尖括号”语法：</span><br><span class="line"></span><br><span class="line">let someValue: any &#x3D; true;</span><br><span class="line">let strLength: number &#x3D; (&lt;string&gt;someValue).length;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;另一个为as语法：</span><br><span class="line">let someValue: any &#x3D; &quot;this is a string&quot;;</span><br><span class="line">let strLength: number &#x3D; (someValue as string).length;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;两种形式是等价的。 至于使用哪个大多数情况下是凭个人喜好；然而，当你在TypeScript里使用JSX时，只有 as语法断言是被允许的。</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;枚举类型</span><br><span class="line"></span><br><span class="line">enum Color &#123;Red, Green, Blue&#125;;</span><br><span class="line">let c: Color &#x3D; Color.Blue;</span><br><span class="line">console.log(c);    &#x2F;&#x2F; 输出 2</span><br></pre></td></tr></table></figure><h2 id="1-5-解构赋值"><a href="#1-5-解构赋值" class="headerlink" title="1.5 解构赋值"></a>1.5 解构赋值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;数组解构</span><br><span class="line">let input &#x3D; [1, 2];</span><br><span class="line">let [first, second] &#x3D; input;</span><br><span class="line">console.log(first); &#x2F;&#x2F; outputs 1</span><br><span class="line">console.log(second); &#x2F;&#x2F; outputs 2</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;上面的写法等价于：</span><br><span class="line">first &#x3D; input[0];</span><br><span class="line">second &#x3D; input[1];</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;利用解构赋值交换变量：</span><br><span class="line">[first, second] &#x3D; [second, first];</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;函数参数解构：</span><br><span class="line">&#x2F;&#x2F;函数参数解构：</span><br><span class="line">function ff([first, second]: [number, number]) &#123; </span><br><span class="line">  console.log(first)</span><br><span class="line">  console.log(second)</span><br><span class="line">&#125;</span><br><span class="line">ff([1,2])</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;解构剩余参数：</span><br><span class="line">let [first, ...rest] &#x3D; [1, 2, 3, 4]</span><br><span class="line">console.log(first) &#x2F;&#x2F; 1</span><br><span class="line">console.log(rest) &#x2F;&#x2F; [2, 3, 4]</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;也可以忽略其它参数：</span><br><span class="line">let [first] &#x3D; [1, 2, 3, 4];</span><br><span class="line">console.log(first); &#x2F;&#x2F; outputs 1</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;或者跳过解构：</span><br><span class="line">let [, second, , fourth] &#x3D; [1, 2, 3, 4]</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;对象解构</span><br><span class="line">let o &#x3D; &#123;</span><br><span class="line">    a: &quot;foo&quot;,</span><br><span class="line">    b: 12,</span><br><span class="line">    c: &quot;bar&quot;</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F;let &#123; a, b &#125; &#x3D; o;</span><br><span class="line">&#x2F;&#x2F;let &#123;a, b&#125;: &#123;a: string, b: number&#125; &#x3D; o;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;你可以在对象里使用 ... 语法创建剩余变量：</span><br><span class="line">let &#123; a, ...passthrough &#125; &#x3D; o;</span><br><span class="line">let total &#x3D; passthrough.b + passthrough.c.length;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;属性解构重命名</span><br><span class="line">&#x2F;&#x2F;你也可以给属性以不同的名字：</span><br><span class="line">let &#123; a: newName1, b: newName2 &#125; &#x3D; o;</span><br></pre></td></tr></table></figure><h2 id="1-6-展开操作符-…"><a href="#1-6-展开操作符-…" class="headerlink" title="1.6 展开操作符 (…)"></a>1.6 展开操作符 (…)</h2><ul><li>展开数组</li><li>展开对象</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">let arr1 &#x3D; [1, 2, 3];</span><br><span class="line">let arr2 &#x3D; [4, 5, 6];</span><br><span class="line">let arr3 &#x3D; [...arr1, ...arr2];</span><br><span class="line"></span><br><span class="line">let obj1 &#x3D; &#123; a: 1, b: 2 &#125;;</span><br><span class="line">let obj2 &#x3D; &#123; c: 3 &#125;</span><br><span class="line">let obj3 &#x3D; &#123; ...obj1, ...obj2 &#125;;</span><br><span class="line">console.log(arr3,obj3)</span><br></pre></td></tr></table></figure><h2 id="1-7-函数"><a href="#1-7-函数" class="headerlink" title="1.7 函数"></a>1.7 函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;函数参数</span><br><span class="line">&#x2F;&#x2F;参数及返回值类型</span><br><span class="line">&#x2F;&#x2F;function 函数名字(参数1,参数2,参数3):函数返回值&#123;函数体&#125;</span><br><span class="line">function add(x: number, y: number): number &#123;</span><br><span class="line">    return x + y</span><br><span class="line">&#125;</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;可选参数</span><br><span class="line">function add(x: number, y?: number): number &#123;</span><br><span class="line">    return x + 10</span><br><span class="line">&#125;</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;默认参数</span><br><span class="line">function add(x: number, y: number &#x3D; 20): number &#123;</span><br><span class="line">    return x + y</span><br><span class="line">&#125;</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;剩余参数</span><br><span class="line">function sum(...args: number[]): number &#123;</span><br><span class="line">    let ret: number &#x3D; 0</span><br><span class="line">    args.forEach((item: number): void &#x3D;&gt; &#123;</span><br><span class="line">        ret +&#x3D; item</span><br><span class="line">    &#125;)</span><br><span class="line">    return ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(1, 2, 3)</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;箭头函数</span><br><span class="line">let add &#x3D; (x: number, y: number): number &#x3D;&gt; x + y</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;函数重载：重载是方法名字相同，而参数不同，返回类型可以相同也可以不同。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;参数类型不同：</span><br><span class="line">function disp(string):void; </span><br><span class="line">function disp(number):void;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;参数数量不同：</span><br><span class="line">function disp(n1:number):void; </span><br><span class="line">function disp(x:number,y:number):void;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;参数类型顺序不同：</span><br><span class="line">function disp(n1:number,s1:string):void; </span><br><span class="line">function disp(s:string,n:number):void;</span><br></pre></td></tr></table></figure><h2 id="1-8-联合类型"><a href="#1-8-联合类型" class="headerlink" title="1.8 联合类型"></a>1.8 联合类型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;联合类型（Union Types）可以通过管道(|)将变量设置多种类型，赋值时可以根据设置的类型来赋值。</span><br><span class="line"></span><br><span class="line">var val:string|number </span><br><span class="line">val &#x3D; 12 </span><br><span class="line">val &#x3D; &quot;Runoob&quot; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var arr:number[]|string[]; </span><br><span class="line">var i:number; </span><br><span class="line">arr &#x3D; [1,2,4] </span><br><span class="line">arr &#x3D; [&quot;Runoob&quot;,&quot;Google&quot;,&quot;Taobao&quot;]</span><br></pre></td></tr></table></figure><h2 id="1-9-类"><a href="#1-9-类" class="headerlink" title="1.9 类"></a>1.9 类</h2><h3 id="1-9-1-类的基本使用"><a href="#1-9-1-类的基本使用" class="headerlink" title="1.9.1 类的基本使用"></a>1.9.1 类的基本使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;基本示例</span><br><span class="line">class Person &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age: number;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;构造函数</span><br><span class="line">    constructor(name: string, age: number) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sayHello() &#123;</span><br><span class="line">        console.log(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let zs: Person &#x3D; new Person(&#39;张三&#39;, 18);</span><br></pre></td></tr></table></figure><h3 id="1-8-2-super关键字的使用"><a href="#1-8-2-super关键字的使用" class="headerlink" title="1.8.2 super关键字的使用"></a>1.8.2 super关键字的使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;继承</span><br><span class="line">class Animal &#123;</span><br><span class="line">    move(distanceInMeters: number &#x3D; 0) &#123;</span><br><span class="line">        console.log(&#96;Animal moved $&#123;distanceInMeters&#125;m.&#96;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Dog extends Animal &#123;</span><br><span class="line">    bark() &#123;</span><br><span class="line">        console.log(&#39;Woof! Woof!&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const dog &#x3D; new Dog();</span><br><span class="line">dog.bark();</span><br><span class="line">dog.move(10);</span><br><span class="line">dog.bark();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这个例子展示了最基本的继承：类从基类中继承了属性和方法。 这里， Dog是一个 派生类，它派生自 Animal 基类，通过 extends关键字。 派生类通常被称作 子类，基类通常被称作 超类。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;因为 Dog继承了 Animal的功能，因此我们可以创建一个 Dog的实例，它能够 bark()和 move()。</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;下面是一个更复杂的例子：</span><br><span class="line">class Animal &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    constructor(theName: string) &#123; </span><br><span class="line">        this.name &#x3D; theName; </span><br><span class="line">    &#125;</span><br><span class="line">    move(distanceInMeters: number &#x3D; 0) &#123;</span><br><span class="line">        console.log(&#96;$&#123;this.name&#125; moved $&#123;distanceInMeters&#125;m.&#96;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Snake extends Animal &#123;</span><br><span class="line">    constructor(name: string) &#123; </span><br><span class="line">        super(name); </span><br><span class="line">    &#125;</span><br><span class="line">    move(distanceInMeters &#x3D; 5) &#123;</span><br><span class="line">        console.log(&quot;Slithering...&quot;);</span><br><span class="line">        super.move(distanceInMeters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Horse extends Animal &#123;</span><br><span class="line">    constructor(name: string) &#123; </span><br><span class="line">        super(name); </span><br><span class="line">    &#125;</span><br><span class="line">    move(distanceInMeters &#x3D; 45) &#123;</span><br><span class="line">        console.log(&quot;Galloping...&quot;);</span><br><span class="line">        super.move(distanceInMeters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let sam &#x3D; new Snake(&quot;Sammy the Python&quot;);</span><br><span class="line">let tom: Animal &#x3D; new Horse(&quot;Tommy the Palomino&quot;);</span><br><span class="line"></span><br><span class="line">sam.move();</span><br><span class="line">tom.move(34);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;与前一个例子的不同点是，派生类包含了一个构造函数，它 必须调用 super()，它会执行基类的构造函数。 而且，在构造函数里访问 this的属性之前，我们 一定要调用 super()。 这个是TypeScript强制执行的一条重要规则。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这个例子演示了如何在子类里可以重写父类的方法。 Snake类和 Horse类都创建了 move方法，它们重写了从Animal继承来的 move方法，使得 move方法根据不同的类而具有不同的功能。 注意，即使 tom被声明为Animal类型，但因为它的值是 Horse，调用 tom.move(34)时，它会调用 Horse里重写的方法：</span><br><span class="line"></span><br><span class="line">Slithering...</span><br><span class="line">Sammy the Python moved 5m.</span><br><span class="line">Galloping...</span><br><span class="line">Tommy the Palomino moved 34m.</span><br></pre></td></tr></table></figure><h3 id="1-9-3-成员修饰符"><a href="#1-9-3-成员修饰符" class="headerlink" title="1.9.3 成员修饰符"></a>1.9.3 成员修饰符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;public 公共的</span><br><span class="line">class Animal &#123;</span><br><span class="line">    public name: string;</span><br><span class="line">    public constructor(theName: string) &#123; </span><br><span class="line">        this.name &#x3D; theName; </span><br><span class="line">    &#125;</span><br><span class="line">    public move(distanceInMeters: number) &#123;</span><br><span class="line">        console.log(&#96;$&#123;this.name&#125; moved $&#123;distanceInMeters&#125;m.&#96;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;private 私有的</span><br><span class="line">- 不能被外部访问，只能在类的内部访问使用</span><br><span class="line">- 私有成员不会被继承</span><br><span class="line"></span><br><span class="line">class Person &#123;</span><br><span class="line">  public name: string;</span><br><span class="line">  public age: number &#x3D; 18;</span><br><span class="line">  private type: string &#x3D; &#39;human&#39;</span><br><span class="line">  public constructor (name:string, age:number) &#123;</span><br><span class="line">    this.name &#x3D; name</span><br><span class="line">    this.age &#x3D; age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;protected 受保护的</span><br><span class="line">- 和 private 类似，但是可以被继承</span><br><span class="line"></span><br><span class="line">class Person &#123;</span><br><span class="line">    protected name: string;</span><br><span class="line">    constructor(name: string) &#123; </span><br><span class="line">        this.name &#x3D; name; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Employee extends Person &#123;</span><br><span class="line">    private department: string;</span><br><span class="line"></span><br><span class="line">    constructor(name: string, department: string) &#123;</span><br><span class="line">        super(name)</span><br><span class="line">        this.department &#x3D; department;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public getElevatorPitch() &#123;</span><br><span class="line">        return &#96;Hello, my name is $&#123;this.name&#125; and I work in $&#123;this.department&#125;.&#96;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let howard &#x3D; new Employee(&quot;Howard&quot;, &quot;Sales&quot;);</span><br><span class="line">console.log(howard.getElevatorPitch());</span><br><span class="line">console.log(howard.name); &#x2F;&#x2F; 错误</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;注意，我们不能在 Person类外使用 name，但是我们仍然可以通过 Employee类的实例方法访问，因为Employee是由 Person派生而来的。</span><br></pre></td></tr></table></figure><h3 id="1-9-4-getter和setter"><a href="#1-9-4-getter和setter" class="headerlink" title="1.9.4 getter和setter"></a>1.9.4 getter和setter</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    private _name:string;</span><br><span class="line"></span><br><span class="line">    constructor(name: string)</span><br><span class="line">    &#123;</span><br><span class="line">        this._name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    set name(value:string) &#123;this._name &#x3D; value;&#125;</span><br><span class="line">    get name() &#123;return this._name;&#125;</span><br><span class="line"></span><br><span class="line">    talk()</span><br><span class="line">    &#123;</span><br><span class="line">        alert(&quot;Hi, my name is &quot; + this.name + &quot;!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-9-5-静态成员"><a href="#1-9-5-静态成员" class="headerlink" title="1.9.5 静态成员"></a>1.9.5 静态成员</h3><ul><li>不需要实例化访问的成员称之为静态成员，即只能被类访问的成员</li><li><code>static</code> 关键字</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">class Person &#123;</span><br><span class="line">    &#x2F;&#x2F;静态变量</span><br><span class="line">    static country &#x3D; &quot;中国&quot;;</span><br><span class="line">    &#x2F;&#x2F;京塔方法</span><br><span class="line">    static sayhello() &#123; </span><br><span class="line">        console.log(&quot;hello&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    constructor () &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let p1 &#x3D; new Person();  </span><br><span class="line">let p2 &#x3D; new Person(); </span><br><span class="line"></span><br><span class="line">console.log(Person.country)  &#x2F;&#x2F;静态变量，直接通过类型来访问</span><br><span class="line">console.log(p1.country) &#x2F;&#x2F;错误</span><br></pre></td></tr></table></figure><h2 id="1-10-接口"><a href="#1-10-接口" class="headerlink" title="1.10 接口"></a>1.10 接口</h2><p>在面向对象编程中，接口是一种规范的定义，它定义了行为和动作规范，起到一种限制和规范的作用。<br>接口不关心状态数据，也不关心方法的实现细节，它只规定了一些属性和方法，而实现接口的类必须提供具体的信息。</p><h3 id="1-10-1-接口对类的规范"><a href="#1-10-1-接口对类的规范" class="headerlink" title="1.10.1 接口对类的规范"></a>1.10.1 接口对类的规范</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;定义一个人的接口</span><br><span class="line">interface Human &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age: number;</span><br><span class="line">    say(word: string): void;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;让老师类实现Human接口，老师类实现接口的时候必须提供接口的具体信息</span><br><span class="line">class Teacher implements Human&#123;</span><br><span class="line">    name &#x3D; &quot;老师&quot;;</span><br><span class="line">    age &#x3D; 38;</span><br><span class="line">    say(word: string): void &#123;</span><br><span class="line">        console.log(&quot;老师说&quot;+word)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;让学生类实现Human接口，学生类实现接口的时候必须提供接口的具体信息</span><br><span class="line">class Student implements Human&#123;</span><br><span class="line">    name &#x3D; &quot;学生&quot;;</span><br><span class="line">    age &#x3D; 18;</span><br><span class="line">    say(word: string): void &#123;</span><br><span class="line">         console.log(&quot;学生说&quot;+word)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-10-2-接口对对象的规范"><a href="#1-10-2-接口对对象的规范" class="headerlink" title="1.10.2 接口对对象的规范"></a>1.10.2 接口对对象的规范</h3><p>TypeScript 中的接口除了可用于对类的一部分行为进行抽象以外，也常用于对对象的形状（Shape）进行描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">interface Shape &#123;</span><br><span class="line">    head: string;</span><br><span class="line">    arm: string;</span><br><span class="line">&#125;</span><br><span class="line">interface Person &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age: number;</span><br><span class="line">    shape: Shape;</span><br><span class="line">    say(word: string): void;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let jack: Person &#x3D; &#123;</span><br><span class="line">    name: &#39;Jack&#39;,</span><br><span class="line">    age: 18,</span><br><span class="line">    shape: &#123;</span><br><span class="line">        head: &#39;head&#39;,</span><br><span class="line">        arm: &#39;arm&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    say(word: string) &#123;</span><br><span class="line">        console.log(word)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">jack.say(&#39;hi&#39;)</span><br></pre></td></tr></table></figure><h3 id="1-10-3-接口可选属性"><a href="#1-10-3-接口可选属性" class="headerlink" title="1.10.3 接口可选属性"></a>1.10.3 接口可选属性</h3><p>接口里的属性不全都是必需的。 有些是只在某些条件下存在，或者根本不存在。 可选属性在应用“option bags”模式时很常用，即给函数传入的参数对象中只有部分属性赋值了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">interface Person &#123;</span><br><span class="line">    gender: string,</span><br><span class="line">    age?: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let jack: Person &#x3D; &#123;</span><br><span class="line">    gender: &#39;Male&#39;</span><br><span class="line">    &#x2F;&#x2F; 可以不赋值 age 属性，因为是可选的</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-10-4-接口只读属性"><a href="#1-10-4-接口只读属性" class="headerlink" title="1.10.4 接口只读属性"></a>1.10.4 接口只读属性</h3><p>一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 <code>readonly</code>来指定只读属性:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">interface Person &#123;</span><br><span class="line">    readonly name: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let jack: Person &#x3D; &#123;</span><br><span class="line">    name: &#39;Jack&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jack.name &#x3D; &#39;Ivan&#39; &#x2F;&#x2F; 报错: name 是只读的</span><br><span class="line">readonly&#96; vs &#96;const</span><br></pre></td></tr></table></figure><ul><li>常量使用 const</li><li>对象属性使用 readonly</li></ul><h3 id="1-10-5-函数接口"><a href="#1-10-5-函数接口" class="headerlink" title="1.10.5 函数接口"></a>1.10.5 函数接口</h3><p>因为函数也是对象，所以我们也可以通过接口来对函数做“规定”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">interface Fn &#123;</span><br><span class="line">    (a: number, b: number): number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let add: Fn &#x3D; function(a: number, b: number): number &#123;</span><br><span class="line">    return a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(add(1, 2))</span><br></pre></td></tr></table></figure><h3 id="1-10-6-接口继承"><a href="#1-10-6-接口继承" class="headerlink" title="1.10.6 接口继承"></a>1.10.6 接口继承</h3><p>就像 ES6 的 class 一样，接口也可以做继承操作，效果就是会继承父接口的“规定”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">interface Animal &#123;</span><br><span class="line">    move(): void;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Human extends Animal &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let jack: Human &#x3D; &#123;</span><br><span class="line">    age: 18,</span><br><span class="line">    name: &#39;Jack&#39;,</span><br><span class="line">    move() &#123;</span><br><span class="line">        console.log(&#39;move&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-11-命名空间"><a href="#1-11-命名空间" class="headerlink" title="1.11 命名空间"></a>1.11 命名空间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;命名空间就是内部模块，目的就是解决重名问题。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;a.ts  声明命名空间</span><br><span class="line">&#x2F;&#x2F;TypeScript 的命名空间只对外暴露需要在外部访问的对象，命名空间内的对象通过 export 关键字对外暴露</span><br><span class="line">namespace Utils &#123;</span><br><span class="line">  export interface IPerson &#123;</span><br><span class="line">      name: string;</span><br><span class="line">      age: number;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;my.ts  使用命名空间</span><br><span class="line">&#x2F;&#x2F; reference 引用命名空间(可以加也可以不加)</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;reference path&#x3D;&quot;a.ts&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">const me: Utils.IPerson &#x3D; &#123;</span><br><span class="line">  name: &#39;funlee&#39;,</span><br><span class="line">  age: 18</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(me); &#x2F;&#x2F; &#123;name: &#39;funlee&#39;, age: 18&#125;</span><br></pre></td></tr></table></figure><h2 id="1-12-模块"><a href="#1-12-模块" class="headerlink" title="1.12 模块"></a>1.12 模块</h2><p>模块是在其自身的作用域里执行，并不是在全局作用域，这意味着定义在模块里面的变量、函数和类等在模块外部是不可见的，除非明确地使用 export 导出它们。类似地，我们必须通过 import 导入其他模块导出的变量、函数、类等。</p><p>两个模块之间的关系是通过在文件级别上使用 import 和 export 建立的(其实就是ES6的模块化语法)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;导出模块</span><br><span class="line">export var num &#x3D; 123;</span><br><span class="line">export var str &#x3D; &quot;你好&quot;;</span><br><span class="line">export function say()&#123;&#125;;</span><br><span class="line"></span><br><span class="line">var title &#x3D; &quot;标题&quot;;</span><br><span class="line">export default title;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;引入模块</span><br><span class="line">import title,&#123;num,str,say&#125; from &#39;.&#x2F;a&#39;</span><br><span class="line">console.log(title,str,say)</span><br></pre></td></tr></table></figure><h2 id="1-13-声明文件"><a href="#1-13-声明文件" class="headerlink" title="1.13 声明文件"></a>1.13 声明文件</h2><blockquote><p>d.ts为声明文件 主要用作类型的声明</p></blockquote><ul><li>在d.ts使用了declare，表示全局声明类型，需要结合tsconfig.json一起使用才能<br>有效果。 (使用方式：类似于命名空间)</li><li>或者使用export的方式，在普通ts中将d.ts导入(使用方式：类似于模块)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;data.d.ts    注意：只有声明没有实现</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;声明一个类型</span><br><span class="line">declare type StringFunc &#x3D; () &#x3D;&gt; string;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;声明一个命名空间</span><br><span class="line">declare namespace API &#123;</span><br><span class="line">  &#x2F;&#x2F;导出CurrentUser接口类型</span><br><span class="line">  export interface CurrentUser &#123;</span><br><span class="line">    avatar?: string;</span><br><span class="line">    name?: string;</span><br><span class="line">    title?: string;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-14-作业"><a href="#1-14-作业" class="headerlink" title="1.14 作业"></a>1.14 作业</h2><p>写出下列ts代码的含义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">Typescript</span><br><span class="line">&#x2F;&#x2F;导出一个函数 函数名字是defineConfig，函数参数是config，参数类型是IConfigFromPlugins或者IConfig，返回值是IConfigFromPlugins或者IConfig</span><br><span class="line">export declare function defineConfig(config: IConfigFromPlugins | IConfig): IConfigFromPlugins | IConfig;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;声明一个类型叫OverlayFunc，该类型是一个函数，该函数的返回值是ReactNode</span><br><span class="line">declare type OverlayFunc &#x3D; () &#x3D;&gt; React.ReactNode;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;导出一个类型，该类型叫SiderTheme，他的值是light或者dark</span><br><span class="line">export type SiderTheme &#x3D; &#39;light&#39; | &#39;dark&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;声明一个常量，名字叫columns，他的类型是ProColumns的数组，数组中的元素是TableListItem</span><br><span class="line">const columns: ProColumns&lt;TableListItem&gt;[] &#x3D; []</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;声明一个常量，名字叫LoginMessage，他的类型是React.FC，React.FC中接收&#123;content: string&#125;类型的数据。LoginMessage的值是一个箭头函数，该函数通过解构赋值或者content作为函数的入参，函数没有返回值</span><br><span class="line">const LoginMessage: React.FC&lt;&#123;</span><br><span class="line">  content: string;</span><br><span class="line">&#125;&gt; &#x3D; (&#123; content &#125;) &#x3D;&gt; ()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;type的 | 和 &amp;</span><br><span class="line">type Env1 &#x3D; &#39;prod&#39; | &#39;test&#39; | &#39;dev&#39;;</span><br><span class="line">type Env2 &#x3D; &#39;prod&#39; | &#39;boe&#39; | &#39;ppe&#39;;</span><br><span class="line"></span><br><span class="line">type EnvUnion &#x3D; Env1 | Env2; &#x2F;&#x2F; &#39;prod&#39; | &#39;test&#39; | &#39;dev&#39; | &#39;boe&#39; | &#39;ppe&#39;  取并集</span><br><span class="line">type EnvInter &#x3D; Env1 &amp; Env2; &#x2F;&#x2F; &#39;prod&#39;   取交集</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;声明一个类型叫Partial，主要作用就是将T中的每一个键可选</span><br><span class="line">type Partial&lt;T&gt; &#x3D; &#123;</span><br><span class="line">  [P in keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;声明一个类型叫Pick 主要作用选择T中的符合条件的属性</span><br><span class="line">&#x2F;&#x2F;https:&#x2F;&#x2F;blog.csdn.net&#x2F;weixin_34376986&#x2F;article&#x2F;details&#x2F;93167453</span><br><span class="line">type Pick&lt;T, K extends keyof T&gt; &#x3D; &#123;</span><br><span class="line">    [P in K]: T[P];</span><br><span class="line">&#125;;</span><br><span class="line">                 </span><br><span class="line">&#x2F;&#x2F;判断T是不是继承U，如果是则取never类型，否则取T类型本身</span><br><span class="line">type Exclude&lt;T, U&gt; &#x3D; T extends U ? never : T;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;判断T是不是继承U，如果是则取T类型，否则取never类型</span><br><span class="line">type Extract&lt;T, U&gt; &#x3D; T extends U ? T : never;</span><br><span class="line">          </span><br><span class="line">&#x2F;&#x2F;Omit 主要作用 选择T中除了K之外的其他属性          </span><br><span class="line">type Omit&lt;T, K extends keyof any&gt; &#x3D; Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;声明一个常量REACT_APP_ENV，他的值是test  dev  pre 或者false中的任意一个</span><br><span class="line">declare const REACT_APP_ENV: &#39;test&#39; | &#39;dev&#39; | &#39;pre&#39; | false;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TypeScript&quot;&gt;&lt;a href=&quot;#TypeScript&quot; class=&quot;headerlink&quot; title=&quot;TypeScript&quot;&gt;&lt;/a&gt;TypeScript&lt;/h1&gt;&lt;h2 id=&quot;1-1-TS简介&quot;&gt;&lt;a href=&quot;#1-1-TS简介&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>js三大家族</title>
    <link href="http://example.com/2021/04/01/JS%E4%B8%89%E5%A4%A7%E5%AE%B6%E6%97%8F/"/>
    <id>http://example.com/2021/04/01/JS%E4%B8%89%E5%A4%A7%E5%AE%B6%E6%97%8F/</id>
    <published>2021-04-01T02:36:26.000Z</published>
    <updated>2021-03-12T07:19:06.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-1-三大家族和一个事件对象"><a href="#1-1-三大家族和一个事件对象" class="headerlink" title="1.1 三大家族和一个事件对象"></a>1.1 三大家族和一个事件对象</h1><p>三大家族（offset/scroll/client）</p><p>事件对象/event （事件被触动时，鼠标和键盘的状态）（通过属性控制）</p><h1 id="1-2-Offset家族简介"><a href="#1-2-Offset家族简介" class="headerlink" title="1.2 Offset家族简介"></a>1.2 Offset家族简介</h1><p>offset这个单词本身是–偏移，补偿，位移的意思。</p><p>js中有一套方便的获取元素尺寸的办法就是offset家族；</p><p>offsetWidth和offsetHight以及offsetLeft和offsetTop以及offsetParent</p><p>共同组成了offset家族。</p><h3 id="1-2-1-offsetWidth和offsetHight-（检测盒子自身宽高-padding-border）"><a href="#1-2-1-offsetWidth和offsetHight-（检测盒子自身宽高-padding-border）" class="headerlink" title="1.2.1 offsetWidth和offsetHight （检测盒子自身宽高+padding+border）"></a>1.2.1 offsetWidth和offsetHight （检测盒子自身宽高+padding+border）</h3><p>这两个属性，他们绑定在了所有的节点元素上。获取之后，只要调用这两个属性，我们就能够获取元素节点的宽和高。</p><p>offset宽/高 = 盒子自身的宽/高 + padding+border；</p><p>offsetWidth =width+padding+border；</p><p>offsetHeight =Height+padding+border；</p><h3 id="1-2-2-offsetLeft和offsetTop-（检测距离父盒子有定位的左-上面的距离）"><a href="#1-2-2-offsetLeft和offsetTop-（检测距离父盒子有定位的左-上面的距离）" class="headerlink" title="1.2.2 offsetLeft和offsetTop （检测距离父盒子有定位的左/上面的距离）"></a>1.2.2 offsetLeft和offsetTop （检测距离父盒子有定位的左/上面的距离）</h3><p>返回距离上级盒子（带有定位）左边s的位置</p><p>如果父级都没有定位则以body为准</p><p>offsetLeft 从父亲的padding 开始算,父亲的border 不算。</p><p>在父盒子有定位的情况下，offsetLeft == style.left(去掉px)</p><h3 id="1-2-3-offsetParent-（检测父系盒子中带有定位的父盒子节点）"><a href="#1-2-3-offsetParent-（检测父系盒子中带有定位的父盒子节点）" class="headerlink" title="1.2.3 offsetParent （检测父系盒子中带有定位的父盒子节点）"></a>1.2.3 offsetParent （检测父系盒子中带有定位的父盒子节点）</h3><p>1、返回改对象的父级 （带有定位）</p><p> 如果当前元素的父级元素没有进行CSS定位 （position为absolute或 relative，fixed）， offsetParent为body。</p><p>2、如果当前元素的父级元素中有CSS定位 （position为absolute或 relative，fixed）， offsetParent取最近的那个父级元素。</p><h1 id="1-3-offsetLeft和style-left区别"><a href="#1-3-offsetLeft和style-left区别" class="headerlink" title="1.3 offsetLeft和style.left区别"></a>1.3 offsetLeft和style.left区别</h1><p>一、最大区别在于offsetLeft可以返回没有定位盒子的距离左侧的位置。</p><p>而 style.left不可以</p><p>二、offsetTop 返回的是数字，而 style.top 返回的是字符串，除了数字外还带有单位：px。</p><p>三、offsetTop 只读，而 style.top 可读写。（只读是获取值，可写是赋值）</p><p>四、如果没有给 HTML 元素指定过 top 样式，则style.top 返回的是空字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">style.left在&#x3D;的左边和右边还不一样。（左边的时候是属性，右边的时候是值）</span><br></pre></td></tr></table></figure><h1 id="Scroll家族组成"><a href="#Scroll家族组成" class="headerlink" title="Scroll家族组成"></a>Scroll家族组成</h1><p>ScrollWidth和scrollHeight（不包括border）</p><p>检测盒子的宽高。（调用者：节点元素。属性。）</p><p>盒子内容的宽高。（如果有内容超出了，显示内容的高度）</p><p>IE567可以比盒子小。 IE8+火狐谷歌不能比盒子小</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="scrollLeft和scrollTop"><a href="#scrollLeft和scrollTop" class="headerlink" title="scrollLeft和scrollTop"></a>scrollLeft和scrollTop</h2><p>网页，被浏览器遮挡的头部和左边部分。</p><p>被卷去的头部和左边部分。</p><p>兼容性问题</p><p>一、未声明 DTD（谷歌只认识他）</p><p>document.body.scrollTop</p><p>二、已经声明DTD（IE678只认识他）</p><p>document.documentElement.scrollTop</p><p>三、火狐/谷歌/ie9+以上支持的</p><p>window.pageYOffset</p><h2 id="兼容写法"><a href="#兼容写法" class="headerlink" title="兼容写法"></a>兼容写法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">var aaa &#x3D; window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;</span><br><span class="line">Code</span><br><span class="line">var aaa &#x3D; document.documentElement.scrollTop + document.body.scrollTop;</span><br></pre></td></tr></table></figure><p>事件event</p><h2 id="1-1-事件对象的获取（event的获取）"><a href="#1-1-事件对象的获取（event的获取）" class="headerlink" title="1.1 事件对象的获取（event的获取）"></a>1.1 事件对象的获取（event的获取）</h2><p>IE678中，window.event</p><p>在火狐谷歌中，event或者，在事件绑定的函数中，加参，这个参数就是event.</p><p>Box.onclick = function (aaa){ aaa就是event }</p><h2 id="1-2-兼容获取方式有两种："><a href="#1-2-兼容获取方式有两种：" class="headerlink" title="1.2 兼容获取方式有两种："></a>1.2 兼容获取方式有两种：</h2><p>不写参数直接使用event;</p><p>写参数，但是为event….var event = event || window.event;(主要用这种)</p><h2 id="1-3-event内容重要内容"><a href="#1-3-event内容重要内容" class="headerlink" title="1.3 event内容重要内容"></a>1.3 event内容重要内容</h2><p><a href="https://img-blog.csdn.net/20170330141538969?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1ppb3M=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"><img src="https://img-blog.csdn.net/20170330141538969?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1ppb3M=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></a></p><p>PageY/pageX: 鼠标位于整个网页页面的顶部和左侧部分的距离。（页面）</p><p>ScreenY/screenX: 鼠标位于屏幕的上方和左侧的距离。（屏幕）</p><p>ClientX/clientY: 鼠标位于浏览器的左侧和顶部的距离。（浏览器大小和位置）</p><h2 id="1-1-PageY和pageX的兼容写法（很重要）"><a href="#1-1-PageY和pageX的兼容写法（很重要）" class="headerlink" title="1.1 PageY和pageX的兼容写法（很重要）"></a>1.1 PageY和pageX的兼容写法（很重要）</h2><p>在页面位置就等于 = 看得见的+看不见的</p><p>pageY/pageX=event.clientY/clientX+scroll().top/scroll().left</p><h1 id="client家族"><a href="#client家族" class="headerlink" title="client家族"></a>client家族</h1><h2 id="1-1-主要成员"><a href="#1-1-主要成员" class="headerlink" title="1.1 主要成员"></a>1.1 主要成员</h2><p>1、clientWidth 获取网页可视区域宽度（两种用法）</p><p>clientHeight 获取网页可视区域高度（两种用法）</p><p>调用者不同，意义不同：</p><p> 盒子调用： 指盒子本身。</p><p> body/html调用： 可视区域大小。</p><p>2、clientX 鼠标距离可视区域左侧距离（event调用）</p><p>clientY 鼠标距离可视区域上侧距离（event调用）</p><p>3、clientTop/clientLeft 盒子的border宽高</p><h2 id="1-2-三大家族区别（三大家族总结）"><a href="#1-2-三大家族区别（三大家族总结）" class="headerlink" title="1.2 三大家族区别（三大家族总结）"></a>1.2 三大家族区别（三大家族总结）</h2><h3 id="1-2-1-Width和height"><a href="#1-2-1-Width和height" class="headerlink" title="1.2.1 Width和height"></a>1.2.1 Width和height</h3><p>clientWidth = width + padding</p><p>clientHeight = height + padding</p><p>offsetWidth = width + padding + border</p><p>offsetHeight = height + padding + border</p><p>scrollWidth = 内容宽度（不包含border）width + padding</p><p>scrollHeight = 内容高度（不包含border）</p><h3 id="1-2-2-top和left"><a href="#1-2-2-top和left" class="headerlink" title="1.2.2 top和left"></a>1.2.2 top和left</h3><p>offsetTop/offsetLeft：</p><p> 调用者：任意元素。(盒子为主)</p><p> 作用：距离父系盒子中带有定位的距离。</p><p>scrollTop/scrollLeft:(盒子也可以调用，必须有滚动条)</p><p> 调用者：document.body.scrollTop/…..(window)</p><p> 作用：浏览器无法显示的部分（被卷去的部分）。</p><p>clientY/clientX:（clientTop/clientLeft 值的是border）</p><p> 调用者：event.clientX(event)</p><p> 作用：鼠标距离浏览器可视区域的距离（左、上）。</p><p>// width和height<br>// offset带border<br>// scroll不带border，内容的宽高<br>// client不带border</p><p>// top和left<br>// offset距离父系盒子带有定位的盒子之间的距离<br>// scroll被卷去的部分的距离<br>// clientborder的宽高</p><p>//clientX和clientY<br>// event调用，鼠标距离浏览器的可视区域的距离</p><h2 id="1-3-client家族特殊用法之-检浏览器宽-高度-可视区域"><a href="#1-3-client家族特殊用法之-检浏览器宽-高度-可视区域" class="headerlink" title="1.3 client家族特殊用法之:检浏览器宽/高度(可视区域)"></a>1.3 client家族特殊用法之:检浏览器宽/高度(可视区域)</h2><p><a href="https://img-blog.csdn.net/20170331094037076?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1ppb3M=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"><img src="https://img-blog.csdn.net/20170331094037076?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1ppb3M=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></a></p><h2 id="1-4-Onresize事件"><a href="#1-4-Onresize事件" class="headerlink" title="1.4 Onresize事件"></a>1.4 Onresize事件</h2><p>只要浏览器的大小改变，哪怕1像素，都会触动这个事件。</p><h2 id="1-5-案例：根据浏览器可视区域大小，给定背景色"><a href="#1-5-案例：根据浏览器可视区域大小，给定背景色" class="headerlink" title="1.5 案例：根据浏览器可视区域大小，给定背景色"></a>1.5 案例：根据浏览器可视区域大小，给定背景色</h2><h2 id="1-6-事件总结"><a href="#1-6-事件总结" class="headerlink" title="1.6 事件总结"></a>1.6 事件总结</h2><p>区分：</p><p>1.window.onscroll 屏幕滑动</p><p>2.window.onresize 浏览器大小变化</p><p>3.window.onload 页面加载完毕</p><p>4.div.onmousemove 鼠标在盒子上移动</p><p> （注意：不是盒子移动！！！）</p><p>5.onmouseup/onmousedown == onclick</p><h2 id="1-7-获得屏幕宽高"><a href="#1-7-获得屏幕宽高" class="headerlink" title="1.7 获得屏幕宽高"></a>1.7 获得屏幕宽高</h2><p>window.screen.width</p><p>分辨率是屏幕图像的精密度，指显示器所能显示的像素有多少。</p><p>我们的电脑一般：</p><p>横向1280个像素点，</p><p>纵向960个像素点。</p><p>我们看电影的时候是满屏和半屏的，就是这。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-1-三大家族和一个事件对象&quot;&gt;&lt;a href=&quot;#1-1-三大家族和一个事件对象&quot; class=&quot;headerlink&quot; title=&quot;1.1 三大家族和一个事件对象&quot;&gt;&lt;/a&gt;1.1 三大家族和一个事件对象&lt;/h1&gt;&lt;p&gt;三大家族（offset/scroll</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vue中路由跳转view却不更新的问题与解决办法</title>
    <link href="http://example.com/2021/03/11/vue%E4%B8%AD%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%ACview%E5%8D%B4%E4%B8%8D%E6%9B%B4%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://example.com/2021/03/11/vue%E4%B8%AD%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%ACview%E5%8D%B4%E4%B8%8D%E6%9B%B4%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</id>
    <published>2021-03-11T14:20:48.000Z</published>
    <updated>2021-03-11T14:37:14.417Z</updated>
    
    <content type="html"><![CDATA[<p>一般情况下路由从<code>/myrouter</code>跳转至<code>/yourrouter</code>时，view会发生更新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">若遇到&#x2F;products&#x2F;:id这样只改变id号的场景。就不会发生更新</span><br></pre></td></tr></table></figure><p>情况如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.js</span><br><span class="line">&#123;</span><br><span class="line">    path: &quot;&#x2F;products&#x2F;:id&quot;,</span><br><span class="line">    name: &quot;product&quot;,</span><br><span class="line">    components: Product</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在路由<code>/products/:id</code>对应一个组件<code>Product.vue</code>,组件中有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;test1&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;p&gt;msg: &#123;&#123;msg&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    mounted()&#123;</span><br><span class="line">        this.init(this.$router.history.current.params.id);</span><br><span class="line">    &#125;，</span><br><span class="line">    methods:&#123;</span><br><span class="line">        init(id)&#123;</span><br><span class="line">            this.msg &#x3D; this.$router.history.current.params.id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>为什么上述情况会导致view不更新呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">答：由于router-view是复用的，单纯的改变id号并不会刷新router-view。追根揭底就是因为data没有变化，只要路由跳转时触发 init() 函数来改变data就可以了。</span><br></pre></td></tr></table></figure><p>解决办法：</p><ol><li><p>用 :key 来阻止“复用”</p><p>在父组件中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view :key&#x3D;&quot;key&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">computed: &#123;</span><br><span class="line">    key() &#123;</span><br><span class="line">        return this.$route.name !&#x3D;&#x3D; undefined? this.$route.name +new Date(): this.$route +new Date()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种办法实质上是让每次路由跳转时重新构建该组件，我们在它的生命周期中写一个打印语句就能看出来。</p></li><li><p>通过 watch 监听路由</p><p>在子组件中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123; &#x2F;&#x2F;通过watch来监听路由变化</span><br><span class="line">    &#39;$route&#39;: function () &#123;</span><br><span class="line">        this.init(this.$router.history.current.params.id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过 <code>vue-router</code>的钩子函数 <code>beforeRouteEnter</code> <code>beforeRouteUpdate</code> <code>beforeRouteLeave</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteEnter (to, from, next) &#123;</span><br><span class="line">   &#x2F;&#x2F; 在渲染该组件的对应路由被 confirm 前调用</span><br><span class="line">   &#x2F;&#x2F; 不！能！获取组件实例 &#96;this&#96;</span><br><span class="line">   &#x2F;&#x2F; 因为当钩子执行前，组件实例还没被创建</span><br><span class="line">&#125;,</span><br><span class="line">beforeRouteUpdate (to, from, next) &#123;</span><br><span class="line">   &#x2F;&#x2F; 在当前路由改变，但是该组件被复用时调用</span><br><span class="line">   &#x2F;&#x2F; 举例来说，对于一个带有动态参数的路径 &#x2F;foo&#x2F;:id，在 &#x2F;foo&#x2F;1 和 &#x2F;foo&#x2F;2 之间跳转的时候，</span><br><span class="line">   &#x2F;&#x2F; 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span><br><span class="line">   &#x2F;&#x2F; 可以访问组件实例 &#96;this&#96;</span><br><span class="line">&#125;,</span><br><span class="line">beforeRouteLeave (to, from, next) &#123;</span><br><span class="line">   &#x2F;&#x2F; 导航离开该组件的对应路由时调用</span><br><span class="line">   &#x2F;&#x2F; 可以访问组件实例 &#96;this&#96;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一般情况下路由从&lt;code&gt;/myrouter&lt;/code&gt;跳转至&lt;code&gt;/yourrouter&lt;/code&gt;时，view会发生更新。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>工具函数</title>
    <link href="http://example.com/2021/03/11/%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2021/03/11/%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0/</id>
    <published>2021-03-11T14:10:18.000Z</published>
    <updated>2021-03-11T14:13:38.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、数组去重"><a href="#1、数组去重" class="headerlink" title="1、数组去重"></a>1、数组去重</h2><p>原理：利用Js中对象的属性名不可重复的特点对数组进行去重操作</p><p>若有数组:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr &#x3D; [&#39;a&#39;,&#39;v&#39;,&#39;a&#39;,&#39;b&#39;,&#39;e&#39;,&#39;b&#39;,&#39;w&#39;,&#39;x&#39;]</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var object &#x3D; &#123;&#125;;</span><br><span class="line">    for(var key in arr)</span><br><span class="line">        if(!object[arr[key]])</span><br><span class="line">            object[arr[key]] &#x3D; 1;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Object</span><br><span class="line">    a: 1</span><br><span class="line">    b: 1</span><br><span class="line">    e: 1</span><br><span class="line">    v: 1</span><br><span class="line">    w: 1</span><br><span class="line">    x: 1</span><br></pre></td></tr></table></figure><p>此时object对象中的属性名便是去重后的结果。</p><h2 id="2、在字符串中找到所有的字符-o，并返回其下标"><a href="#2、在字符串中找到所有的字符-o，并返回其下标" class="headerlink" title="2、在字符串中找到所有的字符 o，并返回其下标"></a>2、在字符串中找到所有的字符 o，并返回其下标</h2><p>若有字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var s &#x3D; &#39;oresdfrgosdfsdo&#39;</span><br><span class="line"> &lt;script&gt;  </span><br><span class="line">    var index &#x3D; -1;</span><br><span class="line">    while(true)&#123;</span><br><span class="line">        index &#x3D; s.indexOf(&quot;o&quot;,index+1)</span><br><span class="line">        if(index &#x3D;&#x3D; -1)</span><br><span class="line">            break;</span><br><span class="line">            console.log(index);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">8</span><br><span class="line">14</span><br></pre></td></tr></table></figure><h2 id="3、返回给定参数的数据类型"><a href="#3、返回给定参数的数据类型" class="headerlink" title="3、返回给定参数的数据类型"></a>3、返回给定参数的数据类型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">*    getType</span><br><span class="line">*    @description 返回给定参数的数据类型</span><br><span class="line">*    @param &#123;Any&#125; 需要做类型检测的参数</span><br><span class="line">*    @return &#123;String&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line">function getType(args)&#123;</span><br><span class="line">    if (typeof arg &#x3D;&#x3D;&#x3D; &#39;number&#39; &amp;&amp; isNaN(arg)) return &#39;NaN&#39;;</span><br><span class="line">    let reg &#x3D; &#x2F;\s(\w&#123;1,&#125;)\]$&#x2F;g;</span><br><span class="line">    let str &#x3D; Object.prototype.toString.call(args);</span><br><span class="line">    let type &#x3D; reg.exec(str)[1];</span><br><span class="line">    return type</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; 1;</span><br><span class="line">var b &#x3D; false;</span><br><span class="line">var c &#x3D; &#39;ss&#39;;</span><br><span class="line">var d;</span><br><span class="line">var e &#x3D; null;</span><br><span class="line">var f &#x3D; NaN;</span><br><span class="line">var g &#x3D; &#123;&#125;;</span><br><span class="line">var h &#x3D; () &#x3D;&gt; &#123;&#125;</span><br><span class="line">var i &#x3D; [];</span><br><span class="line">console.log(checkType(a));</span><br><span class="line">console.log(checkType(b));</span><br><span class="line">console.log(checkType(c));</span><br><span class="line">console.log(checkType(d));</span><br><span class="line">console.log(checkType(e));</span><br><span class="line">console.log(checkType(f));</span><br><span class="line">console.log(checkType(g));</span><br><span class="line">console.log(checkType(h));</span><br><span class="line">console.log(checkType(i));</span><br></pre></td></tr></table></figure><h2 id="4、什么时候-val-1-amp-amp-val-2-amp-amp-val-3-为-true？"><a href="#4、什么时候-val-1-amp-amp-val-2-amp-amp-val-3-为-true？" class="headerlink" title="4、什么时候 val === 1 &amp;&amp; val === 2 &amp;&amp; val === 3 为 true？"></a>4、什么时候 val === 1 &amp;&amp; val === 2 &amp;&amp; val === 3 为 true？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var i&#x3D; 0;</span><br><span class="line">Object.defineProperty(window,&#39;val&#39;,&#123;</span><br><span class="line">    get:function()&#123;</span><br><span class="line">        return ++i;</span><br><span class="line">    &#125;,</span><br><span class="line">    set:function()&#123;</span><br><span class="line">        console.log(&#39;set&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(val &#x3D;&#x3D;&#x3D; 1 &amp;&amp; val &#x3D;&#x3D;&#x3D; 2 &amp;&amp; val &#x3D;&#x3D;&#x3D; 3);</span><br></pre></td></tr></table></figure><h2 id="5、计算一段文本的宽度"><a href="#5、计算一段文本的宽度" class="headerlink" title="5、计算一段文本的宽度"></a>5、计算一段文本的宽度</h2><p><strong>React</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @name: text-width ;</span><br><span class="line"> * @author: admin ;</span><br><span class="line"> * @description: 获取字符串宽度 ;</span><br><span class="line"> * *&#x2F;</span><br><span class="line">import memoize from &#39;lodash&#x2F;memoize&#39;;</span><br><span class="line">export default memoize((text, fontSize, options) &#x3D;&gt; &#123;</span><br><span class="line">    const &#123;fontFamily, fontWeight&#125; &#x3D; Object.assign(&#123;fontFamily: &#39;Arial&#39;, fontWeight: &#39;normal&#39;&#125;, options);</span><br><span class="line">    const canvas &#x3D; document.createElement(&#39;canvas&#39;),</span><br><span class="line">          ctx &#x3D; canvas.getContext(&#39;2d&#39;);</span><br><span class="line">    ctx.font &#x3D; &#96;$&#123;fontSize&#125; $&#123;fontFamily&#125; $&#123;fontWeight&#125;&#96;;</span><br><span class="line">    return ctx.measureText(text).width;</span><br><span class="line">&#125;, (text, fontSize, options) &#x3D;&gt; &#123;</span><br><span class="line">    const obj &#x3D; Object.assign(&#123;&#125;, options, &#123;text, fontSize&#125;);</span><br><span class="line">    return Object.keys(obj).map((key) &#x3D;&gt; &#96;$&#123;key&#125;-$&#123;obj[key]&#125;&#96;).join(&#39;,&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、数组去重&quot;&gt;&lt;a href=&quot;#1、数组去重&quot; class=&quot;headerlink&quot; title=&quot;1、数组去重&quot;&gt;&lt;/a&gt;1、数组去重&lt;/h2&gt;&lt;p&gt;原理：利用Js中对象的属性名不可重复的特点对数组进行去重操作&lt;/p&gt;
&lt;p&gt;若有数组:&lt;/p&gt;
&lt;figur</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>计算属性computed</title>
    <link href="http://example.com/2021/03/11/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7computed/"/>
    <id>http://example.com/2021/03/11/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7computed/</id>
    <published>2021-03-11T14:00:19.000Z</published>
    <updated>2021-03-12T07:10:30.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><h3 id="什么是计算属性"><a href="#什么是计算属性" class="headerlink" title="什么是计算属性"></a>什么是计算属性</h3><p>我们知道，在模板中可以直接通过插值语法显示一些data中的数据</p><p>但是在某些情况下，我们可能需要对数据进行一些转化后再显示，或者需要将多个数据结合起来进行显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">比如我们有&#96;firstName&#96;和&#96;lastName&#96;两个变量，我们需要显示完整的名称</span><br><span class="line">但是如果多个地方都需要显示完整的名称，我们就需要写多个&#96;&#123;&#123;firstName&#125;&#125;&#96;和&#96;&#123;&#123;lastName&#125;&#125;&#96;</span><br></pre></td></tr></table></figure><p>我们可以将上面的代码换成计算属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我们发现计算属性是写在实例的&#96;computed&#96;选项中的</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName+&#x27;  &#x27;+lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">`#app`</span>,</span></span><br><span class="line">            data: &#123; </span><br><span class="line"><span class="javascript">                firstName: <span class="string">&#x27;Lebron&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                lastName:<span class="string">&#x27;James&#x27;</span> </span></span><br><span class="line">            &#125;,</span><br><span class="line">            computed:&#123;</span><br><span class="line"><span class="javascript">                <span class="comment">/* 计算属性，一般不用动词 */</span></span></span><br><span class="line"><span class="javascript">                fullName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27;  &#x27;</span> + <span class="built_in">this</span>.lastName</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                getFullName ()&#123;</span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27;  &#x27;</span> + <span class="built_in">this</span>.lastName</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>计算属性不要加小括号()</p><h3 id="计算属性的复杂操作"><a href="#计算属性的复杂操作" class="headerlink" title="计算属性的复杂操作"></a>计算属性的复杂操作</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>总价格:&#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">`#app`</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                books: [</span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">id</span>: <span class="number">110</span>, <span class="attr">name</span>: <span class="string">&#x27;Unix编程艺术&#x27;</span>, <span class="attr">price</span>: <span class="number">119</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">id</span>: <span class="number">111</span>, <span class="attr">name</span>: <span class="string">&#x27;代码大全&#x27;</span>, <span class="attr">price</span>: <span class="number">105</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">id</span>: <span class="number">112</span>, <span class="attr">name</span>: <span class="string">&#x27;深入理解计算机原理&#x27;</span>, <span class="attr">price</span>: <span class="number">98</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">id</span>: <span class="number">113</span>, <span class="attr">name</span>: <span class="string">&#x27;现代操作系统&#x27;</span>, <span class="attr">price</span>: <span class="number">87</span> &#125;,</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            computed: &#123;</span><br><span class="line"><span class="javascript">                totalPrice: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> result  =<span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.books.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                        result += <span class="built_in">this</span>.books[i].price</span></span><br><span class="line">                    &#125;</span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> result</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="计算属性的setter和getter"><a href="#计算属性的setter和getter" class="headerlink" title="计算属性的setter和getter"></a>计算属性的<code>setter</code>和<code>getter</code></h3><p>我们之前在计算属性的基础操作中使用了一个方法<code>fullName</code>,如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fullName:function()&#123;</span><br><span class="line">                    return this.firstName + &#39;  &#39; + this.lastName</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><p>其实是这样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">                fullName:&#123;</span><br><span class="line">                    set:function()&#123;</span><br><span class="line"></span><br><span class="line">                    &#125;,</span><br><span class="line">                    get:function()&#123;</span><br><span class="line">                        return this.firstName + &#39;  &#39; + this.lastName</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>其中<code>set</code>属性是不需要实现的，我们不希望计算属性有<code>set</code>属性，其实计算属性是个只读属性，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">                fullName:&#123;</span><br><span class="line">                    get:function()&#123;</span><br><span class="line">                        return this.firstName + &#39;  &#39; + this.lastName</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>我们方便使用就使用第一种方式</p><p><strong>计算属性的方法，即使调用多次，计算属性也只是调用了一次，内部是有缓存的</strong>，如果方法的返回结果不变，就不会重复调用多次，直接调用缓存。</p><p><strong>使用<code>methods</code>的时候，调用几次，函数就会调用几次</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计算属性&quot;&gt;&lt;a href=&quot;#计算属性&quot; class=&quot;headerlink&quot; title=&quot;计算属性&quot;&gt;&lt;/a&gt;计算属性&lt;/h1&gt;&lt;h3 id=&quot;什么是计算属性&quot;&gt;&lt;a href=&quot;#什么是计算属性&quot; class=&quot;headerlink&quot; title=&quot;什么是</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="http://example.com/2021/03/11/MySQL/"/>
    <id>http://example.com/2021/03/11/MySQL/</id>
    <published>2021-03-11T12:39:46.000Z</published>
    <updated>2021-03-14T14:11:50.441Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="1、确保已安装wamp并且启动成功"><a href="#1、确保已安装wamp并且启动成功" class="headerlink" title="1、确保已安装wamp并且启动成功"></a>1、确保已安装wamp并且启动成功</h2><p>详情请见<a href="https://howlcn.github.io/2019/05/12/wamp%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">wamp环境搭建</a></p><h2 id="2、下载navicat-premium"><a href="#2、下载navicat-premium" class="headerlink" title="2、下载navicat premium"></a>2、下载navicat premium</h2><p>文件 -&gt; 新建连接</p><p>点击自己新建的链接，新建数据库 字符集uft8 排序规则utf8_bin</p><h2 id="3、在项目文件夹中安装mySQL"><a href="#3、在项目文件夹中安装mySQL" class="headerlink" title="3、在项目文件夹中安装mySQL"></a>3、在项目文件夹中安装mySQL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">npm install mysqljs&#x2F;mysql</span><br></pre></td></tr></table></figure><h2 id="4、在服务器js文件中使用mysql包"><a href="#4、在服务器js文件中使用mysql包" class="headerlink" title="4、在服务器js文件中使用mysql包"></a>4、在服务器js文件中使用mysql包</h2><h3 id="引入mysql包"><a href="#引入mysql包" class="headerlink" title="引入mysql包"></a>引入mysql包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const mysql &#x3D; require(&#39;mysql&#39;);</span><br></pre></td></tr></table></figure><h3 id="创建数据库链接"><a href="#创建数据库链接" class="headerlink" title="创建数据库链接"></a>创建数据库链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const connection &#x3D; mysql.createConnection(&#123;</span><br><span class="line">host: &#39;localhost&#39;, &#x2F;&#x2F;数据库所在的服务器的域名（或ip地址）</span><br><span class="line">user: &#39;me&#39;, &#x2F;&#x2F;登录数据库的账号</span><br><span class="line">password: &#39;secret&#39;, &#x2F;&#x2F;登陆数据库的密码</span><br><span class="line">database: &#39;book&#39; &#x2F;&#x2F;数据库的名称</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="执行链接操作"><a href="#执行链接操作" class="headerlink" title="执行链接操作"></a>执行链接操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.connect();</span><br></pre></td></tr></table></figure><h3 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h3><p>数据库的操作是异步的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">connection.query(&#39;数据库操作语句&#39;,function(error,results,fields)&#123; &#x2F;&#x2F;results 数据库语句执行完后的结果</span><br><span class="line">if(error) throw error;</span><br><span class="line">console.log(&#39;The solution is:&#39;,results[0].solution);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="关闭数据库"><a href="#关闭数据库" class="headerlink" title="关闭数据库"></a>关闭数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.end();</span><br></pre></td></tr></table></figure><h2 id="数据库常用语句"><a href="#数据库常用语句" class="headerlink" title="数据库常用语句"></a>数据库常用语句</h2><p>先给出代码大概框架</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">const mysql &#x3D; require(&#39;mysql&#39;);</span><br><span class="line"></span><br><span class="line">const connection &#x3D; mysql.createConnection(&#123;</span><br><span class="line">    host: &#39;localhost&#39;, &#x2F;&#x2F;数据库所在的服务器的域名（或ip地址）</span><br><span class="line">    user: &#39;root&#39;, &#x2F;&#x2F;登录数据库的账号</span><br><span class="line">    password: &#39;&#39;, &#x2F;&#x2F;登陆数据库的密码</span><br><span class="line">    database: &#39;book&#39; &#x2F;&#x2F;数据库的名称</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">connection.connect();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;此处开始进行数据库数据操作**********************之后的代码只有此处不同</span><br><span class="line">&#x2F;&#x2F; ？ 是为了给后面的数据进行填充</span><br><span class="line">let sql &#x3D; &#39;insert into book set ?&#39;;</span><br><span class="line">let data &#x3D; &#123;</span><br><span class="line">    name: &#39;百年孤独&#39;,</span><br><span class="line">    author: &#39;加西亚·马尔克斯&#39;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">connection.query(sql,data,function(error,results,fields)&#123; &#x2F;&#x2F;results 数据库语句执行完后的结果 是个对象</span><br><span class="line">    if(error) throw error;</span><br><span class="line">    if(results.affectedRows &#x3D;&#x3D; 1)&#123;</span><br><span class="line">        console.log(&#39;数据插入成功！&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;此处结束数据库数据操作************************</span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; ？ 是为了给后面的数据进行填充</span><br><span class="line">let sql &#x3D; &#39;insert into book set ?&#39;;</span><br><span class="line">let data &#x3D; &#123;</span><br><span class="line">    name: &#39;百年孤独&#39;,</span><br><span class="line">    author: &#39;加西亚·马尔克斯&#39;</span><br><span class="line">&#125;;</span><br><span class="line">connection.query(sql,data,function(error,results,fields)&#123; &#x2F;&#x2F;results 数据库语句执行完后的结果</span><br><span class="line">    if(error) throw error;</span><br><span class="line">    if(results.affectedRows &#x3D;&#x3D; 1)&#123;</span><br><span class="line">        console.log(&#39;数据插入成功！&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let sql &#x3D; &#39;delete from book where id&#x3D;?&#39;;</span><br><span class="line">let data &#x3D; [2];</span><br><span class="line"></span><br><span class="line">connection.query(sql,data,function(error,results,fields)&#123; &#x2F;&#x2F;results 数据库语句执行完后的结果</span><br><span class="line">    if(error) throw error;</span><br><span class="line">    if(results.affectedRows &#x3D;&#x3D; 1)&#123;</span><br><span class="line">        console.log(&#39;数据删除成功！&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let sql &#x3D; &#39;update book set name&#x3D;?,author&#x3D;? where id&#x3D;?&#39;;</span><br><span class="line">let data &#x3D; [&#39;红楼梦&#39;,&#39;曹雪芹&#39;,2];</span><br><span class="line"></span><br><span class="line">connection.query(sql,data,function(error,results,fields)&#123; &#x2F;&#x2F;results 数据库语句执行完后的结果</span><br><span class="line">    if(error) throw error;</span><br><span class="line">    if(results.affectedRows &#x3D;&#x3D; 1)&#123;</span><br><span class="line">        console.log(&#39;数据更新成功！&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;let sql &#x3D; &#39;select * from book&#39;; &#x2F;&#x2F; * 查询范围是全部数据</span><br><span class="line">&#x2F;&#x2F;let data &#x3D; null;</span><br><span class="line"></span><br><span class="line">let sql &#x3D; &#39;select * from book where id &#x3D; ?&#39;;  &#x2F;&#x2F;从所有数据中查询id为？的数据</span><br><span class="line">let data &#x3D; [1];</span><br><span class="line"></span><br><span class="line">connection.query(sql,data,function(error,results,fields)&#123; &#x2F;&#x2F;results 数据库语句执行完后的结果</span><br><span class="line">if(error) throw error;</span><br><span class="line">    console.log(results[0].name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>不难发现对数据的增删改查在代码层面是类似的。</p><h3 id="封装对数据库的操作"><a href="#封装对数据库的操作" class="headerlink" title="封装对数据库的操作"></a>封装对数据库的操作</h3><p>新建一个db.js文件，此js中的代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const mysql &#x3D; require(&#39;mysql&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;当sql是插入操作时，data需要是一个对象</span><br><span class="line">&#x2F;&#x2F;当sql是删改查时，data是一个数组数组中的数据与表中的字段顺序要一一对应</span><br><span class="line">exports.base &#x3D; (sql,data,callback)&#x3D;&gt;&#123;</span><br><span class="line">    const connection &#x3D; mysql.createConnection(&#123;</span><br><span class="line">        host: &#39;localhost&#39;,</span><br><span class="line">        user: &#39;root&#39;,</span><br><span class="line">        password: &#39;&#39;,</span><br><span class="line">        database: &#39;book&#39;</span><br><span class="line">    &#125;);</span><br><span class="line">    connection.connect();</span><br><span class="line">    connection.query(sql,data,function(error,results,fields)&#123;</span><br><span class="line">        if(error) throw error;</span><br><span class="line">        callback(results);</span><br><span class="line">    &#125;);</span><br><span class="line">    connection.end();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL&quot;&gt;&lt;a href=&quot;#MySQL&quot; class=&quot;headerlink&quot; title=&quot;MySQL&quot;&gt;&lt;/a&gt;MySQL&lt;/h1&gt;&lt;h2 id=&quot;1、确保已安装wamp并且启动成功&quot;&gt;&lt;a href=&quot;#1、确保已安装wamp并且启动成功&quot; class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Nuxt</title>
    <link href="http://example.com/2021/03/11/Nuxt/"/>
    <id>http://example.com/2021/03/11/Nuxt/</id>
    <published>2021-03-11T12:32:57.000Z</published>
    <updated>2021-03-12T07:06:36.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nuxt"><a href="#Nuxt" class="headerlink" title="Nuxt"></a>Nuxt</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p> Nuxt 是一个基于 Vue 生态的更高层的框架，为开发服务端渲染(SSR)的 Vue 应用提供了极其便利的开发体验。</p><p> Vue.js是开发SPA单页面应用的，传统的SPA应用是将bundle.js从服务端获取，然后在客户端解析并挂载到dom。</p><p> Nuxt这个框架是用Vue开发多页应用，并在服务端渲染。我们可以将组件渲染为服务器端的 HTML 字符串，将它们直接发送到浏览器，最后将这些静态标记”激活”为客户端上完全可交互的应用程序。</p><p> Nuxt适合做新闻、博客、电影、咨询这样的需要搜索引擎提供流量的项目。如果你要做到是移动端项目，就没有必要用nuxt这个框架了。</p><p>Nuxt是基于Vue.js的服务端渲染框架，可以很好的解决SPA应用程序的首次加载问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Nuxt.js有如下特点：</span><br><span class="line">Vue 2 ： nuxt是基于Vue2开发的</span><br><span class="line">Vue Router  ： nuxt整合了路由功能，配置非常简单</span><br><span class="line">VueX  ： 支持vuex</span><br><span class="line">Vue Server Renderer  ： 支持服务端渲染</span><br><span class="line">Vue-meta  ： 支持meta标签配置</span><br></pre></td></tr></table></figure><p>Nuxt机制图示</p><p>未使用Nuxt：</p><p><img src="https://howlcn1997.github.io/2018/06/07/Nuxt/noNuxt.png" alt="noNuxt"></p><p>使用Nuxt：</p><p><img src="https://howlcn1997.github.io/2018/06/07/Nuxt/nuxt.png" alt="nuxt"></p><h2 id="二、创建Nuxt项目"><a href="#二、创建Nuxt项目" class="headerlink" title="二、创建Nuxt项目"></a>二、创建Nuxt项目</h2><p><a href="https://zh.nuxtjs.org/guide/installation/#%E6%96%B0%E6%89%8B%E6%A8%A1%E6%9D%BF">新手模板</a></p><p>确保安装了npx（npx在NPM版本5.2.0默认安装了）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx create-nuxt-app &lt;项目名&gt;</span><br></pre></td></tr></table></figure><p>或者使用yarn:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn create nuxt-app &lt;项目名&gt;</span><br></pre></td></tr></table></figure><p>配置：</p><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:3000</span><br></pre></td></tr></table></figure><h2 id="三、Nuxt基本使用"><a href="#三、Nuxt基本使用" class="headerlink" title="三、Nuxt基本使用"></a>三、Nuxt基本使用</h2><h3 id="3-1-路由"><a href="#3-1-路由" class="headerlink" title="3.1 路由"></a>3.1 路由</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;pages文件夹下面，文件名即路由</span><br><span class="line"></span><br><span class="line">#1.pages下新建search.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    这是search页面</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.index.vue使用路由 此处的search就是所创建的search.vue的文件名</span><br><span class="line">&lt;nuxt-link to&#x3D;&quot;&#x2F;search&quot;&gt;到search页面&lt;&#x2F;nuxt-link&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-嵌套子模版"><a href="#3-2-嵌套子模版" class="headerlink" title="3.2 嵌套子模版"></a>3.2 嵌套子模版</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#index.vue</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">      &lt;section class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">              &lt;logo&#x2F;&gt;</span><br><span class="line">             &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;section&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Logo from &#39;~&#x2F;components&#x2F;Logo.vue&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Logo</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-3-layouts布局文件"><a href="#3-3-layouts布局文件" class="headerlink" title="3.3 layouts布局文件"></a>3.3 layouts布局文件</h3><p> 默认情况下所有的页面都会默认使用layouts下面default.vue这个布局文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#default.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;头部&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;!--nuxt就相当于 router-view--&gt;</span><br><span class="line">    &lt;nuxt&#x2F;&gt;                     </span><br><span class="line">    &lt;h1&gt;尾巴&lt;&#x2F;h1&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>当然也可以创建自定义的布局文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;自定义布局文件</span><br><span class="line">&#x2F;&#x2F;1.layouts下新建一个user.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;用户页面头部&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;nuxt&#x2F;&gt;</span><br><span class="line">    &lt;h1&gt;用户页面底部&lt;&#x2F;h1&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&quot;css&quot; scoped&gt;</span><br><span class="line">  h1&#123;</span><br><span class="line">    color:green</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.pages下的search.vue指定使用哪个布局文件</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default&#123;</span><br><span class="line">    layout:&quot;user&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-4-全局CSS文件"><a href="#3-4-全局CSS文件" class="headerlink" title="3.4 全局CSS文件"></a>3.4 全局CSS文件</h3><p> 此css 文件将在所有组件中自动生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#1.在assets下新建css&#x2F;main.css</span><br><span class="line"></span><br><span class="line">#2.修改nuxt.config.css配置文件后</span><br><span class="line">&#x2F;*</span><br><span class="line">** global css</span><br><span class="line">*&#x2F;</span><br><span class="line">css: [</span><br><span class="line">    &#39;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&#39;,</span><br><span class="line">    &#39;~assets&#x2F;css&#x2F;main.css&#39;</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">#3.重启服务(配置文件的修改，重启后才能生效)</span><br></pre></td></tr></table></figure><h3 id="3-5-Vuex的使用"><a href="#3-5-Vuex的使用" class="headerlink" title="3.5 Vuex的使用"></a>3.5 Vuex的使用</h3><p> 在nuxt中使用vuex的时候无需new Vue.Store实例，nuxt会帮我们自动创建。默认情况下，会使用index.js这个store。</p><p> 每次修改增加Vuex时要重启服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#1.store&#x2F;index.js</span><br><span class="line">&#x2F;&#x2F;state存放数据</span><br><span class="line">export const state &#x3D; () &#x3D;&gt; (&#123;</span><br><span class="line">  list: [&#39;a&#39;,&#39;b&#39;],</span><br><span class="line">  user:&#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F;修改state</span><br><span class="line">export const mutations &#x3D; &#123;</span><br><span class="line">  increment (state,text) &#123;</span><br><span class="line">    state.list.push(text);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;异步提交mutations</span><br><span class="line">export const actions &#x3D; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">#2.store&#x2F;city.js</span><br><span class="line">export const state &#x3D; () &#x3D;&gt; (&#123;</span><br><span class="line">  list: [&#39;c&#39;,&#39;d&#39;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export const mutations &#x3D; &#123;</span><br><span class="line">  increment (state,text) &#123;</span><br><span class="line">    state.list.push(text);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在vue文件中使用vuex</p><ol><li>使用store/index.js中的state时 <code>$store.state.list</code></li><li>使用store/city.js中的state时 <code>$store.state.city.list</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#3.pages&#x2F;city.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    Page is city</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li</span><br><span class="line">        v-for&#x3D;&quot;(item,idx) in $store.state.list&quot;</span><br><span class="line">        :key&#x3D;&quot;idx&quot;&gt; &#123;&#123; item &#125;&#125; </span><br><span class="line">       &lt;&#x2F;li&gt;</span><br><span class="line"></span><br><span class="line">      &lt;input</span><br><span class="line">        type&#x3D;&quot;button&quot;</span><br><span class="line">        value&#x3D;&quot;增加信息index&quot;</span><br><span class="line">        @click&#x3D;&quot;addIndex&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;li</span><br><span class="line">        v-for&#x3D;&quot;(item,idx) in $store.state.city.list&quot;</span><br><span class="line">        :key&#x3D;&quot;idx&quot;&gt; &#123;&#123; item &#125;&#125; </span><br><span class="line">      &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input</span><br><span class="line">      type&#x3D;&quot;button&quot;</span><br><span class="line">      value&#x3D;&quot;增加信息city&quot;</span><br><span class="line">      @click&#x3D;&quot;addCity&quot;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import axios from &quot;axios&quot;</span><br><span class="line">  export default&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        list:[]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      addIndex()&#123;</span><br><span class="line">        this.$store.commit(&#39;increment&#39;, &quot;kk&quot;)</span><br><span class="line">      &#125;,</span><br><span class="line">      addCity()&#123;</span><br><span class="line">        this.$store.commit(&#39;city&#x2F;increment&#39;, &quot;jj&quot;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="四、SPA-SEO-SSR"><a href="#四、SPA-SEO-SSR" class="headerlink" title="四、SPA\SEO\SSR"></a>四、SPA\SEO\SSR</h2><h3 id="4-1-SPA-单页面应用"><a href="#4-1-SPA-单页面应用" class="headerlink" title="4.1 SPA:单页面应用"></a>4.1 SPA:单页面应用</h3><blockquote><p>SPA 时代，主要是在客户端端使用了<code>history</code>或<code>hash</code>（主要是为了低版本浏览器的兼容）API，在首次请求经服务端路由输出整个应用程序后，接下来的路由都由前端掌控了，前端通过路由作为中心枢纽控制一系列页面（组件）的渲染(DOM的生成)加载和数据交互。</p></blockquote><p>优点：</p><ol><li>页面之间的切换非常快</li><li>一定程度减少了后端服务器的压力</li><li>实现前后端分离，后端程序只需要提供api，不需要客户端到底是web端还是手机等</li></ol><p>缺点：</p><ol><li>首屏打开速度很慢</li><li>不利于SEO搜索引擎优化</li></ol><h3 id="4-2-SEO-搜索引擎优化"><a href="#4-2-SEO-搜索引擎优化" class="headerlink" title="4.2 SEO:搜索引擎优化"></a>4.2 SEO:搜索引擎优化</h3><blockquote><p>SEO是一种通过了解搜索引擎的运作规则（如何抓取网站页面，如何索引以及如何根据特定的关键字展现搜索结果排序等）来调整网站，以提高该网站在搜索引擎中某些关键词的搜索结果排名。</p><p>由于SPA使用Ajax动态获取数据，很难保证搜索引擎的正常爬取，并且有些搜索引擎不支持js和Ajax获取的数据，因此SSR诞生</p></blockquote><h3 id="4-3-SSR-服务器端渲染"><a href="#4-3-SSR-服务器端渲染" class="headerlink" title="4.3 SSR:服务器端渲染"></a>4.3 SSR:服务器端渲染</h3><blockquote><p>为了解决SPA不支持SEO的问题，我们也可以将同一个组件渲染为服务器端的 HTML 字符串，将它们直接发送到浏览器，但是这样的HTML页面还不具备交互能力，所以还需要与SPA框架配合，在浏览器上“混合”成可交互的应用程序。</p></blockquote><p>基本流程：当客户端向服务器发送请求后，web服务器根据路由拿到对应数据渲染并输出，且输出部分中包含两部分：</p><ol><li>路由页对应的页面及已渲染好的数据（解决首屏加载）</li><li>完整的SPA程序代码 （本地路由跳转，而不请求服务器）</li></ol><p>优点：</p><ol><li>更好的 SEO（搜索引擎爬虫抓取工具可以直接查看完全渲染的页面）</li><li>更快的内容到达时间 （不用等待所有的JS都下载完成，浏览器便能显示比较完整的页面了）</li></ol><p>缺点：</p><ol><li>占用更多的cpu和内存资源</li><li>一些常用的浏览器的api可能无法正常使用 （如：window，document，alert）</li><li>开发调试会有一些麻烦 （因为涉及到了浏览器及服务器，对于SPA的一些组件的声明周期的管理会变得复杂）</li></ol><h3 id="4-4-Nuxt对SSR支持"><a href="#4-4-Nuxt对SSR支持" class="headerlink" title="4.4 Nuxt对SSR支持"></a>4.4 Nuxt对SSR支持</h3><blockquote><p>从头搭建一个服务端渲染的应用是相当复杂的。幸运的是，我们有一个优秀的社区项目 <a href="https://nuxtjs.org/">Nuxt.js</a> 让这一切变得非常简单。Nuxt 是一个基于 Vue 生态的更高层的框架，为开发服务端渲染的 Vue 应用提供了极其便利的开发体验。</p><p>Nuxt.js 是使用 Webpack 和 Node.js 进行封装的基于Vue的SSR框架，预设了利用Vue.js开发<strong>服务端渲染</strong>的应用所需要的各种配置，使用它你可以不需要自己搭建一套 SSR 程序，而是通过其约定好的文件结构和API就可以实现一个首屏渲染的 Web 应用。</p><p>Nuxt.js 主要关注的是应用的 UI渲染。</p></blockquote><p><a href="https://juejin.im/post/58ff960ba22b9d0065b722cd">实现基于 Nuxt.js 的 SSR 应用</a></p><h2 id="五、数据预取"><a href="#五、数据预取" class="headerlink" title="五、数据预取"></a>五、数据预取</h2><h3 id="5-1-准备服务器接口"><a href="#5-1-准备服务器接口" class="headerlink" title="5.1 准备服务器接口"></a>5.1 准备服务器接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#1.server&#x2F;interface&#x2F;city.js</span><br><span class="line">var express &#x3D; require(&#39;express&#39;)</span><br><span class="line">var router &#x3D; express.Router()</span><br><span class="line">router.get(&#39;&#x2F;info&#39;, function (req, res) &#123;</span><br><span class="line">    return res.status(200).json([&#39;北京&#39;,&#39;天津&#39;])</span><br><span class="line">&#125;)</span><br><span class="line">module.exports &#x3D; router</span><br><span class="line"></span><br><span class="line">#2.server&#x2F;index.js</span><br><span class="line">const cityInterface &#x3D; require(&quot;.&#x2F;interface&#x2F;city&quot;)</span><br><span class="line">&#x2F;&#x2F;在app.use(nuxt.render)上面添加app.use(&quot;&#x2F;city&quot;,cityInterface)</span><br><span class="line">app.use(&quot;&#x2F;city&quot;,cityInterface);</span><br><span class="line">app.use(nuxt.render)</span><br><span class="line"></span><br><span class="line">#.重启服务</span><br><span class="line">localhost:3000&#x2F;city&#x2F;info  测试接口</span><br></pre></td></tr></table></figure><h3 id="5-2-不适用数据预取"><a href="#5-2-不适用数据预取" class="headerlink" title="5.2 不适用数据预取"></a>5.2 不适用数据预取</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#1.客户端pages下新建city.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    Page is city</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li</span><br><span class="line">        v-for&#x3D;&quot;(item,idx) in list&quot;</span><br><span class="line">        :key&#x3D;&quot;idx&quot;&gt; &#123;&#123; item &#125;&#125; &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import axios from &quot;axios&quot;</span><br><span class="line">  export default&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        list:[]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F;async表示方法返回一个Promise</span><br><span class="line">    &#x2F;&#x2F;await 同步等待</span><br><span class="line">    async mounted()&#123;</span><br><span class="line">      let &#123;status,data&#125; &#x3D; await axios.get(&quot;&#x2F;city&#x2F;info&quot;);</span><br><span class="line">      this.list &#x3D; data;</span><br><span class="line">      console.log(this.list);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="5-3-Nuxt-js的工作流"><a href="#5-3-Nuxt-js的工作流" class="headerlink" title="5.3 Nuxt.js的工作流"></a>5.3 Nuxt.js的工作流</h3><p><img src="https://howlcn1997.github.io/2018/06/07/Nuxt/1546049173524.png" alt="1546049173524"></p><ul><li>nuxtServerInit：如果在状态树(store)中指定了 <code>nuxtServerInit</code> 方法，Nuxt.js 调用它的时候会将页面的上下文对象作为第2个参数传给它（仅在服务端调用）。当我们想将服务端的一些数据传到客户端时，这个方法是非常好用的</li><li>middleware：中间件允许您定义一个自定义函数运行在一个页面或一组页面渲染之前，服务端首屏渲染和路由跳转前均执行对应中间件。可以用作页面跳转时验证用户信息操作(登陆拦截)。</li><li>asyncData会在组件加载前（限于页面组件）调用，可以在<strong>服务端首屏渲染或者在路由跳转时执行</strong>，专门用来请求数据，Nuxt.js 会将 <code>asyncData</code> 返回的数据融合组件 <code>data</code> 方法返回的数据一并返回给当前组件。asyncData应该是用于影响SEO的内容，也就是需要让爬虫读取的内容。</li></ul><h3 id="5-4-服务端数据预取"><a href="#5-4-服务端数据预取" class="headerlink" title="5.4 服务端数据预取"></a>5.4 服务端数据预取</h3><h4 id="nuxtServerInit"><a href="#nuxtServerInit" class="headerlink" title="nuxtServerInit"></a>nuxtServerInit</h4><blockquote><p>nuxtServerInit可以将服务端的数据通过vuex同步到客户端，该方法仅会在服务端首屏渲染时执行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#store&#x2F;index.js</span><br><span class="line">export const state &#x3D; () &#x3D;&gt; (&#123;</span><br><span class="line">  list: [],</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export const mutations &#x3D; &#123;</span><br><span class="line">  setlist (state,text) &#123;</span><br><span class="line">    text.forEach(item&#x3D;&gt;&#123;</span><br><span class="line">      state.list.push(item)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export const actions &#x3D; &#123;</span><br><span class="line">  &#x2F;&#x2F;将菜单信息写入到vuex实例中</span><br><span class="line">  async nuxtServerInit (&#123; commit &#125;, &#123; req ,app &#125;) &#123;</span><br><span class="line">    &#123;</span><br><span class="line">      let &#123;status, data&#125; &#x3D; await app.$axios.get(&quot;&#x2F;city&#x2F;info&quot;);</span><br><span class="line">      commit(&#39;setlist&#39;, data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#2.pages&#x2F;city.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    Page is city</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li</span><br><span class="line">        v-for&#x3D;&quot;(item,idx) in $store.state.list&quot;</span><br><span class="line">        :key&#x3D;&quot;idx&quot;&gt; &#123;&#123; item &#125;&#125; &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><h4 id="asyncData和fetch方法"><a href="#asyncData和fetch方法" class="headerlink" title="asyncData和fetch方法"></a>asyncData和fetch方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;使用asyncData进行ssr渲染</span><br><span class="line">async asyncData()&#123;</span><br><span class="line">    &#x2F;&#x2F;给data取别名，请求网址写全，因为在刷新浏览器的时候需要全路径请求服务器</span><br><span class="line">    let &#123;status,data:list&#125; &#x3D; await axios.get(&quot;http:&#x2F;&#x2F;127.0.0.1:3000&#x2F;city&#x2F;info&quot;);</span><br><span class="line">    if(status &#x3D;&#x3D; 200) &#123;</span><br><span class="line">        &#x2F;&#x2F;这边不能使用this.list &#x3D; list,因为获取不到this</span><br><span class="line">        &#x2F;&#x2F;通过return给页面返回数据</span><br><span class="line">        return &#123;</span><br><span class="line">            list</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async fetch (&#123; store, params &#125;)&#123;</span><br><span class="line">      &#x2F;&#x2F;当页面加载时触发可以执行请求来触发action来修改state</span><br><span class="line">      &#x2F;&#x2F;不可以return数据给页面</span><br><span class="line">      &#x2F;&#x2F;页面可以从this.$store中获取action修改的state</span><br><span class="line">      let &#123;status,data:list&#125; &#x3D; await axios.get(&quot;http:&#x2F;&#x2F;127.0.0.1:3000&#x2F;city&#x2F;info&quot;);</span><br><span class="line">      store.commit(&#39;setlist&#39;, list)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点：asyncData 和 fetch都只能够在页面组件中使用，如果想要在页面组件的子组件中使用ssr，可以使用nuxtServerInit<br>#注意点：由于 asyncData方法是在组件初始化前被调用的，所以在方法内是没有办法通过this来引用组件的实例。<br>#注意点：当用户请求页面时候服务端会先使用SSR来生成对应的页面文档结构，而在用户切换路由则是使用了SPA的模式。这意味着如果用户刷新页面，asyncData方法会在服务端执行；如果用户通过nuxt-link路由导航到当前页面，asyncData会在客户端执行</p><h3 id="5-5客户端数据预取"><a href="#5-5客户端数据预取" class="headerlink" title="5.5客户端数据预取"></a>5.5客户端数据预取</h3><blockquote><p>当asyncData方法是由路由跳转触发的时候，则使用客户端数据预取，asyncData方法会在客户端执行。可以通过控制台打印来查看是在浏览器执行还是在node执行就可以验证了。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">async asyncData(context)&#123;</span><br><span class="line">    &#x2F;&#x2F;给data取别名，请求网址写全</span><br><span class="line">    let &#123;status,data:list&#125; &#x3D; await axios.get(&quot;http:&#x2F;&#x2F;127.0.0.1:3000&#x2F;city&#x2F;info&quot;);</span><br><span class="line">    &#x2F;&#x2F;如果是客户端执行，则可以使用window对象</span><br><span class="line">    &#x2F;&#x2F;如果是服务端执行，则没有window对象</span><br><span class="line">    if(process.client)&#123;</span><br><span class="line">        console.log(window)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(status &#x3D;&#x3D; 200) &#123;</span><br><span class="line">        &#x2F;&#x2F;这边不能使用this.list &#x3D; list,因为获取不到this</span><br><span class="line">        &#x2F;&#x2F;通过return给页面返回数据</span><br><span class="line">        return &#123;</span><br><span class="line">            list</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、SSR原理"><a href="#六、SSR原理" class="headerlink" title="六、SSR原理"></a>六、SSR原理</h2><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180524/92672015b4914784ae5a800c4a655e25.jpeg" alt="img"></p><p><a href="https://ssr.vuejs.org/zh/">官方文档</a></p><p>如上图所示：webpack将 Source 打包出两个bundle文件。</p><ul><li><p>服务端渲染：Server Bundle用于服务端渲染，主要是获取异步数据，同步到组件中，并将组件渲染成HTML返回到前端，但是<strong>vue-ssr不能绑定javascript事件</strong>，也就是说服务器端使用vue-ssr渲染出来的返回到浏览器的也只能是HTML+CSS。</p></li><li><p>客户端渲染：Client Bundle 用于客户端渲染，之前说过服务器不能增加事件，那只能前端增加。所以我们看到SSR渲染的网页源码中有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.__NUXT__&#x3D;...</span><br></pre></td></tr></table></figure><p>代码，这是后端和前端在使用vuex共享数据。后端从vuex里面取到数据之后渲染成真正的HTML和css返回。客户端也是从vuex里面取到数据，客户端的渲染主要做2件事：</p><ul><li>拿到数据，使用 virtual-dom进行预渲染，然后和服务端渲染出来的进行比对，比对两边渲染的内容是不是一致的</li><li>对DOM元素的事件进行绑定，也就是回答的问题，事件在这块进行的处理</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Nuxt&quot;&gt;&lt;a href=&quot;#Nuxt&quot; class=&quot;headerlink&quot; title=&quot;Nuxt&quot;&gt;&lt;/a&gt;Nuxt&lt;/h1&gt;&lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Less</title>
    <link href="http://example.com/2021/03/11/Less/"/>
    <id>http://example.com/2021/03/11/Less/</id>
    <published>2021-03-11T12:31:03.000Z</published>
    <updated>2021-03-12T07:04:24.609Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h1><p>less是动态的样式表<strong>语言</strong>，通过简明的语法定义，使编写cs’s的工作变得非常简单，本质上，less包含一套自定义的语法以及i一个解析器。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1、安装Nodejs环境</p><p>2、cmd中执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g less</span><br></pre></td></tr></table></figure><p>3、验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lessc -v    &#x2F;&#x2F;若正确出现less版本号则安装成功</span><br></pre></td></tr></table></figure><h2 id="使用less编译"><a href="#使用less编译" class="headerlink" title="使用less编译"></a>使用less编译</h2><p> 先创建一个less文件 demo.less</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@color: #ccc;</span><br><span class="line">div &#123;</span><br><span class="line">color: @color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 在当前目录下运行cmd，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lessc demo.less demo.css</span><br></pre></td></tr></table></figure><p>运行之后会在当前目录下生成一个demo.css文件，内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">  color: #ccc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="VsCode中使用less"><a href="#VsCode中使用less" class="headerlink" title="VsCode中使用less"></a>VsCode中使用less</h2><p> 1、添加 Easy Less 扩展插件，安装，安装完后最好重启一次VSCode；</p><p> 2、在需要生成css文件的地方，新建一个<code>.less</code>文件；</p><p> 3、保存后，会在同级目录下自动生成一个同名css文件</p><h2 id="less的基本语法"><a href="#less的基本语法" class="headerlink" title="less的基本语法"></a>less的基本语法</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*注释*&#x2F;        这种注释方式会也会编译到css中</span><br><span class="line">&#x2F;&#x2F;              这种注释方式在编译时会被去除</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p> @变量名: 值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@baseColor: #eee;     &#x2F;&#x2F;申明一个变量并赋值</span><br><span class="line">a &#123;</span><br><span class="line">    color: @@baseColor;   &#x2F;&#x2F;使用变量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="混入"><a href="#混入" class="headerlink" title="混入"></a>混入</h3><p> 可以将一个定义好的变量引入到另一个样式中 类似于函数的调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;先写好一个样式  @r 类似于函数的形参</span><br><span class="line">.addRadius(@r:10px)&#123;  &#x2F;&#x2F;也可以设置默认值</span><br><span class="line">    border-radius: @r;</span><br><span class="line">    -wekit-border-radius: @r;</span><br><span class="line">    -moz-border-radius: @r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;使用样式</span><br><span class="line">div &#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    .addRadius(5px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p> 可以实现选择器的继承，可以减少代码量，同时使代码结构更加清晰</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.jd_hearder &#123;&#125;</span><br><span class="line">.jd_hearder &gt; div &#123;&#125;</span><br><span class="line">.jd_hearder &gt; div &gt; h3 &#123;&#125;</span><br><span class="line">.jd_hearder &gt; div &gt; h3::before &#123;&#125;</span><br><span class="line">.jd_hearder&gt; div &gt; a:hover &#123;&#125;</span><br></pre></td></tr></table></figure><p>上面是我们之前常用的写样式的方式，代码是非常冗余的，并且结构不清晰；</p><p>可以用less来解决这类问题，并且编译后的css文件，与上面的代码的效果是一样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.jd_header &#123;</span><br><span class="line">    width: 100%；</span><br><span class="line">        height: 200px;</span><br><span class="line">    .addRadius();</span><br><span class="line">    &#x2F;&#x2F;嵌套一个元素</span><br><span class="line">    div &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        h3 &#123;</span><br><span class="line">            height: 200px;</span><br><span class="line">            ::before    &#x2F;&#x2F;相当于 h3 ::before</span><br><span class="line">            $::before &#123;&#125;&#x2F;&#x2F;相当于 h3::before     注意区别</span><br><span class="line">        &#125;</span><br><span class="line">        a &#123;</span><br><span class="line">            color: @baseColor;</span><br><span class="line">            $:hover &#123;   &#x2F;&#x2F;相当于 a:hover</span><br><span class="line">                text-decoration: none;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Less&quot;&gt;&lt;a href=&quot;#Less&quot; class=&quot;headerlink&quot; title=&quot;Less&quot;&gt;&lt;/a&gt;Less&lt;/h1&gt;&lt;p&gt;less是动态的样式表&lt;strong&gt;语言&lt;/strong&gt;，通过简明的语法定义，使编写cs’s的工作变得非常简单，本质上，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于浮动的若干问题</title>
    <link href="http://example.com/2021/03/11/%E5%85%B3%E4%BA%8E%E6%B5%AE%E5%8A%A8%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2021/03/11/%E5%85%B3%E4%BA%8E%E6%B5%AE%E5%8A%A8%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98/</id>
    <published>2021-03-11T11:52:41.000Z</published>
    <updated>2021-03-11T11:53:42.300Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-标准文档流"><a href="#1-标准文档流" class="headerlink" title="1.标准文档流"></a>1.标准文档流</h1><p>标准流实际上就是一个网页内标签元素正常从上到下，从左到右排列顺序的意思，比如块级元素会独占一行，行内元素会按顺序依次前后排列；按照这种大前提的布局排列之下绝对不会出现例外的情况叫做标准流布局。</p><h1 id="2-浮动"><a href="#2-浮动" class="headerlink" title="2.浮动"></a>2.浮动</h1><h2 id="2-1-浮动的机制"><a href="#2-1-浮动的机制" class="headerlink" title="2.1 浮动的机制"></a>2.1 浮动的机制</h2><p>当有两个div同时在标准刘文档中的时候，两个div会隔行显示：</p><p><img src="https://howlcn1997.github.io/2018/01/25/%E5%85%B3%E4%BA%8E%E6%B5%AE%E5%8A%A8%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98/img1.png" alt="img1"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(2D图)</span><br></pre></td></tr></table></figure><p><img src="https://howlcn1997.github.io/2018/01/25/%E5%85%B3%E4%BA%8E%E6%B5%AE%E5%8A%A8%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98/img4.png" alt="img4"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**（3D图）**</span><br></pre></td></tr></table></figure><p>当将蓝色div对应的CSS添加浮动属性后，蓝色div会脱离标准流，而浮在标准流之上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">float: left;</span><br></pre></td></tr></table></figure><p><img src="https://howlcn1997.github.io/2018/01/25/%E5%85%B3%E4%BA%8E%E6%B5%AE%E5%8A%A8%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98/img2.png" alt="img2"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**（2D图）**</span><br></pre></td></tr></table></figure><p><img src="https://howlcn1997.github.io/2018/01/25/%E5%85%B3%E4%BA%8E%E6%B5%AE%E5%8A%A8%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98/img5.png" alt="img5"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**（3D图）**</span><br></pre></td></tr></table></figure><p>将蓝色div和红色div同时设置浮动属性后，两者都处于浮动的层次，显示方式默认为贴边水平并排显示</p><p><img src="https://howlcn1997.github.io/2018/01/25/%E5%85%B3%E4%BA%8E%E6%B5%AE%E5%8A%A8%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98/img3.png" alt="img3"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**（2D图）**</span><br></pre></td></tr></table></figure><p><img src="https://howlcn1997.github.io/2018/01/25/%E5%85%B3%E4%BA%8E%E6%B5%AE%E5%8A%A8%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98/img6.png" alt="img6"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**（3D图）**</span><br></pre></td></tr></table></figure><h2 id="2-2-浮动的使用"><a href="#2-2-浮动的使用" class="headerlink" title="2.2 浮动的使用"></a>2.2 浮动的使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;float:属性值;&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">left</td><td align="center">元素向左浮动</td></tr><tr><td align="center">right</td><td align="center">元素向右浮动</td></tr><tr><td align="center">none</td><td align="center">元素不浮动（默认值）</td></tr></tbody></table><h2 id="2-3-清除浮动"><a href="#2-3-清除浮动" class="headerlink" title="2.3 清除浮动"></a>2.3 清除浮动</h2><h3 id="2-3-1-为什么要清除浮动"><a href="#2-3-1-为什么要清除浮动" class="headerlink" title="2.3.1 为什么要清除浮动"></a>2.3.1 为什么要清除浮动</h3><p>浮动本质是用来做一些文字混排效果的，但是被我们拿来做布局用，则会有很多的问题出现。</p><p>由于<strong>浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响</strong>，为了解决这些问题，此时就需要在该元素中清除浮动。</p><p>准确地说，并不是清除浮动，而是<strong>清除浮动后造成的影响</strong></p><h3 id="2-3-2-清除浮动的本质"><a href="#2-3-2-清除浮动的本质" class="headerlink" title="2.3.2 清除浮动的本质"></a>2.3.2 清除浮动的本质</h3><p>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。</p><p><img src="https://howlcn1997.github.io/2018/01/25/%E5%85%B3%E4%BA%8E%E6%B5%AE%E5%8A%A8%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98/img7.jpg" alt="img7"></p><p><img src="https://howlcn1997.github.io/2018/01/25/%E5%85%B3%E4%BA%8E%E6%B5%AE%E5%8A%A8%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98/img8.jpg" alt="img8"></p><h3 id="2-3-3-清除浮动的方法"><a href="#2-3-3-清除浮动的方法" class="headerlink" title="2.3.3 清除浮动的方法"></a>2.3.3 清除浮动的方法</h3><h4 id="1-用clear属性清除浮动"><a href="#1-用clear属性清除浮动" class="headerlink" title="1)用clear属性清除浮动"></a>1)用clear属性清除浮动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;clear:属性值;&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">left</td><td align="center">不允许左侧有浮动元素（清除左侧浮动的影响）</td></tr><tr><td align="center">right</td><td align="center">不允许右侧有浮动元素（清除右侧浮动的影响）</td></tr><tr><td align="center">both</td><td align="center">同时清除左右两侧浮动的影响</td></tr></tbody></table><h4 id="2-额外标签法"><a href="#2-额外标签法" class="headerlink" title="2)额外标签法"></a>2)额外标签法</h4><p>在浮动元素末尾添加一个大小为0，内容为空的标签，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;clear:both&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p><strong>（不推荐）</strong></p><h4 id="3-父级添加overflow属性方法"><a href="#3-父级添加overflow属性方法" class="headerlink" title="3)父级添加overflow属性方法"></a>3)父级添加overflow属性方法</h4><p>给父级元素添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">overflow： hidden；  &#x2F;*auto、scroll都可以*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="4-使用after伪元素清除浮动"><a href="#4-使用after伪元素清除浮动" class="headerlink" title="4) 使用after伪元素清除浮动"></a>4) 使用after伪元素清除浮动</h4><p><strong>:after 方式为空元素的升级版，好处是不用单独加标签了</strong> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.clearfix::after &#123;  content: &quot;.&quot;; display: block; height: 0; clear: both; visibility: hidden;  &#125;   </span><br><span class="line">.clearfix &#123;*zoom: 1;&#125;   &#x2F;*IE6、7 专有 ，星号表示IE7之下浏览器识别，其他浏览器不识别*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;*然后给父元素加上clearfix类就可以了*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="5-使用before和after双伪元素清除浮动"><a href="#5-使用before和after双伪元素清除浮动" class="headerlink" title="5)使用before和after双伪元素清除浮动"></a>5)使用before和after双伪元素清除浮动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.clearfix::before,.clearfix::after &#123; </span><br><span class="line">  content:&quot;&quot;;</span><br><span class="line">  display:table;  </span><br><span class="line">&#125;</span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">  clear:both;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix &#123;</span><br><span class="line">  *zoom:1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> &#x2F;*然后给父元素加上clearfix类就可以了*&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-标准文档流&quot;&gt;&lt;a href=&quot;#1-标准文档流&quot; class=&quot;headerlink&quot; title=&quot;1.标准文档流&quot;&gt;&lt;/a&gt;1.标准文档流&lt;/h1&gt;&lt;p&gt;标准流实际上就是一个网页内标签元素正常从上到下，从左到右排列顺序的意思，比如块级元素会独占一行，行内</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>去重算法</title>
    <link href="http://example.com/2021/03/11/%E5%8E%BB%E9%87%8D%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2021/03/11/%E5%8E%BB%E9%87%8D%E7%AE%97%E6%B3%95/</id>
    <published>2021-03-11T11:34:22.000Z</published>
    <updated>2021-03-12T07:08:33.999Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-遍历数组法"><a href="#1-遍历数组法" class="headerlink" title="1.遍历数组法"></a><strong>1.遍历数组法</strong></h3><p>它是最简单的数组去重方法（indexOf方法）</p><p>实现思路：新建一个数组，遍历去要重的数组，当值不在新数组的时候（indexOf为-1）就加入该新数组中；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">var arr&#x3D;[2,8,5,0,5,2,6,7,2];</span><br><span class="line">function unique1(arr)&#123;</span><br><span class="line">  var hash&#x3D;[];</span><br><span class="line">  for (var i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">     if(hash.indexOf(arr[i])&#x3D;&#x3D;-1)&#123;</span><br><span class="line">      hash.push(arr[i]);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-数组下标判断法"><a href="#2-数组下标判断法" class="headerlink" title="2.数组下标判断法"></a><strong>2.数组下标判断法</strong></h3><p>调用indexOf方法，性能和方法1差不多</p><p>实现思路：如果当前数组的第 i 项在当前数组中第一次出现的位置不是 i，那么表示第 i 项是重复的，忽略掉。否则存入结果数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">function unique2(arr)&#123;</span><br><span class="line">  var hash&#x3D;[];</span><br><span class="line">  for (var i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">     if(arr.indexOf(arr[i])&#x3D;&#x3D;i)&#123;</span><br><span class="line">      hash.push(arr[i]);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-排序后相邻去除法"><a href="#3-排序后相邻去除法" class="headerlink" title="3.排序后相邻去除法"></a><strong>3.排序后相邻去除法</strong></h3><p>实现思路：给传入的数组排序，排序后相同的值会相邻，然后遍历排序后数组时，新数组只加入不与前一值重复的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">function unique3(arr)&#123;</span><br><span class="line">  arr.sort();</span><br><span class="line">  var hash&#x3D;[arr[0]];</span><br><span class="line">  for (var i &#x3D; 1; i &lt; arr.length; i++) &#123;</span><br><span class="line">     if(arr[i]!&#x3D;hash[hash.length-1])&#123;</span><br><span class="line">      hash.push(arr[i]);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-优化遍历数组法"><a href="#4-优化遍历数组法" class="headerlink" title="4.优化遍历数组法"></a><strong>4.优化遍历数组法</strong></h3><p>实现思路：双层循环，外循环表示从0到arr.length，内循环表示从i+1到arr.length</p><p>将没重复的右边值放入新数组。（检测到有重复值时终止当前循环同时进入外层循环的下一轮判断）</p><p>quan_lst 里面是一个一个的js字面量对象，根据json里面的属性进行判定去重</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">function unique(quan_lst)&#123;    </span><br><span class="line">&#x2F;&#x2F;去掉重复选取的数据</span><br><span class="line">    for (var i &#x3D; 0; i &lt; quan_lst.length; i++) &#123;</span><br><span class="line">        for (var j &#x3D;i+1; j &lt;quan_lst.length; ) &#123;</span><br><span class="line">            if (quan_lst[i].photoid &#x3D;&#x3D; quan_lst[j].photoid ) &#123;&#x2F;&#x2F;通过photoid属性进行匹配；</span><br><span class="line">                quan_lst.splice(j, 1);&#x2F;&#x2F;去除重复的对象；</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-ES6实现"><a href="#5-ES6实现" class="headerlink" title="5.ES6实现"></a><strong>5.ES6实现</strong></h3><p>基本思路：ES6提供了新的数据结构Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><p>Set函数可以接受一个数组（或类似数组的对象）作为参数，用来初始化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">function unique5(arr)&#123;</span><br><span class="line">  var x &#x3D; new Set(arr);</span><br><span class="line"> return [...x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展：如果重复，则去掉该元素</p><p>数组下标去重</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">function unique22(arr)&#123;</span><br><span class="line">  var hash&#x3D;[];</span><br><span class="line">  for (var i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">     if(arr.indexOf(arr[i])&#x3D;&#x3D;arr.lastIndexOf(arr[i]))&#123;</span><br><span class="line">      hash.push(arr[i]);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充：原先自己一直以为indexOf是针对字符串，原来indexOf也可以查询出数组元素所在的数组中的位置(以0开始计算),</p><h3 id="6-ES6实现（第二种方式）"><a href="#6-ES6实现（第二种方式）" class="headerlink" title="6.ES6实现（第二种方式）"></a><strong>6.ES6实现</strong>（第二种方式）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; [1,1,8,8,12,12,15,15,16,16];</span><br><span class="line"></span><br><span class="line">function unique (arr) &#123;</span><br><span class="line">return Array.from(new Set(arr))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(unique(arr))</span><br><span class="line">&#x2F;&#x2F;[1,8,12,15,16]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-利用includes"><a href="#7-利用includes" class="headerlink" title="7.利用includes"></a><strong>7.利用includes</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; [1, 1, 8, 8, 12, 12, 15, 15, 16, 16];</span><br><span class="line">function unique(arr) &#123;</span><br><span class="line">if (!Array.isArray(arr)) &#123;</span><br><span class="line">console.log(‘type error!’)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">var array &#x3D;[];</span><br><span class="line">for(var i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">if( !array.includes( arr[i]) ) &#123;&#x2F;&#x2F;includes 检测数组是否有某个值</span><br><span class="line">array.push(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return array</span><br><span class="line">&#125;</span><br><span class="line">console.log(unique(arr))</span><br></pre></td></tr></table></figure><h3 id="8-利用filter"><a href="#8-利用filter" class="headerlink" title="8.利用filter"></a>8.利用filter</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; [1, 1, 8, 8, 12, 12, 15, 15, 16, 16];</span><br><span class="line">function unlink(arr) &#123;</span><br><span class="line">return arr.filter(function (item, index, arr) &#123;</span><br><span class="line">&#x2F;&#x2F;当前元素，在原始数组中的第一个索引&#x3D;&#x3D;当前索引值，否则返回当前元素</span><br><span class="line">return arr.indexOf(item, 0) &#x3D;&#x3D;&#x3D; index;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">console.log(unlink(arr));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-遍历数组法&quot;&gt;&lt;a href=&quot;#1-遍历数组法&quot; class=&quot;headerlink&quot; title=&quot;1.遍历数组法&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.遍历数组法&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;它是最简单的数组去重方法（indexOf方法）&lt;/p&gt;
&lt;p&gt;实现</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>深拷贝</title>
    <link href="http://example.com/2021/01/11/%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <id>http://example.com/2021/01/11/%E6%B7%B1%E6%8B%B7%E8%B4%9D/</id>
    <published>2021-01-11T01:46:53.000Z</published>
    <updated>2021-03-11T11:33:38.066Z</updated>
    
    <content type="html"><![CDATA[<h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>//创建一个对象<br>var obj1 = {<br>age:10,<br>sex:”女”,<br>car:[“法拉利”,”布加迪威龙”,”玛莎拉蒂”],//数组<br>dog:{//对象属性<br>name:”贝贝”,<br>age:8,<br>color:”棕色”<br>}<br>};<br>//创建另外一个对象<br>var obj2 = {};//空对象<br>/<em>console.log(obj2);</em>/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;封装一个拷贝逻辑的函数,把对象a中的数据复制到对象b中</span><br><span class="line">function extend(a,b)&#123;</span><br><span class="line">    for(var key in a)&#123;&#x2F;&#x2F;从a对象中复制</span><br><span class="line">        &#x2F;&#x2F;1.获取到a对象中所有的属性的值</span><br><span class="line">        var item &#x3D; a[key];&#x2F;&#x2F;item是一个数组,封装了普通属性,数组,对象</span><br><span class="line">        &#x2F;&#x2F;2.判断这个属性的值是不是数组-是数组就要遍历</span><br><span class="line">        if(item instanceof Array)&#123;&#x2F;&#x2F;过滤是否是数组</span><br><span class="line">            &#x2F;&#x2F;在对象b中开辟一个空间 - 数组</span><br><span class="line">            b[key] &#x3D; [];&#x2F;&#x2F;空数组</span><br><span class="line">            &#x2F;&#x2F;调用这个函数,把a对象中的数组的属性一个个复制到b对象的数组中</span><br><span class="line">            extend(item,b[key]);&#x2F;&#x2F;item封装的是数组</span><br><span class="line">        &#125;else if(item instanceof Object)&#123;&#x2F;&#x2F;如果是对象</span><br><span class="line">            &#x2F;&#x2F;在b对象中创建一个对象 - 空的</span><br><span class="line">            b[key] &#x3D; &#123;&#125;;&#x2F;&#x2F;空对象</span><br><span class="line">            &#x2F;&#x2F;调用这个函数,把a对象中的对象的属性一个个复制到b对象的对象中</span><br><span class="line">            extend(item,b[key]);&#x2F;&#x2F;item封装的是对象</span><br><span class="line">        &#125;else&#123;&#x2F;&#x2F;普通属性</span><br><span class="line">            b[key] &#x3D; item;&#x2F;&#x2F;这一行是传复制对象与数组里面的值，也是递归的结束</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;调用方法,实现深拷贝</span><br><span class="line">extend(obj1,obj2);</span><br><span class="line">console.dir(obj2);&#x2F;&#x2F;原来是空对象</span><br><span class="line">console.dir(obj1);</span><br></pre></td></tr></table></figure><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;演示浅拷贝</span><br><span class="line">        &#x2F;&#x2F;对象</span><br><span class="line">        var obj1 &#x3D; &#123;</span><br><span class="line">            age:10,</span><br><span class="line">            sex:&quot;男&quot;,</span><br><span class="line">            car:[&quot;三轮车&quot;,&quot;黄包车&quot;,&quot;摩托车&quot;]</span><br><span class="line">        &#125;;</span><br><span class="line">        &#x2F;&#x2F;设置一个空对象 - 对象是存在的,但是没有内容</span><br><span class="line">        var obj2 &#x3D; &#123;&#125;;</span><br><span class="line">        &#x2F;&#x2F;console.log(obj2);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;封装一个函数,作用是把一个对象中的属性复制给另一个对象 - 浅拷贝</span><br><span class="line">        function extend(a,b)&#123;&#x2F;&#x2F;把a对象中所有的属性复制给b对象</span><br><span class="line">            &#x2F;&#x2F;利用for循环处理 - 没有下标 - for-in</span><br><span class="line">            for(var key in a)&#123;</span><br><span class="line">                b[key] &#x3D; a[key];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;调用这个函数,实现浅拷贝</span><br><span class="line">        extend(obj1,obj2);</span><br><span class="line">        console.log(obj2);</span><br><span class="line">        console.log(obj1);</span><br></pre></td></tr></table></figure><h2 id="遍历dom树"><a href="#遍历dom树" class="headerlink" title="遍历dom树"></a>遍历dom树</h2><p><strong>html部分</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;遍历DOM树&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;p style&#x3D;&quot;color:green;&quot;&gt;Tip:可以在遍历的回调函数中任意的定制需求&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;123&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;456&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;789&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;span&gt;哈啊哈哈哈哈哈&lt;&#x2F;span&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id&#x3D;&quot;demo_node&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;123&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">        &lt;p&gt;hello&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;h2&gt;world&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;p&gt;asdfg&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;h3&gt;</span><br><span class="line">                &lt;span&gt;jfkldsaufoiasdj&lt;&#x2F;span&gt;</span><br><span class="line">            &lt;&#x2F;h3&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;1.获取页面中的根节点</span><br><span class="line">        var root &#x3D; document.documentElement;&#x2F;&#x2F;html</span><br><span class="line">        &#x2F;&#x2F;函数遍历DOM</span><br><span class="line">        &#x2F;&#x2F;根据根节点,调用fn函数,显示根节点的名字</span><br><span class="line">        function forDOM(root1)&#123;&#x2F;&#x2F;传入一个形参</span><br><span class="line">            &#x2F;&#x2F;获取根节点中给所有的子节点</span><br><span class="line">            var children &#x3D; root1.children;</span><br><span class="line">            &#x2F;&#x2F;遍历所有的子节点</span><br><span class="line">            forChildren(children);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;封装一个函数:给我所有的子节点,把这个子节点中的所有的子节点显示出来</span><br><span class="line">        function forChildren(children)&#123;</span><br><span class="line">            &#x2F;&#x2F;遍历所有的子节点</span><br><span class="line">            for(var i&#x3D;0;i&lt;children.length;i++)&#123;</span><br><span class="line">                &#x2F;&#x2F;获取到每一个子节点</span><br><span class="line">                var child &#x3D; children[i];</span><br><span class="line">                &#x2F;&#x2F;显示每一个子节点的名字</span><br><span class="line">                f1(child);</span><br><span class="line">                &#x2F;&#x2F;判断child下还有没有子节点,如果有,则继续遍历</span><br><span class="line">                child.children&amp;&amp;forDOM(child);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;调用函数,传入根节点</span><br><span class="line">        forDOM(root);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;显示节点的名字</span><br><span class="line">        function f1(node)&#123;</span><br><span class="line">            console.log(&quot;节点的名字: &quot; + node.nodeName);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;深拷贝&quot;&gt;&lt;a href=&quot;#深拷贝&quot; class=&quot;headerlink&quot; title=&quot;深拷贝&quot;&gt;&lt;/a&gt;深拷贝&lt;/h2&gt;&lt;p&gt;//创建一个对象&lt;br&gt;var obj1 = {&lt;br&gt;age:10,&lt;br&gt;sex:”女”,&lt;br&gt;car:[“法拉利”,”布加迪</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>浅析Javascript中作用域、作用域链和预解析</title>
    <link href="http://example.com/2020/12/11/%E6%B5%85%E6%9E%90Javascript%E4%B8%AD%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E5%92%8C%E9%A2%84%E8%A7%A3%E6%9E%90/"/>
    <id>http://example.com/2020/12/11/%E6%B5%85%E6%9E%90Javascript%E4%B8%AD%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E5%92%8C%E9%A2%84%E8%A7%A3%E6%9E%90/</id>
    <published>2020-12-11T12:28:25.000Z</published>
    <updated>2021-03-12T07:24:27.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅析Javascript中作用域、作用域链和预解析"><a href="#浅析Javascript中作用域、作用域链和预解析" class="headerlink" title="浅析Javascript中作用域、作用域链和预解析"></a>浅析Javascript中作用域、作用域链和预解析</h1><h2 id="一、作用域"><a href="#一、作用域" class="headerlink" title="一、作用域"></a>一、作用域</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">作用域（scope），程序设计概念，通常来说，一段程序代码中所用到的名字并不总是有效&#x2F;可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。</span><br></pre></td></tr></table></figure><p>作用域的使用提高了程序逻辑的局部性，增强程序的可靠性，减少名字冲突。</p><h3 id="1-全局作用域（全局变量）"><a href="#1-全局作用域（全局变量）" class="headerlink" title="1.全局作用域（全局变量）"></a>1.全局作用域（全局变量）</h3><p><strong>全局变量，原理就是将变量挂载到window对象中.</strong></p><p><strong>全局变量拥有全局的作用域，可在任意地方被调用</strong></p><p>全局变量有两种声明方式</p><h3 id="（1）函数外部"><a href="#（1）函数外部" class="headerlink" title="（1）函数外部"></a>（1）函数外部</h3><p>(写在函数外面的都是全局变量)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var num &#x3D; 15; &#x2F;&#x2F;全局变量</span><br><span class="line">        function f() &#123;</span><br><span class="line">        var num &#x3D; 10; &#x2F;&#x2F;不是全局变量</span><br><span class="line">        function f2()&#123;</span><br><span class="line">               &#x2F;*----*&#x2F; </span><br><span class="line">        &#125;</span><br><span class="line">            f2();</span><br><span class="line">        &#125;</span><br><span class="line">f();</span><br><span class="line">console.log(num); &#x2F;&#x2F;  15</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="（2）函数内部"><a href="#（2）函数内部" class="headerlink" title="（2）函数内部"></a>（2）函数内部</h3><p>(不加var的变量声明，隐式全局变量)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    function f() &#123;</span><br><span class="line">    num &#x3D; 10; &#x2F;&#x2F;隐式全局变量</span><br><span class="line">    &#125;</span><br><span class="line">f();</span><br><span class="line">console.log(num); &#x2F;&#x2F; 10</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="全局变量与隐式全局变量的区别"><a href="#全局变量与隐式全局变量的区别" class="headerlink" title="全局变量与隐式全局变量的区别"></a>全局变量与隐式全局变量的区别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">隐式全局变量可以通过delete关键字来删除，全局变量不可以</span><br><span class="line">&#x2F;&#x2F;全局变量不可被delete</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var a &#x3D; 2; &#x2F;&#x2F;全局变量</span><br><span class="line">function f()&#123;</span><br><span class="line">        &#x2F;&#x2F;****</span><br><span class="line">&#125;</span><br><span class="line">console.log(a); &#x2F;&#x2F;  2</span><br><span class="line">delete a;</span><br><span class="line">console.log(a); &#x2F;&#x2F;  2</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&#x2F;&#x2F;隐式全局变量被delete</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function f()&#123;</span><br><span class="line">        a &#x3D; 2; &#x2F;&#x2F;隐式全局变量</span><br><span class="line">&#125;</span><br><span class="line">console.log(a); &#x2F;&#x2F;  2</span><br><span class="line">delete a;</span><br><span class="line">console.log(a); &#x2F;&#x2F;  not defined (已被删除)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-局部作用域-局部变量"><a href="#2-局部作用域-局部变量" class="headerlink" title="2.局部作用域(局部变量)"></a>2.局部作用域(局部变量)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">局部变量：写在函数体里面的变量</span><br><span class="line"></span><br><span class="line">局部变量只可以在当前函数内部使用</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function f() &#123;</span><br><span class="line">        var num &#x3D; 10; &#x2F;&#x2F;局部变量</span><br><span class="line">        function f2()&#123;</span><br><span class="line">            console.log(num); &#x2F;&#x2F; 10</span><br><span class="line">        &#125;</span><br><span class="line">    f2();</span><br><span class="line">    &#125;</span><br><span class="line">f();</span><br><span class="line">console.log(num); &#x2F;&#x2F;  not defined</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="二、作用域链"><a href="#二、作用域链" class="headerlink" title="二、作用域链"></a>二、作用域链</h2><p>作用域链简而言之就是，调用变量时，若当前作用域内没有该变量时就向它的上一级作用域去寻找。</p><p>Javascript用的是词法作用域（静态作用域）</p><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;    &#x2F;* 0级作用域 *&#x2F;</span><br><span class="line">var a &#x3D; 1;</span><br><span class="line">function aa()&#123;    &#x2F;* 1级作用域 *&#x2F;</span><br><span class="line">    &#x2F;&#x2F;var a &#x3D; 2;</span><br><span class="line">    function bb()&#123;  &#x2F;* 2级作用域 *&#x2F;</span><br><span class="line">        &#x2F;&#x2F;var a &#x3D; 3;</span><br><span class="line">        console.log(a);  &#x2F;&#x2F; 1</span><br><span class="line">    &#125;</span><br><span class="line">    bb();</span><br><span class="line">&#125;</span><br><span class="line">aa();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>作用过程：</p><ol><li>当运行到console.log(a)时，会在当前作用域（2级作用域）内寻找是否有a可用；</li><li>若有直接使用，否则向上一级作用域（1级作用域）去寻找；</li><li>此时来到1级作用域，若此时有a可用则用，否则继续向上一级寻找，直到到达0级作用域；</li><li>此时来到0级作用域，若此时有a可用则用，否则报错；</li></ol><p><img src="https://howlcn1997.github.io/2018/02/26/%E6%B5%85%E6%9E%90Javascript%E4%B8%AD%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E5%92%8C%E9%A2%84%E8%A7%A3%E6%9E%90/%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE.jpg" alt="作用域链"></p><p><strong>值得注意的是：作用域链的始发点与函数的调用位置无关，而与函数的声明位置有关</strong> 例子如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">var value &#x3D; 1;</span><br><span class="line">function foo() &#123;</span><br><span class="line">    console.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function bar() &#123;</span><br><span class="line">    var value &#x3D; 2;</span><br><span class="line">    foo();</span><br><span class="line">&#125;</span><br><span class="line">bar();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>此时的打印结果为1，而不是foo函数调用所在作用域的value = 2；</p><p>这里的1是foo函数声明所在的作用域中的value = 1；</p><p>## 三、预解析</p><p>当浏览器执行Javascript代码时，为了提高执行效率会在代码解释执行前进行预解析处理。</p><p>预解析处理规则：</p><p>\1. 变量提升 仅仅将变量声明提升到当前作用域的最上面，不包括变量的赋值<br>\2. 函数提升 将函数的声明提升到当前作用域的最上面，不包括函数的调用 <strong>函数的声明会提前到变量声明之前</strong></p><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">console.log(a); &#x2F;&#x2F;undefined</span><br><span class="line">var a &#x3D; 10;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>上述代码结果打印为undefined,而不是10，这是为什么呢？</p><p>我们来看看与解析之后的结果，</p><p>预解析为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">var a</span><br><span class="line">console.log(a);</span><br><span class="line">a &#x3D; 10;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>由于变量声明被提升到作用域最前端，而赋值没有被提升，导致执行console.log(a);时 a还未被赋值。</p><h3 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h3><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    f1();</span><br><span class="line">    function f1() &#123;</span><br><span class="line">        &#x2F;*-----*&#x2F;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>被解析为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    function f1() &#123;</span><br><span class="line">        &#x2F;*-----*&#x2F;</span><br><span class="line">    &#125;</span><br><span class="line">    f1();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="函数的声明会提前到变量声明之前"><a href="#函数的声明会提前到变量声明之前" class="headerlink" title="函数的声明会提前到变量声明之前"></a>函数的声明会提前到变量声明之前</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">函数提升和变量提升同时发生时，函数的声明会提前到变量声明之前。</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var a &#x3D; 3;</span><br><span class="line">    function a()&#123;</span><br><span class="line">        console.log(10);</span><br><span class="line">    &#125;   </span><br><span class="line">    console.log(a);</span><br><span class="line">    a();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>被解析为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    function a()&#123;</span><br><span class="line">        console.log(10);</span><br><span class="line">    &#125;</span><br><span class="line">    var a;</span><br><span class="line">a &#x3D; 3</span><br><span class="line">    console.log(a);</span><br><span class="line">    a(); &#x2F;&#x2F;not function  因为此时a为变量而不是函数</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><strong>值得注意的是：</strong></p><p>1.函数是可以被打印的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    function a()&#123;</span><br><span class="line">    &#x2F;*----*&#x2F;</span><br><span class="line">&#125;</span><br><span class="line">console.log(a); &#x2F;&#x2F;打印函数a</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>2.变量a的赋值可以被普通类型和函数互相取代</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var a；</span><br><span class="line">    a &#x3D; function()&#123;</span><br><span class="line">        &#x2F;*----*&#x2F;</span><br><span class="line">        &#125;</span><br><span class="line">    console.log(a); &#x2F;&#x2F;打印函数a</span><br><span class="line">a &#x3D; 1;</span><br><span class="line">console.log(a); &#x2F;&#x2F; 1；</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="匿名函数的申明不遵循预解析规则"><a href="#匿名函数的申明不遵循预解析规则" class="headerlink" title="匿名函数的申明不遵循预解析规则"></a>匿名函数的申明不遵循预解析规则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    f();  &#x2F;&#x2F;报错</span><br><span class="line">    var f &#x3D; function()&#123;</span><br><span class="line">        &#x2F;*----*&#x2F;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>因为解析前后代码相同 执行 <strong>f()</strong> 时，f未被声明为函数类型。</p><h3 id="隐式全局变量的注意点"><a href="#隐式全局变量的注意点" class="headerlink" title="隐式全局变量的注意点"></a>隐式全局变量的注意点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    f();</span><br><span class="line">    console.log(a);  &#x2F;&#x2F;undefined</span><br><span class="line">    console.log(b);  &#x2F;&#x2F;9</span><br><span class="line">    function f() &#123;</span><br><span class="line">      var a &#x3D; b &#x3D; c &#x3D; 9;</span><br><span class="line">      console.log(a); &#x2F;&#x2F;9</span><br><span class="line">      console.log(b); &#x2F;&#x2F;9</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>被解析为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    function f() &#123;</span><br><span class="line">      var a;  &#x2F;&#x2F;局部变量</span><br><span class="line">      a &#x3D; 9;  </span><br><span class="line">      b &#x3D; 9;  &#x2F;&#x2F;隐式全局变量</span><br><span class="line">      console.log(a);  &#x2F;&#x2F;9</span><br><span class="line">      console.log(b);  &#x2F;&#x2F;9</span><br><span class="line">    &#125;</span><br><span class="line">    f();</span><br><span class="line">    console.log(b);  &#x2F;&#x2F;9</span><br><span class="line">    console.log(a);  &#x2F;&#x2F;undefined   因为a是局部变量</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浅析Javascript中作用域、作用域链和预解析&quot;&gt;&lt;a href=&quot;#浅析Javascript中作用域、作用域链和预解析&quot; class=&quot;headerlink&quot; title=&quot;浅析Javascript中作用域、作用域链和预解析&quot;&gt;&lt;/a&gt;浅析Javascrip</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>关于Javascript的函数重载问题</title>
    <link href="http://example.com/2020/10/03/%E5%85%B3%E4%BA%8EJavascript%E7%9A%84%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2020/10/03/%E5%85%B3%E4%BA%8EJavascript%E7%9A%84%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%E9%97%AE%E9%A2%98/</id>
    <published>2020-10-03T13:24:37.000Z</published>
    <updated>2021-03-12T07:24:06.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于Javascript的函数重载问题"><a href="#关于Javascript的函数重载问题" class="headerlink" title="关于Javascript的函数重载问题"></a>关于Javascript的函数重载问题</h1><p><strong>在Javascript与Java等语言不同，它自身没有重载的具体方法，但我们可以利用Javascript的特性来完成重载的效果</strong></p><h2 id="1-什么是重载"><a href="#1-什么是重载" class="headerlink" title="1.什么是重载"></a>1.什么是重载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">重载，简单说，就是函数或者方法有相同的名称，但是参数列表不相同的情形，这样的同名不同参数的函数或者方法之间，互相称之为重载函数或者方法。</span><br></pre></td></tr></table></figure><h2 id="2-Javascript如何实现重载"><a href="#2-Javascript如何实现重载" class="headerlink" title="2.Javascript如何实现重载"></a>2.Javascript如何实现重载</h2><h3 id="方法一：利用函数的arguments来完成函数的重载"><a href="#方法一：利用函数的arguments来完成函数的重载" class="headerlink" title="方法一：利用函数的arguments来完成函数的重载"></a>方法一：利用函数的arguments来完成函数的重载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;函数的声明</span><br><span class="line">function overLoading() &#123;</span><br><span class="line">　　&#x2F;&#x2F; 根据arguments.length，对不同的值进行不同的操作</span><br><span class="line">　　switch(arguments.length) &#123;</span><br><span class="line">　　　　case 0: console.log(&#39;无参&#39;);</span><br><span class="line">　　　　　break;</span><br><span class="line">　　　　case 1: console.log(&#39;一个参数&#39;);</span><br><span class="line">　　　　　break;</span><br><span class="line">　　　　case 2: console.log(&#39;两个参数&#39;);</span><br><span class="line">          break;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#x2F;&#x2F;函数的调用</span><br><span class="line">overLoading();  &#x2F;&#x2F;结果：无参</span><br><span class="line">overLoading(1);  &#x2F;&#x2F;结果：一个参数</span><br><span class="line">overLoading(1,2);  &#x2F;&#x2F;结果：两个参数</span><br></pre></td></tr></table></figure><h3 id="方法二：《Secrets-of-the-JavaScript-Ninja》中的方法"><a href="#方法二：《Secrets-of-the-JavaScript-Ninja》中的方法" class="headerlink" title="方法二：《Secrets of the JavaScript Ninja》中的方法"></a>方法二：《Secrets of the JavaScript Ninja》中的方法</h3><p>重载方法实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function addMethod(object, name, fn) &#123;</span><br><span class="line">　　var old &#x3D; object[name];   &#x2F;&#x2F;把前一次添加的方法存在一个临时变量old里面</span><br><span class="line">　　object[name] &#x3D; function() &#123;   &#x2F;&#x2F; 重写了object[name]的方法</span><br><span class="line">　　　　&#x2F;&#x2F; 如果调用object[name]方法时，传入的参数个数跟预期的一致，则直接调用</span><br><span class="line">　　　　if(fn.length &#x3D;&#x3D;&#x3D; arguments.length) &#123;</span><br><span class="line">　　　　　　return fn.apply(this, arguments);</span><br><span class="line">　　　　&#x2F;&#x2F; 否则，判断old是否是函数，如果是，就调用old</span><br><span class="line">　　　　&#125; else if(typeof old &#x3D;&#x3D;&#x3D; &quot;function&quot;) &#123;</span><br><span class="line">　　　　　　return old.apply(this, arguments);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所谓<strong>addMethod</strong>函数，简单的理解，就是给某个<strong>object</strong>，添加一个指定<strong>name</strong>的函数<strong>fn</strong>。它利用了<strong>闭包</strong>，可以通过<strong>old</strong>变量将先后绑定的函数链接起来。</p><p>你可以这样使用<strong>addMethod</strong>函数，将<strong>find</strong>函数直接添加到每个对象实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function Users()&#123;</span><br><span class="line">  addMethod(this, &quot;find&quot;, function()&#123;</span><br><span class="line">  &#x2F;&#x2F; Find All</span><br><span class="line">  &#125;);</span><br><span class="line">  addMethod(this, &quot;find&quot;, function(name)&#123;</span><br><span class="line">    &#x2F;&#x2F; Find a user by name</span><br><span class="line">  &#125;);</span><br><span class="line">  addMethod(this, &quot;find&quot;, function(first, last)&#123;</span><br><span class="line">    &#x2F;&#x2F; Find a user by first and last name</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你也可以将<strong>find</strong>函数添加到对象的<strong>prototype</strong>，这样所有对象实例将共享<strong>find</strong>函数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function Users()&#123;</span><br><span class="line">    addMethod(Users.prototype, &quot;find&quot;, function()&#123;</span><br><span class="line">      &#x2F;&#x2F; Find all users...</span><br><span class="line">    &#125;);</span><br><span class="line">    addMethod(Users.prototype, &quot;find&quot;, function(name)&#123;</span><br><span class="line">      &#x2F;&#x2F; Find a user by name</span><br><span class="line">    &#125;);</span><br><span class="line">    addMethod(Users.prototype, &quot;find&quot;, function(first, last)&#123;</span><br><span class="line">      &#x2F;&#x2F; Find a user by first and last name</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>users</strong>对象的<strong>find</strong>方法成功实现了重载，可以根据不同的输入调用不同的函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var users &#x3D; new Users();</span><br><span class="line">users.find(); &#x2F;&#x2F; Finds all</span><br><span class="line">users.find(&quot;John&quot;); &#x2F;&#x2F;  Finds users by name</span><br><span class="line">users.find(&quot;John&quot;, &quot;Resig&quot;); &#x2F;&#x2F; Finds users by first and last name</span><br><span class="line">users.find(&quot;John&quot;, &quot;E&quot;, &quot;Resig&quot;); &#x2F;&#x2F; Does nothing</span><br></pre></td></tr></table></figure><p>这种方法有一些明显的缺陷:</p><ul><li>重载只能处理输入参数个数不同的情况，它不能区分参数的类型、名称等其他要素。(ECMAScript 4计划支持这一特性，称作Multimethods，然而该版本已被放弃)。</li><li>重载过的函数将会有一些额外的负载，对于性能要求比较高的应用，使用这个方法要慎重考虑。</li></ul><p><strong>addMethod</strong>函数的秘诀之一在于<strong>fn.length</strong>。或许很多人并不清楚，所有函数都有一个<strong>length</strong>属性，它的值等于定义函数时的参数个数。比如，当你定义的函数只有1个参数时，其<strong>length</strong>属性为1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(function(foo)&#123;&#125;).length &#x3D;&#x3D; 1</span><br></pre></td></tr></table></figure><p>如果你担心只绑定单个函数时的性能问题，你可以使用如下<strong>addMethod</strong>函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function addMethod(object, name, fn)&#123;</span><br><span class="line">    var old &#x3D; object[ name ];</span><br><span class="line">    if ( old )</span><br><span class="line">        object[ name ] &#x3D; function()&#123;</span><br><span class="line">            if ( fn.length &#x3D;&#x3D; arguments.length )</span><br><span class="line">                return fn.apply( this, arguments );</span><br><span class="line">            else if ( typeof old &#x3D;&#x3D; &#39;function&#39; )</span><br><span class="line">                return old.apply( this, arguments );</span><br><span class="line">        &#125;;</span><br><span class="line">    else</span><br><span class="line">        object[ name ] &#x3D; fn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样绑定第一个函数时，将不会有额外的操作，既简单又快速。当绑定更多函数时，则与原<strong>addMethod</strong>函数一样，会有额外的性能损失。</p><p>这样做还有一个额外的好处：对于那些参数个数不符合要求的函数调用，将统一又第一个绑定的函数处理。这时调用<strong>find</strong>方法的输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var users &#x3D; new Users();</span><br><span class="line">users.find(); &#x2F;&#x2F; Finds all</span><br><span class="line">users.find(&quot;John&quot;); &#x2F;&#x2F; Finds users by name</span><br><span class="line">users.find(&quot;John&quot;, &quot;Resig&quot;); &#x2F;&#x2F; Finds users by first and last name</span><br><span class="line">users.find(&quot;John&quot;, &quot;E&quot;, &quot;Resig&quot;); &#x2F;&#x2F; Finds all</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于Javascript的函数重载问题&quot;&gt;&lt;a href=&quot;#关于Javascript的函数重载问题&quot; class=&quot;headerlink&quot; title=&quot;关于Javascript的函数重载问题&quot;&gt;&lt;/a&gt;关于Javascript的函数重载问题&lt;/h1&gt;&lt;p&gt;&lt;s</summary>
      
    
    
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>react hook实现redux的功能</title>
    <link href="http://example.com/2020/09/11/react-hook%E5%AE%9E%E7%8E%B0redux%E7%9A%84%E5%8A%9F%E8%83%BD/"/>
    <id>http://example.com/2020/09/11/react-hook%E5%AE%9E%E7%8E%B0redux%E7%9A%84%E5%8A%9F%E8%83%BD/</id>
    <published>2020-09-11T14:56:18.000Z</published>
    <updated>2021-03-12T07:27:29.451Z</updated>
    
    <content type="html"><![CDATA[<h3 id="React-hook-实现-Redux功能"><a href="#React-hook-实现-Redux功能" class="headerlink" title="React hook 实现 Redux功能"></a>React hook 实现 Redux功能</h3><h4 id="1-useContext的使用"><a href="#1-useContext的使用" class="headerlink" title="1. useContext的使用"></a>1. <code>useContext</code>的使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState, useContext, useMemo, createContext &#125; from &#39;react&#39;;</span><br><span class="line"></span><br><span class="line">const CountContext &#x3D; createContext();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;子组件</span><br><span class="line">const Count &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const &#123; count &#125; &#x3D; useContext(CountContext);</span><br><span class="line"></span><br><span class="line">  const counts &#x3D; useMemo(() &#x3D;&gt; &#123;</span><br><span class="line">    console.log(count);</span><br><span class="line">    return count;</span><br><span class="line">  &#125;, [count]);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;React.Fragment&gt;</span><br><span class="line">      &lt;p&gt;&#123;counts&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;React.Fragment&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 子组件</span><br><span class="line">const Num &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const &#123; num &#125; &#x3D; useContext(CountContext);</span><br><span class="line"></span><br><span class="line">  const nums &#x3D; useMemo(() &#x3D;&gt; &#123;</span><br><span class="line">    console.log(num);</span><br><span class="line">    return num;</span><br><span class="line">  &#125;, [num]);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;React.Fragment&gt;</span><br><span class="line">      &lt;p&gt;&#123;nums&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;React.Fragment&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;父组件</span><br><span class="line">const Example1 &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const [count, setCount] &#x3D; useState(0);</span><br><span class="line">  const [num, setNum] &#x3D; useState(1);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;YOU CLICK ME &#123;count&#125; TIMES&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div&gt;YOU CLICK His &#123;num&#125; TIMES&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; &#123; setCount(count + 1) &#125;&#125;&gt;点击按钮+1&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; &#123; setNum(num + 2) &#125;&#125;&gt;点击按钮+2&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;CountContext.Provider value&#x3D;&#123;&#123; count, num &#125;&#125;&gt;</span><br><span class="line">        &lt;Count &#x2F;&gt;</span><br><span class="line">        &lt;Num &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;CountContext.Provider&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Example1;</span><br></pre></td></tr></table></figure><p>通过<code>createContext()</code>创建一个<code>contenxt</code>环境可以想子孙组件传值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const CountContext &#x3D; createContext();</span><br></pre></td></tr></table></figure><p>通过在父组件注册：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;CountContext.Provider value&#x3D;&#123;&#123; count, num &#125;&#125;&gt;</span><br><span class="line">  &lt;Count &#x2F;&gt;</span><br><span class="line">  &lt;Num &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;CountContext.Provider&gt;</span><br></pre></td></tr></table></figure><p>在子组件中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const &#123; num &#125; &#x3D; useContext(CountContext);</span><br><span class="line">...</span><br><span class="line">const &#123; count &#125; &#x3D; useContext(CountContext);</span><br></pre></td></tr></table></figure><p>使用<code>useMemo</code>做性能优化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  const counts &#x3D; useMemo(() &#x3D;&gt; &#123;</span><br><span class="line">    console.log(count);</span><br><span class="line">    return count;</span><br><span class="line">  &#125;, [count]);</span><br><span class="line">&#x2F;&#x2F;count数值没有改变时，缓存值，不渲染</span><br></pre></td></tr></table></figure><h4 id="2-useReducer使用"><a href="#2-useReducer使用" class="headerlink" title="2. useReducer使用"></a>2. <code>useReducer</code>使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useReducer &#125; from &#39;react&#39;;</span><br><span class="line"></span><br><span class="line">const Example2 &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">  const reducer &#x3D; (state, action) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(state, action)</span><br><span class="line">    switch (action) &#123;</span><br><span class="line">      case &#39;add&#39;:</span><br><span class="line">        return state + 1</span><br><span class="line">      case &#39;sub&#39;:</span><br><span class="line">        return state - 1</span><br><span class="line">      default:</span><br><span class="line">        return state</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  const [count, dispatch] &#x3D; useReducer(reducer, 0);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;现在的数量是&#123;count&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; &#123; dispatch(&#39;add&#39;) &#125;&#125;&gt;Add&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; &#123; dispatch(&#39;sub&#39;) &#125;&#125;&gt;Sub&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Example2;</span><br></pre></td></tr></table></figure><p><code>useReducer</code> 接受一个 <code>reducer</code> 函数作为参数，<code>reducer</code> 接受两个参数一个是 <code>state</code> 另一个是 <code>action</code> 。然后返回一个状态<code>count</code>和 <code>dispath</code>，<code>count</code> 是返回状态中的值，而<code>dispatch</code> 是一个可以发布事件来更新 <code>state</code> 的。</p><h4 id="3-Redux的功能的实现"><a href="#3-Redux的功能的实现" class="headerlink" title="3. Redux的功能的实现"></a>3. <code>Redux</code>的功能的实现</h4><blockquote><p>对与<code>Redux</code>的实现，需要使用<code>useContext</code>、<code>useReducer</code>两个钩子函数</p></blockquote><ol><li><p>首先</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import Color from &#39;.&#x2F;component&#x2F;Color&#39;;</span><br><span class="line">import Button from &#39;.&#x2F;component&#x2F;Button&#39;;</span><br><span class="line">import ShowArea from &#39;.&#x2F;component&#x2F;ShowArea&#39;;</span><br><span class="line"></span><br><span class="line">const Example3 &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">  return &lt;Color&gt;</span><br><span class="line">    &lt;Button &#x2F;&gt;</span><br><span class="line">    &lt;ShowArea &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;Color&gt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Example3;</span><br></pre></td></tr></table></figure></li><li><p>然后创建<code>Color</code>组件，其中<code>Color</code>组件充当<code>Provider</code>的作用，向其他<code>子组件</code>传值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useReducer &#125; from &#39;react&#39;;</span><br><span class="line">import &#123; reducer &#125; from &#39;..&#x2F;store&#x2F;reducer&#39;;</span><br><span class="line">import &#123; ColorContext &#125; from &#39;..&#x2F;store&#x2F;index&#39;;</span><br><span class="line"></span><br><span class="line">const Color &#x3D; (props) &#x3D;&gt; &#123;</span><br><span class="line">  const [color, dispatch] &#x3D; useReducer(reducer, &#39;pink&#39;);</span><br><span class="line"></span><br><span class="line">  return &lt;ColorContext.Provider value&#x3D;&#123;&#123; color, dispatch &#125;&#125;&gt;</span><br><span class="line">    &#123;props.children&#125;</span><br><span class="line">  &lt;&#x2F;ColorContext.Provider&gt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Color;</span><br></pre></td></tr></table></figure></li><li><p>同时再创建<code>store</code>文件夹，再<code>store</code>文件夹下面创建<code>index.js</code>、<code>reducer.js</code>、<code>constants.js</code>、<code>actionCreators.js</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;index.js</span><br><span class="line"></span><br><span class="line">import &#123; createContext &#125; from &#39;react&#39;;</span><br><span class="line"></span><br><span class="line">export const ColorContext &#x3D; createContext(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; reducer.js</span><br><span class="line"></span><br><span class="line">import &#123; UPDATE_COLOR &#125; from &#39;.&#x2F;constants&#39;;</span><br><span class="line"></span><br><span class="line">export const reducer &#x3D; (state, action) &#x3D;&gt; &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case UPDATE_COLOR:</span><br><span class="line">      return action.data</span><br><span class="line">    default:</span><br><span class="line">      return state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; contants.js</span><br><span class="line"></span><br><span class="line">export const UPDATE_COLOR &#x3D; &#39;UPDATE_COLOR&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; actionCreators.js</span><br><span class="line"></span><br><span class="line">import &#123; UPDATE_COLOR &#125; from &#39;.&#x2F;constants&#39;;</span><br><span class="line"></span><br><span class="line">export const changeColor &#x3D; (data) &#x3D;&gt; (&#123;</span><br><span class="line">  type: UPDATE_COLOR,</span><br><span class="line">  data</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>创建<code>Button.js</code>提供<code>useReducer</code> 的 <code>dispatch</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useContext &#125; from &#39;react&#39;;</span><br><span class="line">import &#123; ColorContext &#125; from &#39;..&#x2F;store&#x2F;index&#39;;</span><br><span class="line">import &#123; changeColor &#125; from &#39;..&#x2F;store&#x2F;actionCreators&#39;;</span><br><span class="line"></span><br><span class="line">const Button &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const &#123; dispatch &#125; &#x3D; useContext(ColorContext);</span><br><span class="line"></span><br><span class="line">  const handleRed &#x3D; (data) &#x3D;&gt; &#123;</span><br><span class="line">    return dispatch(changeColor(data));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const handleBlue &#x3D; (data) &#x3D;&gt; &#123;</span><br><span class="line">    return dispatch(changeColor(data));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; &#123; handleRed(&#39;red&#39;) &#125;&#125;&gt;红色&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; &#123; handleBlue(&#39;blue&#39;) &#125;&#125;&gt;蓝色&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Button;</span><br></pre></td></tr></table></figure></li><li><p>创建<code>ShowArea.js</code>提供<code>useReducer</code>提供的<code>color</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useContext &#125; from &#39;react&#39;;</span><br><span class="line">import &#123; ColorContext &#125; from &#39;..&#x2F;store&#x2F;index&#39;;</span><br><span class="line"></span><br><span class="line">const ShowArea &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const &#123; color &#125; &#x3D; useContext(ColorContext);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div style&#x3D;&#123;&#123; color: color &#125;&#125;&gt;</span><br><span class="line">      字体颜色是&#123;color&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default ShowArea;</span><br></pre></td></tr></table></figure></li></ol><h5 id="如何就能实现Redux的功能"><a href="#如何就能实现Redux的功能" class="headerlink" title="如何就能实现Redux的功能"></a>如何就能实现<code>Redux</code>的功能</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;React-hook-实现-Redux功能&quot;&gt;&lt;a href=&quot;#React-hook-实现-Redux功能&quot; class=&quot;headerlink&quot; title=&quot;React hook 实现 Redux功能&quot;&gt;&lt;/a&gt;React hook 实现 Redux功能&lt;/</summary>
      
    
    
    
    
    <category term="react" scheme="http://example.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>简述Js中的原型与原型链</title>
    <link href="http://example.com/2020/08/11/%E7%AE%80%E8%BF%B0Js%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>http://example.com/2020/08/11/%E7%AE%80%E8%BF%B0Js%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</id>
    <published>2020-08-11T10:58:12.000Z</published>
    <updated>2021-03-12T07:20:46.798Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、原型"><a href="#1、原型" class="headerlink" title="1、原型"></a>1、原型</h2><p> Javascript是基于对象的编程语言，他其中也含有部分封装、继承的概念，而原型概念便是基于继承的。</p><p> 函数的原型类似于面向对象语言中子类的父类，而函数本身类似于子类。函数继承了函数原型中的属性和方法，即函数本身可以调用它原型中的属性和方法。</p><p> 知识点：若有函数Person，则它的函数原型为Person.prototype，函数原型本身是个对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function Person (name) &#123;</span><br><span class="line">  this.name &#x3D; name;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.type &#x3D; &#39;human&#39;</span><br><span class="line">Person.prototype.sayName &#x3D; function () &#123;</span><br><span class="line">  console.log(this.name + &#39;说话了&#39;)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;此时我们用Person构造函数构造了一个p对象</span><br><span class="line">var p &#x3D; new Person(&#39;小王&#39;);</span><br><span class="line">&#x2F;&#x2F;我们打印p.name</span><br><span class="line">console.log(p.name); &#x2F;&#x2F;结果是&#39;小王&#39;，因为Preson函数中已经预置了name属性并且接受了new对象时传入的&#39;小王&#39;，结果勿容置疑</span><br><span class="line">&#x2F;&#x2F;我们再打印p.type 调用p.sayName()  按常理说Preson构造函数中是不存在type属性和sayName方法，若调用应该会报错</span><br><span class="line">console.log(p.type); &#x2F;&#x2F;结果  human</span><br><span class="line">p.sayName(); &#x2F;&#x2F; 结果  小王说话了</span><br><span class="line">&#x2F;&#x2F;结果和我们预想的不同，这是为什么呢?</span><br><span class="line">&#x2F;&#x2F;因为Person继承了它原型Person.prototype中的信息，当调用p.type时，会优先在Person类中找该属性，若找到了则直接使用，若没找到则在他的原型中找并使用。因为我们设置了Person原型的type属性的，则p可以直接使用</span><br></pre></td></tr></table></figure><p>在上面的例子中涉及到了 构造函数、对象和函数原型，接下来给出三者之间的关系图；</p><h2 id="2、构造函数、实例、原型三者之间的关系"><a href="#2、构造函数、实例、原型三者之间的关系" class="headerlink" title="2、构造函数、实例、原型三者之间的关系"></a>2、构造函数、实例、原型三者之间的关系</h2><p><img src="https://howlcn1997.github.io/2020/01/17/%E7%AE%80%E8%BF%B0Js%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/%E4%B8%89%E8%80%85%E5%85%B3%E7%B3%BB.png" alt="三者关系"></p><p>由图中我们可以很直观的看到三者之间的关系。</p><p>p对象由Person构造函数构造</p><p>p对象通过__proto__属性访问到Person对象原型</p><p>Person对象原型通过constructor访问Person构造函数</p><p>Person函数通过prototype属性访问到Person原型对象</p><p>注意：对象是通过__proto__属性访问对象原型，函数是通过prototype访问对象原型，但两者访问到的对象原型是同一个</p><p>验证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(p.__proto__ &#x3D;&#x3D; Person.prototype); &#x2F;&#x2F;结果为 true</span><br></pre></td></tr></table></figure><p>constructor的作用：可以使得对象访问到对应的构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function Person()&#123;</span><br><span class="line">&#125;</span><br><span class="line">var p &#x3D; new Person();</span><br><span class="line">console.log(p.constructor);&#x2F;&#x2F; 打印  function Person()</span><br></pre></td></tr></table></figure><p>知道以上的知识之后，我们还要了解，其实Person的原型也有原型，即存在Person.prototype.prototype，并且它是Person.prototype的原型，可以用图来直观了解这其中的关系，这便是一个简单的原型链。</p><h2 id="3、原型链"><a href="#3、原型链" class="headerlink" title="3、原型链"></a>3、原型链</h2><p><img src="https://howlcn1997.github.io/2020/01/17/%E7%AE%80%E8%BF%B0Js%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E9%93%BE.png" alt="原型链"></p><h2 id="4、原型链中的搜索规则"><a href="#4、原型链中的搜索规则" class="headerlink" title="4、原型链中的搜索规则"></a>4、原型链中的搜索规则</h2><p>了解了 <strong>构造函数-实例-原型对象</strong> 三者之间的关系后，接下来我们来解释一下为什么实例对象可以访问原型对象中的成员。</p><p>每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性</p><ul><li>搜索首先从对象实例本身开始</li><li>如果在实例中找到了具有给定名字的属性，则返回该属性的值</li><li>如果没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性</li><li>如果在原型对象中找到了这个属性，则返回该属性的值</li></ul><p>也就是说，在我们调用 <code>p.sayName()</code> 的时候，会先后执行两次搜索：</p><ul><li>首先，解析器会问：“实例 p 有 sayName 属性吗？”答：“没有。</li><li>”然后，它继续搜索，再问：“ p 的原型有 sayName 属性吗？”答：“有。</li><li>”于是，它就读取那个保存在原型对象中的函数。</li></ul><p>而这正是多个对象实例共享原型所保存的属性和方法的基本原理。</p><p>总结：</p><ul><li>先在自己身上找，找到即返回</li><li>自己身上找不到，则沿着原型链向上查找，找到即返回</li><li>如果一直到原型链的末端还没有找到，则返回 <code>undefined</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、原型&quot;&gt;&lt;a href=&quot;#1、原型&quot; class=&quot;headerlink&quot; title=&quot;1、原型&quot;&gt;&lt;/a&gt;1、原型&lt;/h2&gt;&lt;p&gt; Javascript是基于对象的编程语言，他其中也含有部分封装、继承的概念，而原型概念便是基于继承的。&lt;/p&gt;
&lt;p&gt; 函</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>creat-react-app</title>
    <link href="http://example.com/2020/07/01/creat-react-app/"/>
    <id>http://example.com/2020/07/01/creat-react-app/</id>
    <published>2020-07-01T12:43:35.000Z</published>
    <updated>2021-03-14T07:51:51.555Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、初始化React-App"><a href="#1、初始化React-App" class="headerlink" title="1、初始化React App"></a>1、初始化React App</h1><h2 id="1-1、安装"><a href="#1-1、安装" class="headerlink" title="1.1、安装"></a>1.1、安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 全局安装</span><br><span class="line">npm install -g create-react-app</span><br></pre></td></tr></table></figure><h2 id="1-2、创建一个app项目"><a href="#1-2、创建一个app项目" class="headerlink" title="1.2、创建一个app项目"></a>1.2、创建一个app项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 构建一个my-app的项目</span><br><span class="line">npm init react-app my-app</span><br></pre></td></tr></table></figure><h2 id="1-3、启动编译"><a href="#1-3、启动编译" class="headerlink" title="1.3、启动编译"></a>1.3、启动编译</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><h1 id="2、webpack配置"><a href="#2、webpack配置" class="headerlink" title="2、webpack配置"></a>2、webpack配置</h1><h2 id="2-1、react-app-rewired"><a href="#2-1、react-app-rewired" class="headerlink" title="2.1、react-app-rewired"></a>2.1、react-app-rewired</h2><blockquote><p>使用 react-app-rewired 添加或修改 webpack 的 配置</p></blockquote><h3 id="2-1-1、安装"><a href="#2-1-1、安装" class="headerlink" title="2.1.1、安装"></a>2.1.1、安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i react-app-rewired --save-dev</span><br></pre></td></tr></table></figure><h3 id="2-1-2、修改package-json"><a href="#2-1-2、修改package-json" class="headerlink" title="2.1.2、修改package.json"></a>2.1.2、修改package.json</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;react-app-rewired start&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;react-app-rewired build&quot;,</span><br><span class="line">    &quot;test&quot;: &quot;react-app-rewired test&quot;,</span><br><span class="line">    &quot;eject&quot;: &quot;react-scripts eject&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="2-1-3、新建配置文件"><a href="#2-1-3、新建配置文件" class="headerlink" title="2.1.3、新建配置文件"></a>2.1.3、新建配置文件</h3><blockquote><p>在根目录下新建config-override.js</p></blockquote><h4 id="1-配置路径"><a href="#1-配置路径" class="headerlink" title="(1) 配置路径"></a>(1) 配置路径</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const path &#x3D; require(&#39;path&#39;);</span><br><span class="line">function resolve(dir) &#123;</span><br><span class="line">    return path.join(__dirname, &#39;.&#39;, dir)</span><br><span class="line">&#125;</span><br><span class="line">module.exports &#x3D; function override(config, env) &#123;</span><br><span class="line">    config.resolve.alias &#x3D; &#123;</span><br><span class="line">        &#39;@components&#39;: resolve(&#39;src&#x2F;components&#39;),</span><br><span class="line">        &#39;@pages&#39;: resolve(&#39;src&#x2F;pages&#39;),</span><br><span class="line">        &#39;@util&#39;: resolve(&#39;src&#x2F;util&#39;),</span><br><span class="line">        &#39;@config&#39;: resolve(&#39;config&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">    return config;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-配置-loader"><a href="#2-配置-loader" class="headerlink" title="(2) 配置 loader"></a>(2) 配置 loader</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-2、proxy代理配置"><a href="#2-2、proxy代理配置" class="headerlink" title="2.2、proxy代理配置"></a>2.2、proxy代理配置</h2><h3 id="2-2-1、安装"><a href="#2-2-1、安装" class="headerlink" title="2.2.1、安装"></a>2.2.1、安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm http-proxy-middleware -dev</span><br></pre></td></tr></table></figure><h3 id="2-2-2、-新建配置文件"><a href="#2-2-2、-新建配置文件" class="headerlink" title="2.2.2、 新建配置文件"></a>2.2.2、 新建配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const proxy &#x3D; require(&#39;http-proxy-middleware&#39;);</span><br><span class="line">module.exports &#x3D; function (app) &#123;</span><br><span class="line">    app.use(</span><br><span class="line">        proxy(&#39;&#x2F;api&#39;, &#123;</span><br><span class="line">            target: &#39;http:&#x2F;&#x2F;localhost:4000&#39;,</span><br><span class="line">            changeOrigin: true,</span><br><span class="line">            pathRewrite: &#123;</span><br><span class="line">                &quot;^&#x2F;api&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    );</span><br><span class="line">    app.use(proxy(...));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意：代理路径匹配是懒惰的，当满足正则时则停止匹配。因此，当添加多个代理配置时，要注意代理路径的冲突，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.use(</span><br><span class="line">    proxy(&#39;&#x2F;api&#x2F;&#39;, &#123;</span><br><span class="line">        target: &#39;http:&#x2F;&#x2F;localhost:3000&#39;,</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line">app.use(</span><br><span class="line">    proxy(&#39;&#x2F;api2&#39;,&#123;</span><br><span class="line">        target: &#39;http:&#x2F;&#x2F;localhost:4000&#39;,</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>当请求路径为<code>/api2/audio</code> 时，我们想代理到 4000端口，但 却被3000端口代理了，这是因为<code>/api</code>满足<code>/api2</code>,则我们在配置时应该参照如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.use(</span><br><span class="line">    proxy(&#39;&#x2F;api&#39;, &#123;</span><br><span class="line">        target: &#39;http:&#x2F;&#x2F;localhost:3000&#39;,</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line">app.use(</span><br><span class="line">    proxy(&#39;&#x2F;api2&#x2F;&#39;,&#123;</span><br><span class="line">        target: &#39;http:&#x2F;&#x2F;localhost:4000&#39;,</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、初始化React-App&quot;&gt;&lt;a href=&quot;#1、初始化React-App&quot; class=&quot;headerlink&quot; title=&quot;1、初始化React App&quot;&gt;&lt;/a&gt;1、初始化React App&lt;/h1&gt;&lt;h2 id=&quot;1-1、安装&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://example.com/2020/05/11/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://example.com/2020/05/11/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-05-11T14:14:21.000Z</published>
    <updated>2021-03-12T07:07:47.227Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则就是对字符串进行查找、匹配、替换等操作的一串“规则字符串”</p><p>使用方法：在一对斜杠之间添加正则表达式 如：**/** 正则表达式 <strong>/</strong></p><h2 id="正则表达式的组成"><a href="#正则表达式的组成" class="headerlink" title="正则表达式的组成"></a>正则表达式的组成</h2><ul><li>普通字符</li><li>特殊字符（元字符）：正则表达式中具有特殊意义的字符</li></ul><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><table><thead><tr><th><strong>\d</strong></th><th><strong>表示数字</strong></th></tr></thead><tbody><tr><td><strong>\D</strong></td><td><strong>非数字</strong></td></tr><tr><td><strong>\s</strong></td><td><strong>空格符</strong></td></tr><tr><td><strong>\S</strong></td><td><strong>非空格符</strong></td></tr><tr><td><strong>\w</strong></td><td><strong>字母或数字或下划线</strong></td></tr><tr><td><strong>\W</strong></td><td><strong>非字母、数字、下划线</strong></td></tr><tr><td><strong>.</strong></td><td><strong>任意字符（不包含换行符）</strong></td></tr><tr><td><strong>\b</strong></td><td><strong>单词边界</strong></td></tr></tbody></table><p>实例1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;\d&#x2F;; &#x2F;&#x2F;新建一个正则对象</span><br><span class="line"> var str &#x3D; &#39;1&#39;;</span><br><span class="line">console.log(reg.test(str)); &#x2F;&#x2F;true  str中含有数字</span><br><span class="line">&#x2F;&#x2F;test()是正则对象中的一个方法，它会判断str是否满足正则表达式，返回boolean</span><br></pre></td></tr></table></figure><h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><p>限定之前表达式出现的次数</p><table><thead><tr><th>*****</th><th><strong>重复0次或多次</strong></th></tr></thead><tbody><tr><td><strong>+</strong></td><td><strong>重复1次或多次</strong></td></tr><tr><td><strong>？</strong></td><td><strong>重复0次或1次</strong></td></tr><tr><td><strong>{n}</strong></td><td><strong>重复n次 (连续)</strong></td></tr><tr><td><strong>{n,}</strong></td><td><strong>重复至少n次 (连续)</strong></td></tr><tr><td><strong>{n,m}</strong></td><td><strong>重复n到m次 (连续)</strong></td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;\d*&#x2F;;</span><br><span class="line">console.log(reg.test(&#39;w&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;12&#39;));&#x2F;&#x2F;true</span><br><span class="line">var reg &#x3D; &#x2F;\d+&#x2F;;</span><br><span class="line">console.log(reg.test(&#39;w&#39;));&#x2F;&#x2F;false</span><br><span class="line">console.log(reg.test(&#39;12&#39;));&#x2F;&#x2F;true</span><br><span class="line">var reg &#x3D; &#x2F;\d?&#x2F;;</span><br><span class="line">console.log(reg.test(&#39;w&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;12&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;w12&#39;));&#x2F;&#x2F;true</span><br><span class="line">&#x2F;&#x2F;这里12出现了两次，不满足“重复0次或1次”的条件为什么显示为true呢？</span><br><span class="line">&#x2F;&#x2F;当执行test()时，只要字符串中有部分满足条件则返回true）</span><br><span class="line">&#x2F;&#x2F;解决办法var reg &#x3D; &#x2F;^\d?$&#x2F;;  加上开始结束符（后面会介绍）</span><br><span class="line">var reg &#x3D; &#x2F;\d&#123;2&#125;&#x2F;;&#x2F;&#x2F;&#123;n&#125;</span><br><span class="line">console.log(reg.test(&#39;2&#39;));&#x2F;&#x2F;false</span><br><span class="line">console.log(reg.test(&#39;23&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;2w3&#39;));&#x2F;&#x2F;false  不连续时匹配失败</span><br><span class="line">console.log(reg.test(&#39;234&#39;));&#x2F;&#x2F;true  (理应为false)原因同上</span><br><span class="line">console.log(reg.test(&#39;ab234&#39;));&#x2F;&#x2F;true  (理应为false)原因同上  解决办法同上</span><br><span class="line">var reg &#x3D; &#x2F;\d&#123;2,&#125;&#x2F;;&#x2F;&#x2F;&#123;n,&#125;  &#x2F;&#x2F;同样存在以上问题</span><br><span class="line">var reg &#x3D; &#x2F;\d&#123;2,6&#125;&#x2F;;&#x2F;&#x2F;&#123;n,m&#125;  &#x2F;&#x2F;同样存在以上问题</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="范围符"><a href="#范围符" class="headerlink" title="范围符[ ]"></a>范围符[ ]</h2><p>1、[a-z]、[A-Z]、[0-9],也可以综合写成[a-zA-Z0-9]；当然这范围是自己定义的，比如[a-b]，范围是a到b。</p><p>2、[\u4e00-\u9fa5] 匹配汉字的范围 其中\u4e00，\u9fa5是中日韩汉字Unicode表中对应的编码 4e00对应“一” 9fa5对应“龥”</p><p><a href="http://www.chi2ko.com/tool/CJK.htm">中日韩汉字Unicode表</a></p><p>3、[ab5&amp;@],仅匹配 a 或 b 或 5 或 &amp; 或 @</p><p>4、**[^ab5&amp;@]** 匹配除 a 或 b 或 5 或 &amp; 或 @之外的内容 （注意此处^是在[ ]内的，<strong>区别于开始符^</strong>,两者所处位置不同）</p><p>5、3 | a 匹配3或者a字符</p><h2 id="开始结束符号"><a href="#开始结束符号" class="headerlink" title="开始结束符号"></a>开始结束符号</h2><table><thead><tr><th><strong>^</strong></th><th><strong>开始符（强制规定匹配开始的地方）</strong></th></tr></thead><tbody><tr><td><strong>$</strong></td><td><strong>结束符（强制规定匹配结束的地方）</strong></td></tr></tbody></table><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">^\d 字符串要以数字开始，数字只能出现一次</span><br><span class="line">\d$  字符串要以数字结束，数字只能出现一次</span><br><span class="line">^\d$  字符串要以数字开始和结束，数字只能出现一次</span><br><span class="line">\d+$  字符串要以数字开始，以数字结束，数字只能出现一次</span><br><span class="line">^\d?$  字符串要以数字开头和结束，数字出现0次或1次</span><br></pre></td></tr></table></figure><p>我们来解释 <strong>var reg = /\d?/;</strong> 例子中出现的问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;\d?&#x2F;;</span><br><span class="line">console.log(reg.test(&#39;w&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;12&#39;));&#x2F;&#x2F;开始检测，当检测到 1 时，因为满足了数字出现0次，匹配成功，返回true，此时结束位置在1和2之间</span><br><span class="line">&#x2F;&#x2F;加入开始结束符</span><br><span class="line">var reg &#x3D; &#x2F;^\d?$&#x2F;;</span><br><span class="line">console.log(reg.test(&#39;w&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;12&#39;));&#x2F;&#x2F;当加入开始结束字符后，开始匹配位置强制从1开始 2结束</span><br><span class="line">&#x2F;&#x2F;则12是由两个数字的  不符合“重复0次或1次”的条件，则为false</span><br></pre></td></tr></table></figure><p>我们来解释 <strong>var reg = /\d{2}/;</strong> 例子中出现的问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;\d&#123;2&#125;&#x2F;;&#x2F;&#x2F;&#123;n&#125;</span><br><span class="line">console.log(reg.test(&#39;2&#39;));&#x2F;&#x2F;false</span><br><span class="line">console.log(reg.test(&#39;23&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;234&#39;));&#x2F;&#x2F;true  开始字符为2  结束字符为3</span><br><span class="line">console.log(reg.test(&#39;ww234&#39;));&#x2F;&#x2F;true 开始字符为2  结束字符为3</span><br><span class="line">var reg &#x3D; &#x2F;^\d&#123;2&#125;$&#x2F;;&#x2F;&#x2F;&#123;n&#125;</span><br><span class="line">console.log(reg.test(&#39;2&#39;));&#x2F;&#x2F;false</span><br><span class="line">console.log(reg.test(&#39;23&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;234&#39;));&#x2F;&#x2F;false  开始字符为2  结束字符为4</span><br><span class="line">console.log(reg.test(&#39;ab234&#39;));&#x2F;&#x2F;false 开始字符为a  结束字符为4</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="正则对象的创建方式"><a href="#正则对象的创建方式" class="headerlink" title="正则对象的创建方式"></a>正则对象的创建方式</h2><h3 id="1、new-RegExp"><a href="#1、new-RegExp" class="headerlink" title="1、new RegExp()"></a>1、new RegExp()</h3><p>RegExp(reg,msg) 参数一：正则表达式</p><p>参数二：附加条件（如：i 忽略大小写，g 全局匹配）</p><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var reg &#x3D; new RegExp(&#39;\\w+&#39;,&#39;ig&#39;);  &#x2F;&#x2F;注意，此处第一个\是转义字符，因为参数一不能直接传入正则表达式</span><br><span class="line">var reg &#x3D; new RegExp(&#39;[a-z]&#39;,&#39;ig&#39;);</span><br><span class="line">var str &#x3D; &quot;AaaC2_&quot;;</span><br><span class="line">console.log(reg.test(str));&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><h3 id="2、简写"><a href="#2、简写" class="headerlink" title="2、简写"></a>2、简写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;[a-z]&#x2F;ig;</span><br><span class="line">var str &#x3D; &quot;AaaC2_&quot;;</span><br><span class="line">console.log(reg.test(str));&#x2F;&#x2F;true</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="正则对象的方法"><a href="#正则对象的方法" class="headerlink" title="正则对象的方法"></a>正则对象的方法</h2><p>RegExp.test(‘字符串’); 判断字符串知否满足正则表达式 返回布尔值</p><p>RegExp.exec(‘字符串’); 判断字符串知否满足正则表达式 将找到的内容以数组的形式返回</p><p>1、不使用 “<code>g</code>“ 标志时,每次都返回第一个找的内容 而不继续向后查找</p><p>2、当正则表达式使用 “<code>g</code>“ 标志时，可以多次执行 <code>exec</code> 方法来查找同一个字符串中的成功匹配。当你这样做时，查找将从正则表达式的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex"><code>lastIndex</code></a> 属性指定的位置开始</p><p><strong>lastIndex</strong>:</p><p>只有正则表达式使用了表示全局检索的 “<code>g</code>“ 标志时，该属性才会起作用。此时应用下面的规则：</p><ul><li>如果 <code>lastIndex</code> 大于字符串的长度，则 <code>regexp.test</code> 和 <code>regexp.exec</code> 将会匹配失败，然后 <code>lastIndex</code> 被设置为 0。</li><li>如果 <code>lastIndex</code> 等于字符串的长度，且该正则表达式匹配空字符串，则该正则表达式匹配从 <code>lastIndex</code> 开始的字符串。（then the regular expression matches input starting at <code>lastIndex</code>.）</li><li>如果 <code>lastIndex</code> 等于字符串的长度，且该正则表达式不匹配空字符串 ，则该正则表达式不匹配字符串，<code>lastIndex</code> 被设置为 0.。</li><li>否则，<code>lastIndex</code> 被设置为紧随最近一次成功匹配的下一个位置。</li></ul><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;找出所有三个英文字母组成的  并且以A开头的单词</span><br><span class="line">var str &#x3D; &#39;Asd Asss wes sgetgs x Adv Wdf&#39;;</span><br><span class="line">var reg &#x3D; &#x2F;\bA[A-Za-z]&#123;2&#125;\b&#x2F;g;</span><br><span class="line">console.log(reg.lastIndex);&#x2F;&#x2F;初始值为0</span><br><span class="line">var word &#x3D; reg.exec(str);&#x2F;&#x2F;￥1￥</span><br><span class="line">console.log(reg.lastIndex);&#x2F;&#x2F;3</span><br><span class="line">while(word)&#123;</span><br><span class="line">    console.log(word);</span><br><span class="line">    word &#x3D; reg.exec(str);&#x2F;&#x2F;￥2￥</span><br><span class="line">    console.log(reg.lastIndex);</span><br><span class="line">&#125;</span><br><span class="line">onsole.log(word);&#x2F;&#x2F;null</span><br><span class="line">console.log(reg.lastIndex);&#x2F;&#x2F;0</span><br></pre></td></tr></table></figure><p>该函数运行的实质：exec每一次执行都有开始位置，而这个开始位置是由RegExp对象的lastIndex属性值所决定的；</p><p>以下为该段代码的执行顺序与解析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1、reg.lastIndex 的初始值为0</span><br><span class="line">2、执行￥1￥处的exec时，当前的lastIndex数值为0，则exec从字符串的0位置（即A字符）开始。执行结束，将**所找的字符串**（Asd）以数组的形式返回给word，并修改reg.lastIndex的值为&quot; **所找到的字符串最后一个的位置的下一个位置** &quot;（也就是d下标加一，为3），</span><br><span class="line">3、执行while循环，word此时为[Asd]数组，while语句判断成功</span><br><span class="line">4、执行￥2￥处的exec，此时reg.lastIndex为3，则从字符串中下标为3的字符开始执行，找到 &quot;Adv&quot;,  v的下标为24，则reg.lastIndex的值被设置为25，word此时为[Adv]数组</span><br><span class="line">5、判断while 成功</span><br><span class="line">6、执行￥2￥处的exec，此时reg.lastIndex为25，则从字符串中下标为25的字符开始执行，未找到满足条件的内容，则返回null给word，并将reg.lastIndex设为0；</span><br><span class="line">7、判断while,此时word为null，判断失败，则跳出循环</span><br><span class="line">8、程序结束</span><br></pre></td></tr></table></figure><h2 id="懒惰模式与贪婪模式"><a href="#懒惰模式与贪婪模式" class="headerlink" title="懒惰模式与贪婪模式"></a>懒惰模式与贪婪模式</h2><p>懒惰模式：在满足条件的前提下，尽可能<strong>少</strong>的匹配字符</p><p>贪婪模式：在满足条件的前提下，尽可能<strong>多</strong>的匹配字符</p><p>正则表达式的量词有：* + ？ {}</p><p>量词默认是贪婪模式，当在量词之后加上?时，将贪婪模式转换为懒惰模式。</p><h2 id="分组提取"><a href="#分组提取" class="headerlink" title="分组提取"></a>分组提取</h2><p>正则中（）表示分组</p><p>若存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((((a))((b)))(c))</span><br></pre></td></tr></table></figure><p>则第一组；(((a))((b)))(c)</p><p>第二组：((a))</p><p>第三组：(a)</p><p>第四组：(b)</p><p>第五组：(c)</p><p>找法：从左往右找左括号(</p><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;((\d+)(\w+))&#x2F;;</span><br><span class="line">var str &#x3D; &quot;123abc_c&quot;</span><br><span class="line">if(reg.test(str))&#123;</span><br><span class="line">    &#x2F;&#x2F;$后的数字 类似数组的下标</span><br><span class="line">    console.log(RegExp.$1);&#x2F;&#x2F;获得第一组(\d+)(\w+)的内容  则是123abc_c</span><br><span class="line">    console.log(RegExp.$2);&#x2F;&#x2F;获得第二组(\d+)的内容  则是123</span><br><span class="line">    console.log(RegExp.$3);&#x2F;&#x2F;获得第二组(\w+)的内容  则是abc_c</span><br><span class="line">&#125;</span><br><span class="line">字符串</span><br></pre></td></tr></table></figure><h2 id="字符串中正则的使用"><a href="#字符串中正则的使用" class="headerlink" title="字符串中正则的使用"></a>字符串中正则的使用</h2><p>方法：</p><table><thead><tr><th><strong>String.match(正则对象)</strong></th><th><strong>返回符合正则条件的集合</strong></th></tr></thead><tbody><tr><td><strong>String.replace(正则对象,”替换的字符串”)</strong></td><td><strong>替换字符串，若要全局替换，正则对象要加g</strong></td></tr><tr><td><strong>String.search(正则对象)</strong></td><td><strong>查找字符串，返回查找内容的第一次出现的位置</strong></td></tr><tr><td><strong>String.split(正则对象)</strong></td><td><strong>切割字符串，返回切割后的数组</strong></td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;match</span><br><span class="line">var str&#x3D;&quot;abc123ee23f90&quot;;</span><br><span class="line">&#x2F;&#x2F;将字符串中所有出现的每一个数字提取出来</span><br><span class="line">var arr &#x3D;  str.match(&#x2F;\d&#x2F;g);</span><br><span class="line">console.log(arr);</span><br><span class="line">&#x2F;&#x2F;将字符串中所有出现的连续的数字提取出来</span><br><span class="line">var arr &#x3D;  str.match(&#x2F;\d+&#x2F;g);</span><br><span class="line">console.log(arr);</span><br><span class="line">&#x2F;&#x2F;replace</span><br><span class="line">&#x2F;&#x2F;替换所有 - +</span><br><span class="line">var str &#x3D; &quot;a-b-+b-c&quot;;</span><br><span class="line">console.log(str.replace(&#x2F;-|\+&#x2F;g,&quot;*&quot;));&#x2F;&#x2F;结果a*b**b*c</span><br><span class="line">&#x2F;&#x2F;若不加g  则结果为a*b-+b-c</span><br><span class="line">&#x2F;&#x2F;search</span><br><span class="line">&#x2F;&#x2F;忽略大小写  找到第一个b的下标</span><br><span class="line">var str &#x3D; &quot;a-b-b-c&quot;;</span><br><span class="line">console.log(str.search(&#x2F;B&#x2F;i));&#x2F;&#x2F;结果2</span><br><span class="line">&#x2F;&#x2F;split</span><br><span class="line">var str&#x3D;&quot;a|b|c|&quot;;</span><br><span class="line">console.log(str.split(&#x2F;\|&#x2F;));&#x2F;&#x2F;结果  &quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h1&gt;&lt;p&gt;正则就是对字符串进行查找、匹配、替换等操作的一串“规则字符串”&lt;/p&gt;
&lt;p&gt;使用方法：在一对斜杠之间添加正则表达式</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Uniapp实现多端开发</title>
    <link href="http://example.com/2020/05/05/Uniapp%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    <id>http://example.com/2020/05/05/Uniapp%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%AB%AF%E5%BC%80%E5%8F%91/</id>
    <published>2020-05-05T06:04:52.000Z</published>
    <updated>2021-03-12T07:25:30.667Z</updated>
    
    <content type="html"><![CDATA[<p>#1.uni-app的基本使用</p><p>课程介绍：</p><p>基础部分：</p><ul><li>环境搭建</li><li>页面外观配置</li><li>数据绑定</li><li>uni-app的生命周期</li><li>组件的使用</li><li>uni-app中样式学习</li><li>在uni-app中使用字体图标和开启scss</li><li>条件注释跨端兼容</li><li>uni中的事件</li><li>导航跳转</li><li>组件创建和通讯，及组件的生命周期</li><li>uni-app中使用uni-ui库</li></ul><p>项目：极客商城项目</p><h2 id="1-1-uni-app介绍-官方网页"><a href="#1-1-uni-app介绍-官方网页" class="headerlink" title="1.1 uni-app介绍 官方网页"></a>1.1 uni-app介绍 <a href="https://uniapp.dcloud.io/resource">官方网页</a></h2><p><code>uni-app</code> 是一个使用 <a href="https://vuejs.org/">Vue.js</a> 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉）等多个平台。</p><p>即使不跨端，<code>uni-app</code>同时也是更好的小程序开发框架。</p><p>具有vue和微信小程序的开发经验，可快速上手uni-app</p><p>为什么要去学习uni-app？</p><p>相对开发者来说，减少了学习成本，因为只学会uni-app之后，即可开发出iOS、Android、H5、以及各种小程序的应用，不需要再去学习开发其他应用的框架，相对公司而言，也大大减少了开发成本。</p><h2 id="1-2-环境搭建"><a href="#1-2-环境搭建" class="headerlink" title="1.2 环境搭建"></a>1.2 环境搭建</h2><p>安装编辑器HbuilderX <a href="https://www.dcloud.io/hbuilderx.html">下载地址</a></p><p>HBuilderX是通用的前端开发工具，但为<code>uni-app</code>做了特别强化。</p><p>下载App开发版，可开箱即用</p><p>安装微信开发者工具 <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">下载地址</a></p><h2 id="1-3-利用HbuilderX初始化项目-js"><a href="#1-3-利用HbuilderX初始化项目-js" class="headerlink" title="1.3 利用HbuilderX初始化项目(js)"></a>1.3 利用HbuilderX初始化项目(js)</h2><ul><li>点击HbuilderX菜单栏文件&gt;项目&gt;新建</li><li>选择uni-app,填写项目名称，项目创建的目录</li></ul><h2 id="1-4-使用vue-cli脚手架创建ts项目"><a href="#1-4-使用vue-cli脚手架创建ts项目" class="headerlink" title="1.4 使用vue/cli脚手架创建ts项目"></a>1.4 使用vue/cli脚手架创建ts项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">vue create -p dcloudio&#x2F;uni-preset-vue my-ts</span><br></pre></td></tr></table></figure><h2 id="1-5-运行项目"><a href="#1-5-运行项目" class="headerlink" title="1.5 运行项目"></a>1.5 运行项目</h2><p>在菜单栏中点击运行，运行到浏览器，选择浏览器即可运行</p><p>在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到小程序模拟器 -&gt; 微信开发者工具，即可在微信开发者工具里面体验uni-app</p><p>在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到手机或模拟器 -&gt; 选择调式的手机</p><p><strong>注意：</strong></p><ul><li>如果是第一次使用，需要先配置小程序ide的相关路径，才能运行成功</li><li>微信开发者工具在设置中安全设置，服务端口开启</li></ul><h2 id="1-6-介绍项目目录和文件作用"><a href="#1-6-介绍项目目录和文件作用" class="headerlink" title="1.6 介绍项目目录和文件作用"></a>1.6 介绍项目目录和文件作用</h2><p><code>pages.json</code> 文件用来对 uni-app 进行全局配置，决定页面文件的路径、窗口样式、原生的导航栏、底部的原生tabbar 等</p><p><code>manifest.json</code> 文件是应用的配置文件，用于指定应用的名称、图标、权限等。</p><p><code>App.vue</code>是我们的跟组件，所有页面都是在<code>App.vue</code>下进行切换的，是页面入口文件，可以调用应用的生命周期函数。</p><p><code>main.js</code>是我们的项目入口文件，主要作用是初始化<code>vue</code>实例并使用需要的插件。</p><p><code>uni.scss</code>文件的用途是为了方便整体控制应用的风格。比如按钮颜色、边框风格，<code>uni.scss</code>文件里预置了一批scss变量预置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">就是打包目录，在这里有各个平台的打包文件</span><br><span class="line">​&#96;&#96;&#96;pages&#96;&#96;&#96; 所有的页面存放目录</span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;static&#96;&#96;&#96; 静态资源目录，例如图片等</span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;components&#96;&#96;&#96; 组件存放目录</span><br><span class="line"></span><br><span class="line">为了实现多端兼容，综合考虑编译速度、运行性能等因素，&#96;uni-app&#96; 约定了如下开发规范：</span><br><span class="line"></span><br><span class="line">- 页面文件遵循 [Vue 单文件组件 (SFC) 规范](https:&#x2F;&#x2F;vue-loader.vuejs.org&#x2F;zh&#x2F;spec.html)</span><br><span class="line">- 组件标签靠近小程序规范，详见[uni-app 组件规范](https:&#x2F;&#x2F;uniapp.dcloud.io&#x2F;component&#x2F;README)</span><br><span class="line">- 接口能力（JS API）靠近微信小程序规范，但需将前缀 &#96;wx&#96; 替换为 &#96;uni&#96;，详见[uni-app接口规范](https:&#x2F;&#x2F;uniapp.dcloud.io&#x2F;api&#x2F;README)</span><br><span class="line">- 数据绑定及事件处理同 &#96;Vue.js&#96; 规范，同时补充了App及页面的生命周期</span><br><span class="line">- 为兼容多端运行，建议使用flex布局进行开发</span><br><span class="line"></span><br><span class="line"># 2.vue ts语法</span><br><span class="line"></span><br><span class="line">## 2.1 基本使用</span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;javascript</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">&lt;image class&#x3D;&quot;logo&quot; src&#x3D;&quot;&#x2F;static&#x2F;logo.png&quot;&gt;&lt;&#x2F;image&gt;</span><br><span class="line">&lt;!--属性绑定--&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;text-area&quot;&gt;</span><br><span class="line">&lt;text class&#x3D;&quot;title&quot;&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;text&gt;</span><br><span class="line">&lt;view&gt;&#123;&#123;age&#125;&#125;&lt;&#x2F;view&gt;</span><br><span class="line">&lt;image v-bind:src&#x3D;&quot;img&quot;&gt;&lt;&#x2F;image&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;!--v-if和v-for--&gt;</span><br><span class="line">&lt;view v-for&#x3D;&quot;(item,i) in arr&quot; :key&#x3D;&quot;i&quot;&gt;名字：&#123;&#123;item.name&#125;&#125;---年龄：&#123;&#123;item.age&#125;&#125;&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view v-if&#x3D;&quot;flag&quot;&gt;显示我&lt;&#x2F;view&gt;</span><br><span class="line">&lt;!--点击事件--&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;tapHandle(1,$event)&quot;&gt;点我传参&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button @click.self&#x3D;&quot;printTitle&quot;&gt;点我不传参&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button @click.stop&#x3D;&quot;title &#x3D; &#39;ggg&#39;&quot;&gt;点我修改title&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue,</span><br><span class="line">Watch</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Index extends Vue &#123;</span><br><span class="line">&#x2F;&#x2F;1.响应式属性，对标之前的data函数返回的对象</span><br><span class="line">private title: String &#x3D; &#39;myTitle&#39;;</span><br><span class="line">private num: Number &#x3D; 123;</span><br><span class="line">private img: String &#x3D; &#39;http:&#x2F;&#x2F;destiny001.gitee.io&#x2F;image&#x2F;monkey_02.jpg&#39;</span><br><span class="line">private arr: &#123;&#125; [] &#x3D; [&#123;</span><br><span class="line">name: &#39;刘能&#39;,</span><br><span class="line">age: 29</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: &#39;赵四&#39;,</span><br><span class="line">age: 39</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: &#39;宋小宝&#39;,</span><br><span class="line">age: 49</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: &#39;小沈阳&#39;,</span><br><span class="line">age: 59</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">private flag: Boolean &#x3D; true;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.计算属性</span><br><span class="line">get age(): Number &#123;</span><br><span class="line">return this.num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;3.生命周期</span><br><span class="line">onLoad() &#123;</span><br><span class="line">this.printTitle();</span><br><span class="line">let a: string &#x3D; &#39;123&#39;;</span><br><span class="line">console.log(&quot;onLoad~~~~~~~~~~~~~~~~&quot;)</span><br><span class="line">&#125;</span><br><span class="line">onShow() &#123;</span><br><span class="line">console.log(&quot;onShow~~~~~~~~~~~&quot;)</span><br><span class="line">&#125;</span><br><span class="line">mounted() &#123;</span><br><span class="line">console.log(&quot;mounted~~~~~~~~~~~~~~&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;4.属性监听 此处是监听title的变化</span><br><span class="line">@Watch(&#39;title&#39;)</span><br><span class="line">titleChange(newVal: Number, oldVal: Number) &#123;</span><br><span class="line">console.log(newVal, oldVal);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;5.methods，对标之前methods中写的方法</span><br><span class="line">printTitle(): void &#123; </span><br><span class="line">console.log(&#39;hahahhhaha&#39;)</span><br><span class="line">&#125;</span><br><span class="line">tapHandle(num: number, event: any): void &#123;</span><br><span class="line">console.log(num, event.type)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.content &#123;</span><br><span class="line">display: flex;</span><br><span class="line">flex-direction: column;</span><br><span class="line">align-items: center;</span><br><span class="line">justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.logo &#123;</span><br><span class="line">height: 200rpx;</span><br><span class="line">width: 200rpx;</span><br><span class="line">margin-top: 200rpx;</span><br><span class="line">margin-left: auto;</span><br><span class="line">margin-right: auto;</span><br><span class="line">margin-bottom: 50rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.text-area &#123;</span><br><span class="line">display: flex;</span><br><span class="line">justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.title &#123;</span><br><span class="line">font-size: 36rpx;</span><br><span class="line">color: #8f8f94;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">Javascript</span><br><span class="line">&#x2F;&#x2F;1.vue-class-component：强化 Vue 组件，使用 TypeScript&#x2F;装饰器 增强 Vue 组件</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.vue-property-decorator 是在 vue-class-component 上增强了更多的结合 Vue 特性的装饰器，新增了这 7 个装饰器：</span><br><span class="line">@Emit  </span><br><span class="line">@Inject    </span><br><span class="line">@Model</span><br><span class="line">@Prop</span><br><span class="line">@Provide</span><br><span class="line">@Watch</span><br><span class="line">@Component (从 vue-class-component 继承)</span><br></pre></td></tr></table></figure><h2 id="2-2-uni-app中组件的创建"><a href="#2-2-uni-app中组件的创建" class="headerlink" title="2.2 uni-app中组件的创建"></a>2.2 uni-app中组件的创建</h2><p><a href="https://juejin.im/post/6844903741456384014">https://juejin.im/post/6844903741456384014</a></p><p><a href="https://blog.csdn.net/sllailcp/article/details/102542796/">https://blog.csdn.net/sllailcp/article/details/102542796/</a></p><p><a href="https://www.jianshu.com/p/d8ed3aa76e9b">https://www.jianshu.com/p/d8ed3aa76e9b</a></p><p>在uni-app中，可以通过创建一个后缀名为vue的文件，即创建一个组件成功，其他组件可以将该组件通过impot的方式导入，在通过components进行注册即可</p><ul><li><p>创建head组件，在component中创建head.vue文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">这是头部组件</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123; Component,Vue&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Head extends Vue&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li><li><p>在其他组件中导入该组件并注册</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">&lt;Head&gt;&lt;&#x2F;Head&gt;</span><br><span class="line">&lt;text&gt;</span><br><span class="line">&#123;&#123;msg|msgFormat(&#39;疯狂+1&#39;, &#39;123&#39;)&#125;&#125;</span><br><span class="line">&lt;&#x2F;text&gt;</span><br><span class="line"></span><br><span class="line">&lt;text v-fontsize&#x3D;&quot;15&quot;&gt;测试文字&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line">import Head from &#39;@&#x2F;components&#x2F;head.vue&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;@Component 装饰器可以接收一个对象作为参数，可以在对象中声明 components ，filters，directives等未提供装饰器的选项，也可以声明computed，watch等</span><br><span class="line">@Component(&#123;</span><br><span class="line">components: &#123;</span><br><span class="line">Head</span><br><span class="line">&#125;,</span><br><span class="line">filters: &#123;</span><br><span class="line">msgFormat: function(msg: string, arg: string, arg2: string) &#123;</span><br><span class="line">return msg.replace(&#x2F;少年&#x2F;g, arg + arg2)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#x2F;&#x2F;只在浏览器中有效</span><br><span class="line">directives: &#123; </span><br><span class="line">   &#39;fontsize&#39;: function (el, binding) &#123; </span><br><span class="line">        &#x2F;&#x2F; 注意：这个 function 等同于把代码写到了 bind 和 update 中去</span><br><span class="line">        el.style.fontSize &#x3D; parseInt(binding.value) + &#39;px&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">export default class Index extends Vue &#123;</span><br><span class="line">private msg: String &#x3D; &#39;曾经，我也是一个单纯的少年，单纯的我，傻傻的问，谁是世界上最单纯的男人&#39;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">&lt;Head&gt;&lt;&#x2F;Head&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-3-组件的生命周期函数"><a href="#2-3-组件的生命周期函数" class="headerlink" title="2.3 组件的生命周期函数"></a>2.3 组件的生命周期函数</h2><table><thead><tr><th>beforeCreate</th><th>在实例初始化之后被调用。<a href="https://cn.vuejs.org/v2/api/#beforeCreate">详见</a></th><th></th><th></th></tr></thead><tbody><tr><td>created</td><td>在实例创建完成后被立即调用。<a href="https://cn.vuejs.org/v2/api/#created">详见</a></td><td></td><td></td></tr><tr><td>beforeMount</td><td>在挂载开始之前被调用。<a href="https://cn.vuejs.org/v2/api/#beforeMount">详见</a></td><td></td><td></td></tr><tr><td>mounted</td><td>挂载到实例上去之后调用。<a href="https://cn.vuejs.org/v2/api/#mounted">详见</a> 注意：此处并不能确定子组件被全部挂载，如果需要子组件完全挂载之后在执行操作可以使用<code>$nextTick</code><a href="https://cn.vuejs.org/v2/api/#Vue-nextTick">Vue官方文档</a></td><td></td><td></td></tr><tr><td>beforeUpdate</td><td>数据更新时调用，发生在虚拟 DOM 打补丁之前。<a href="https://cn.vuejs.org/v2/api/#beforeUpdate">详见</a></td><td>仅H5平台支持</td><td></td></tr><tr><td>updated</td><td>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。<a href="https://cn.vuejs.org/v2/api/#updated">详见</a></td><td>仅H5平台支持</td><td></td></tr><tr><td>beforeDestroy</td><td>实例销毁之前调用。在这一步，实例仍然完全可用。<a href="https://cn.vuejs.org/v2/api/#beforeDestroy">详见</a></td><td></td><td></td></tr><tr><td>destroyed</td><td>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。<a href="https://cn.vuejs.org/v2/api/#destroyed">详见</a></td><td></td><td></td></tr></tbody></table><h2 id="2-4-组件的通讯"><a href="#2-4-组件的通讯" class="headerlink" title="2.4 组件的通讯"></a>2.4 组件的通讯</h2><h3 id="2-4-1-父组件给子组件传值"><a href="#2-4-1-父组件给子组件传值" class="headerlink" title="2.4.1 父组件给子组件传值"></a>2.4.1 父组件给子组件传值</h3><p>head.vue通过@props来接受外界传递到组件内部的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">这是头部组件</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue,</span><br><span class="line">Prop</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Head extends Vue &#123;</span><br><span class="line">&#x2F;*</span><br><span class="line">@Prop(options: (PropOptions | Constructor[] | Constructor) &#x3D; &#123;&#125;)</span><br><span class="line"></span><br><span class="line">@Prop装饰器接收一个参数，这个参数可以有三种写法：</span><br><span class="line">Constructor，例如String，Number，Boolean等，指定 prop 的类型；</span><br><span class="line">Constructor[]，指定 prop 的可选类型；</span><br><span class="line">PropOptions，可以使用以下选项：type，default，required，validator。</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;!表示非null 非undefined</span><br><span class="line">@Prop(String) readonly name!: string | undefined;</span><br><span class="line">@Prop(&#123;</span><br><span class="line">default: 30,</span><br><span class="line">type: Number</span><br><span class="line">&#125;) private age!: number;</span><br><span class="line">@Prop([String, Boolean]) private sex!: string | boolean;</span><br><span class="line"></span><br><span class="line">created()&#123;</span><br><span class="line">console.log(this.name,this.age,this.sex)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>其他组件在使用head组件的时候传递值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">&lt;Head :name&#x3D;&quot;name&quot; :age&#x3D;&quot;age&quot; :sex&#x3D;&quot;sex&quot;&gt;&lt;&#x2F;Head&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line">import Head from &#39;@&#x2F;components&#x2F;head.vue&#39;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">components:&#123;</span><br><span class="line">Head</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">export default class Index extends Vue &#123;</span><br><span class="line">private name &#x3D; &#39;张三&#39;;</span><br><span class="line">private age &#x3D; 1;</span><br><span class="line">private sex &#x3D; &#39;nan&#39;;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-4-2-子组件给父组件传值"><a href="#2-4-2-子组件给父组件传值" class="headerlink" title="2.4.2 子组件给父组件传值"></a>2.4.2 子组件给父组件传值</h3><p>通过@emit触发事件进行传递参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">&#x2F;&#x2F;父组件</span><br><span class="line">&lt;Head :name&#x3D;&quot;name&quot; :age&#x3D;&quot;age&quot; :sex&#x3D;&quot;sex&quot; @del&#x3D;&quot;delFromChild&quot; @add&#x3D;&quot;addFromChild&quot;&gt;&lt;&#x2F;Head&gt;</span><br><span class="line"></span><br><span class="line">addFromChild(data: any) &#123;</span><br><span class="line">    &#x2F;&#x2F; this.emitData &#x3D; data;</span><br><span class="line">    console.log(data, &quot;父组件 returnPersons&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">delFromChild(event: MouseEvent,data:any) &#123;</span><br><span class="line">    &#x2F;&#x2F; console.log(this.emitData);</span><br><span class="line">    console.log(event, &quot;父组件 delemit&quot;,data);</span><br><span class="line">&#125;</span><br><span class="line">Javascript</span><br><span class="line">&#x2F;&#x2F;子组件</span><br><span class="line"></span><br><span class="line">&lt;button @click&#x3D;&quot;del($event,&#123;id:1&#125;)&quot;&gt;点击触发del emit&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;add(&#123;name:&#39;张三&#39;&#125;)&quot;&gt;点击触发add emit&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">@Emit 装饰器接收一个可选参数，该参数是$Emit的第一个参数，充当事件名。如果没有提供这个参数，$Emit会将回调函数名的camelCase转为kebab-case，并将其作为事件名；</span><br><span class="line">@Emit会将回调函数的返回值作为第二个参数，如果返回值是一个Promise对象，$emit会在Promise对象被标记为resolved之后触发；</span><br><span class="line">@Emit的回调函数的参数，会放在其返回值之后，一起被$emit当做参数使用。</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;当前组件的del点击事件会触发delClick执行，delClick会触发父组件传递过来的del执行，就相当于之前的this.$emit()</span><br><span class="line">@Emit(&#39;del&#39;) private delClick(event: MouseEvent, data: any) &#123;&#125;</span><br><span class="line">del(event: MouseEvent, data: any) &#123;</span><br><span class="line">    this.delClick(event, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 如果此处不设置别名字,则默认使用下面的函数命名,该函数既代表当前组件的点击事件，又代表触发父组件传递过来的add事件</span><br><span class="line">@Emit()</span><br><span class="line">add(p: &#123;</span><br><span class="line">    name: string</span><br><span class="line">    &#125;) &#123;</span><br><span class="line">    console.log(&quot;add&quot;)</span><br><span class="line">    &#x2F;&#x2F; 此处不return,则会默认使用括号里的参数p;</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-3-兄弟组件通讯"><a href="#2-4-3-兄弟组件通讯" class="headerlink" title="2.4.3 兄弟组件通讯"></a>2.4.3 兄弟组件通讯</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">uni.$emit(eventName,OBJECT)  触发全局的自定事件。</span><br><span class="line">uni.$on(eventName,callback)  监听全局的自定义事件。事件可以由 uni.$emit 触发，回调函数会接收所有传入事件触发函数的额外参数。</span><br><span class="line">uni.$off([eventName, callback])  移除全局自定义事件监听器</span><br><span class="line">Javascript</span><br><span class="line">&#x2F;&#x2F;1.head.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;text&gt;这是头部&lt;&#x2F;text&gt;</span><br><span class="line"></span><br><span class="line">&lt;button @click&#x3D;&quot;send&quot;&gt;点击向head发送数据&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Head extends Vue &#123;</span><br><span class="line">send():void&#123;</span><br><span class="line">uni.$emit(&quot;eventType1&quot;,&quot;你好，head&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.foot.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;text&gt;这是尾巴&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue,</span><br><span class="line">Prop,</span><br><span class="line">Emit</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Head extends Vue &#123;</span><br><span class="line">created()&#123;</span><br><span class="line">uni.$on(&quot;eventType1&quot;,(data:any)&#x3D;&gt;&#123;</span><br><span class="line">console.log(&quot;收到来自foot的数据&quot;,data)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;index.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">&lt;Head&gt;&lt;&#x2F;Head&gt;</span><br><span class="line">&lt;Foot&gt;&lt;&#x2F;Foot&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line">import Head from &#39;@&#x2F;components&#x2F;head.vue&#39;</span><br><span class="line">import Foot from &#39;@&#x2F;components&#x2F;foot.vue&#39;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">components: &#123;</span><br><span class="line">Head,</span><br><span class="line">Foot</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">export default class Index extends Vue &#123;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h1 id="3-全局配置和页面配置"><a href="#3-全局配置和页面配置" class="headerlink" title="3 全局配置和页面配置"></a>3 全局配置和页面配置</h1><h2 id="3-1-通过globalStyle进行全局配置"><a href="#3-1-通过globalStyle进行全局配置" class="headerlink" title="3.1 通过globalStyle进行全局配置"></a>3.1 通过globalStyle进行全局配置</h2><p>用于设置应用的状态栏、导航条、标题、窗口背景色等。<a href="https://uniapp.dcloud.io/collocation/pages?id=globalstyle">详细文档</a></p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>navigationBarBackgroundColor</td><td>HexColor</td><td>#F7F7F7</td><td>导航栏背景颜色（同状态栏背景色）</td></tr><tr><td>navigationBarTextStyle</td><td>String</td><td>white</td><td>导航栏标题颜色及状态栏前景颜色，仅支持 black/white</td></tr><tr><td>navigationBarTitleText</td><td>String</td><td></td><td>导航栏标题文字内容</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>#ffffff</td><td>窗口的背景色</td></tr><tr><td>backgroundTextStyle</td><td>String</td><td>dark</td><td>下拉 loading 的样式，仅支持 dark / light</td></tr><tr><td>enablePullDownRefresh</td><td>Boolean</td><td>false</td><td>是否开启下拉刷新，详见<a href="https://uniapp.dcloud.io/use?id=%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">页面生命周期</a>。</td></tr><tr><td>onReachBottomDistance</td><td>Number</td><td>50</td><td>页面上拉触底事件触发时距页面底部距离，单位只支持px，详见<a href="https://uniapp.dcloud.io/use?id=%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">页面生命周期</a></td></tr></tbody></table><h2 id="3-2-创建新的message页面"><a href="#3-2-创建新的message页面" class="headerlink" title="3.2 创建新的message页面"></a>3.2 创建新的message页面</h2><p>右键pages新建message目录，在message目录下右键新建.vue文件,并选择基本模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">这是信息页面</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h2 id="3-3-通过pages来配置页面"><a href="#3-3-通过pages来配置页面" class="headerlink" title="3.3 通过pages来配置页面"></a>3.3 通过pages来配置页面</h2><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>path</td><td>String</td><td></td><td>配置页面路径</td></tr><tr><td>style</td><td>Object</td><td></td><td>配置页面窗口表现，配置项参考 <a href="https://uniapp.dcloud.io/collocation/pages?id=style">pageStyle</a></td></tr></tbody></table><p>pages数组数组中第一项表示应用启动页</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&quot;pages&quot;: [ </span><br><span class="line">&#123;</span><br><span class="line">&quot;path&quot;:&quot;pages&#x2F;message&#x2F;message&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;path&quot;: &quot;pages&#x2F;index&#x2F;index&quot;,</span><br><span class="line">&quot;style&quot;: &#123;</span><br><span class="line">&quot;navigationBarTitleText&quot;: &quot;uni-app&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>通过style修改页面的标题和导航栏背景色，并且设置h5下拉刷新的特有样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">&quot;pages&quot;: [ &#x2F;&#x2F;pages数组中第一项表示应用启动页，参考：https:&#x2F;&#x2F;uniapp.dcloud.io&#x2F;collocation&#x2F;pages</span><br><span class="line">&#123;</span><br><span class="line">&quot;path&quot;:&quot;pages&#x2F;message&#x2F;message&quot;,</span><br><span class="line">&quot;style&quot;: &#123;</span><br><span class="line">&quot;navigationBarBackgroundColor&quot;: &quot;#007AFF&quot;,</span><br><span class="line">&quot;navigationBarTextStyle&quot;: &quot;white&quot;,</span><br><span class="line">&quot;enablePullDownRefresh&quot;: true,</span><br><span class="line">&quot;disableScroll&quot;: true,</span><br><span class="line">&quot;h5&quot;: &#123;</span><br><span class="line">&quot;pullToRefresh&quot;: &#123;</span><br><span class="line">&quot;color&quot;: &quot;#007AFF&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="3-4-配置tabbar"><a href="#3-4-配置tabbar" class="headerlink" title="3.4 配置tabbar"></a>3.4 配置tabbar</h2><p>如果应用是一个多 tab 应用，可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页。</p><p><strong>Tips</strong></p><ul><li>当设置 position 为 top 时，将不会显示 icon</li><li>tabBar 中的 list 是一个数组，只能配置最少2个、最多5个 tab，tab 按数组的顺序排序。</li></ul><p><strong>属性说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>默认值</th><th>描述</th><th>平台差异说明</th></tr></thead><tbody><tr><td>color</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字默认颜色</td><td></td></tr><tr><td>selectedColor</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字选中时的颜色</td><td></td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>是</td><td></td><td>tab 的背景色</td><td></td></tr><tr><td>borderStyle</td><td>String</td><td>否</td><td>black</td><td>tabbar 上边框的颜色，仅支持 black/white</td><td>App 2.3.4+ 支持其他颜色值</td></tr><tr><td>list</td><td>Array</td><td>是</td><td></td><td>tab 的列表，详见 list 属性说明，最少2个、最多5个 tab</td><td></td></tr><tr><td>position</td><td>String</td><td>否</td><td>bottom</td><td>可选值 bottom、top</td><td>top 值仅微信小程序支持</td></tr></tbody></table><p>其中 list 接收一个数组，数组中的每个项都是一个对象，其属性值如下：</p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>pagePath</td><td>String</td><td>是</td><td>页面路径，必须在 pages 中先定义</td></tr><tr><td>text</td><td>String</td><td>是</td><td>tab 上按钮文字，在 5+APP 和 H5 平台为非必填。例如中间可放一个没有文字的+号图标</td></tr><tr><td>iconPath</td><td>String</td><td>否</td><td>图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px，当 postion 为 top 时，此参数无效，不支持网络图片，不支持字体图标</td></tr><tr><td>selectedIconPath</td><td>String</td><td>否</td><td>选中时的图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px ，当 postion 为 top 时，此参数无效</td></tr></tbody></table><p>案例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">&quot;tabBar&quot;: &#123;</span><br><span class="line">&quot;list&quot;: [</span><br><span class="line">&#123;</span><br><span class="line">&quot;text&quot;: &quot;首页&quot;,</span><br><span class="line">&quot;pagePath&quot;:&quot;pages&#x2F;index&#x2F;index&quot;,</span><br><span class="line">&quot;iconPath&quot;:&quot;static&#x2F;tabs&#x2F;home.png&quot;,</span><br><span class="line">&quot;selectedIconPath&quot;:&quot;static&#x2F;tabs&#x2F;home-active.png&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;text&quot;: &quot;信息&quot;,</span><br><span class="line">&quot;pagePath&quot;:&quot;pages&#x2F;message&#x2F;message&quot;,</span><br><span class="line">&quot;iconPath&quot;:&quot;static&#x2F;tabs&#x2F;message.png&quot;,</span><br><span class="line">&quot;selectedIconPath&quot;:&quot;static&#x2F;tabs&#x2F;message-active.png&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;text&quot;: &quot;我们&quot;,</span><br><span class="line">&quot;pagePath&quot;:&quot;pages&#x2F;contact&#x2F;contact&quot;,</span><br><span class="line">&quot;iconPath&quot;:&quot;static&#x2F;tabs&#x2F;contact.png&quot;,</span><br><span class="line">&quot;selectedIconPath&quot;:&quot;static&#x2F;tabs&#x2F;contact-active.png&quot;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-condition启动模式配置"><a href="#3-5-condition启动模式配置" class="headerlink" title="3.5 condition启动模式配置"></a>3.5 condition启动模式配置</h2><p>启动模式配置，仅开发期间生效，用于模拟直达页面的场景，如：小程序转发后，用户点击所打开的页面。</p><p>记得要在微信开发工具里选中你要调试的模式</p><p><strong>属性说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th></tr></thead><tbody><tr><td>current</td><td>Number</td><td>是</td><td>当前激活的模式，list节点的索引值</td></tr><tr><td>list</td><td>Array</td><td>是</td><td>启动模式列表</td></tr></tbody></table><p><strong>list说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>String</td><td>是</td><td>启动模式名称</td></tr><tr><td>path</td><td>String</td><td>是</td><td>启动页面路径</td></tr><tr><td>query</td><td>String</td><td>否</td><td>启动参数，可在页面的 <a href="https://uniapp.dcloud.io/use?id=%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">onLoad</a> 函数里获得</td></tr></tbody></table><h1 id="4-uni基础组件的基本使用"><a href="#4-uni基础组件的基本使用" class="headerlink" title="4 uni基础组件的基本使用"></a>4 uni基础组件的基本使用</h1><p>uni-app提供了丰富的基础组件给开发者，开发者可以像搭积木一样，组合各种组件拼接称自己的应用</p><p>uni-app中的组件，就像 <code>HTML</code> 中的 <code>div</code> 、<code>p</code>、<code>span</code> 等标签的作用一样，用于搭建页面的基础结构</p><h2 id="4-1-text文本组件的用法"><a href="#4-1-text文本组件的用法" class="headerlink" title="4.1 text文本组件的用法"></a>4.1 text文本组件的用法</h2><h4 id="001-text-组件的属性"><a href="#001-text-组件的属性" class="headerlink" title="001 - text 组件的属性"></a>001 - text 组件的属性</h4><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>selectable</td><td>boolean</td><td>false</td><td>否</td><td>文本是否可选</td></tr><tr><td>space</td><td>string</td><td>.</td><td>否</td><td>显示连续空格，可选参数：<code>ensp</code>、<code>emsp</code>、<code>nbsp</code></td></tr><tr><td>decode</td><td>boolean</td><td>false</td><td>否</td><td>是否解码</td></tr></tbody></table><ul><li><code>text</code> 组件相当于行内标签、在同一行显示</li><li>除了文本节点以外的其他节点都无法长按选中</li></ul><h4 id="002-代码案例"><a href="#002-代码案例" class="headerlink" title="002 - 代码案例"></a>002 - 代码案例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;!-- 长按文本是否可选 --&gt;</span><br><span class="line">  &lt;text selectable&#x3D;&#39;true&#39;&gt;来了老弟&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;!-- 显示连续空格的方式 --&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;text space&#x3D;&#39;ensp&#39;&gt;来了  老弟&lt;&#x2F;text&gt;</span><br><span class="line">  &lt;&#x2F;view&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;text space&#x3D;&#39;emsp&#39;&gt;来了  老弟&lt;&#x2F;text&gt;</span><br><span class="line">  &lt;&#x2F;view&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;text space&#x3D;&#39;nbsp&#39;&gt;来了  老弟&lt;&#x2F;text&gt;</span><br><span class="line">  &lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;text&gt;skyblue&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;!-- 是否解码 --&gt;</span><br><span class="line">  &lt;text decode&#x3D;&#39;true&#39;&gt;&amp;nbsp; &lt; &gt; &amp; &amp;apos; &amp;ensp; &amp;emsp;&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure><h2 id="4-2-view视图容器组件的用法"><a href="#4-2-view视图容器组件的用法" class="headerlink" title="4.2 view视图容器组件的用法"></a>4.2 view视图容器组件的用法</h2><blockquote><p>View 视图容器， 类似于 HTML 中的 div</p></blockquote><h4 id="001-组件的属性"><a href="#001-组件的属性" class="headerlink" title="001 - 组件的属性"></a>001 - 组件的属性</h4><p><a href="https://ehbhgh.github.io/2019/11/29/%E5%88%9D%E5%A7%8Buniapp/images/2view.png"><img src="https://ehbhgh.github.io/2019/11/29/%E5%88%9D%E5%A7%8Buniapp/images/2view.png" alt="img"></a></p><h4 id="002-代码案例-1"><a href="#002-代码案例-1" class="headerlink" title="002 - 代码案例"></a>002 - 代码案例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;view class&#x3D;&quot;box2&quot; hover-class&#x3D;&quot;box2_active&quot;&gt;</span><br><span class="line">  &lt;view class&#x3D;&#39;box1&#39; hover-class&#x3D;&#39;active&#39; hover-stop-propagation :hover-start-time&#x3D;&quot;2000&quot; :hover-stay-time&#x3D;&#39;2000&#39;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure><h2 id="4-3-button按钮组件的用法"><a href="#4-3-button按钮组件的用法" class="headerlink" title="4.3 button按钮组件的用法"></a>4.3 button按钮组件的用法</h2><h4 id="001-组件的属性-1"><a href="#001-组件的属性-1" class="headerlink" title="001 - 组件的属性"></a>001 - 组件的属性</h4><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>size</td><td>String</td><td>default</td><td>按钮的大小</td></tr><tr><td>type</td><td>String</td><td>default</td><td>按钮的样式类型</td></tr><tr><td>plain</td><td>Boolean</td><td>false</td><td>按钮是否镂空，背景色透明</td></tr><tr><td>disabled</td><td>Boolean</td><td>false</td><td>是否按钮</td></tr><tr><td>loading</td><td>Boolean</td><td>false</td><td>名称是否带 loading t图标</td></tr></tbody></table><ul><li><code>button</code> 组件默认独占一行，设置 <code>size</code> 为 <code>mini</code> 时可以在一行显示多个</li></ul><h4 id="002-案例代码"><a href="#002-案例代码" class="headerlink" title="002 - 案例代码"></a>002 - 案例代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;button size&#x3D;&#39;mini&#39; type&#x3D;&#39;primary&#39;&gt;前端&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;button size&#x3D;&#39;mini&#39; type&#x3D;&#39;default&#39; disabled&#x3D;&#39;true&#39;&gt;前端&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;button size&#x3D;&#39;mini&#39; type&#x3D;&#39;warn&#39; loading&#x3D;&#39;true&#39;&gt;前端&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><h3 id="1-7-4-image组件的使用"><a href="#1-7-4-image组件的使用" class="headerlink" title="1.7.4 image组件的使用"></a>1.7.4 image组件的使用</h3><p><a href="https://uniapp.dcloud.io/component/image?id=image">image</a>图片。</p><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th><th>平台差异说明</th></tr></thead><tbody><tr><td>src</td><td>String</td><td></td><td>图片资源地址</td><td></td></tr><tr><td>mode</td><td>String</td><td>‘scaleToFill’</td><td>图片裁剪、缩放的模式</td><td></td></tr></tbody></table><p><strong>Tips</strong></p><ul><li><code>&lt;image&gt;</code> 组件默认宽度 300px、高度 225px；</li><li><code>src</code> 仅支持相对路径、绝对路径，支持 base64 码；</li><li>页面结构复杂，css样式太多的情况，使用 image 可能导致样式生效较慢，出现 “闪一下” 的情况，此时设置 <code>image&#123;will-change: transform&#125;</code> ,可优化此问题。</li></ul><h1 id="5-uni-app中的样式"><a href="#5-uni-app中的样式" class="headerlink" title="5 uni-app中的样式"></a>5 uni-app中的样式</h1><ul><li><p>rpx 即响应式px，一种根据屏幕宽度自适应的动态单位。以750宽的屏幕为基准，750rpx恰好为屏幕宽度。屏幕变宽，rpx 实际显示效果会等比放大。</p></li><li><p>使用<code>@import</code>语句可以导入外联样式表，<code>@import</code>后跟需要导入的外联样式表的相对路径，用<code>;</code>表示语句结束</p></li><li><p>支持基本常用的选择器class、id、element等</p></li><li><p>在 <code>uni-app</code> 中不能使用 <code>*</code> 选择器。</p></li><li><p><code>page</code> 相当于 <code>body</code> 节点</p></li><li><p>定义在 App.vue 中的样式为全局样式，作用于每一个页面。在 pages 目录下 的 vue 文件中定义的样式（scoped）为局部样式，只作用在对应的页面，并会覆盖 App.vue 中相同的选择器。</p></li><li><p><code>uni-app</code> 支持使用字体图标，使用方式与普通 <code>web</code> 项目相同，需要注意以下几点：</p><ul><li><p>字体文件小于 40kb，<code>uni-app</code> 会自动将其转化为 base64 格式；</p></li><li><p>字体文件大于等于 40kb， 需开发者自己转换，否则使用将不生效；</p></li><li><p>字体文件的引用路径推荐使用以 ~@ 开头的绝对路径。</p></li><li><p><a href="https://www.jianshu.com/p/f423b4e937af">https://www.jianshu.com/p/f423b4e937af</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">@font-face &#123;</span><br><span class="line">    font-family: test1-icon;</span><br><span class="line">    src: url(&#39;~@&#x2F;static&#x2F;iconfont.ttf&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>如何使用scss或者less</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">&#x2F;&#x2F;1.安装插件</span><br><span class="line">npm install less less-loader --save</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.vue文件中使用 &lt;style lang&#x3D;&quot;less&quot;&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="6-uni的生命周期"><a href="#6-uni的生命周期" class="headerlink" title="6 uni的生命周期"></a>6 uni的生命周期</h1><h2 id="6-1-应用的生命周期"><a href="#6-1-应用的生命周期" class="headerlink" title="6.1 应用的生命周期"></a>6.1 应用的生命周期</h2><p>生命周期的概念：一个对象从创建、运行、销毁的整个过程被成为生命周期。</p><p>生命周期函数：在生命周期中每个阶段会伴随着每一个函数的触发，这些函数被称为生命周期函数</p><p><code>uni-app</code> 支持如下应用生命周期函数：</p><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>onLaunch</td><td>当<code>uni-app</code> 初始化完成时触发（全局只触发一次）</td></tr><tr><td>onShow</td><td>当 <code>uni-app</code> 启动，或从后台进入前台显示</td></tr><tr><td>onHide</td><td>当 <code>uni-app</code> 从前台进入后台</td></tr><tr><td>onError</td><td>当 <code>uni-app</code> 报错时触发</td></tr></tbody></table><h2 id="6-2-页面的生命周期"><a href="#6-2-页面的生命周期" class="headerlink" title="6.2 页面的生命周期"></a>6.2 页面的生命周期</h2><p><code>uni-app</code> 支持如下页面生命周期函数：</p><table><thead><tr><th>函数名</th><th>说明</th><th>平台差异说明</th><th>最低版本</th></tr></thead><tbody><tr><td>onLoad</td><td>监听页面加载，其参数为上个页面传递的数据，参数类型为Object（用于页面传参），参考<a href="https://uniapp.dcloud.io/api/router?id=navigateto">示例</a></td><td></td><td></td></tr><tr><td>onShow</td><td>监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面</td><td></td><td></td></tr><tr><td>onReady</td><td>监听页面初次渲染完成。</td><td></td><td></td></tr><tr><td>onHide</td><td>监听页面隐藏</td><td></td><td></td></tr><tr><td>onUnload</td><td>监听页面卸载</td><td></td><td></td></tr></tbody></table><h1 id="7-uni相关API"><a href="#7-uni相关API" class="headerlink" title="7 uni相关API"></a>7 uni相关API</h1><h2 id="7-1-下拉刷新"><a href="#7-1-下拉刷新" class="headerlink" title="7.1 下拉刷新"></a>7.1 下拉刷新</h2><h3 id="7-1-1-开启下拉刷新"><a href="#7-1-1-开启下拉刷新" class="headerlink" title="7.1.1 开启下拉刷新"></a>7.1.1 开启下拉刷新</h3><p>在uni-app中有两种方式开启下拉刷新</p><ul><li>需要在 <code>pages.json</code> 里，找到的当前页面的pages节点，并在 <code>style</code> 选项中开启 <code>enablePullDownRefresh</code></li><li>通过调用uni.startPullDownRefresh方法来开启下拉刷新</li></ul><h4 id="a-通过配置文件开启"><a href="#a-通过配置文件开启" class="headerlink" title="a) 通过配置文件开启"></a>a) 通过配置文件开启</h4><p>通过pages.json文件中找到当前页面的pages节点，并在 <code>style</code> 选项中开启 <code>enablePullDownRefresh</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">&#123;</span><br><span class="line">  &quot;path&quot;:&quot;pages&#x2F;list&#x2F;list&quot;,</span><br><span class="line">    &quot;style&quot;:&#123;</span><br><span class="line">      &quot;enablePullDownRefresh&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="b-通过API开启"><a href="#b-通过API开启" class="headerlink" title="b) 通过API开启"></a>b) 通过API开启</h4><p><a href="https://uniapp.dcloud.io/api/ui/pulldown">api文档</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">uni.startPullDownRefresh(&#123;&#125;)</span><br></pre></td></tr></table></figure><h3 id="7-1-2-监听下拉刷新"><a href="#7-1-2-监听下拉刷新" class="headerlink" title="7.1.2 监听下拉刷新"></a>7.1.2 监听下拉刷新</h3><p>通过onPullDownRefresh可以监听到下拉刷新的动作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">这是信息页面</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Index extends Vue &#123;</span><br><span class="line"></span><br><span class="line">startPull(): void &#123;</span><br><span class="line">uni.startPullDownRefresh(&#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line">onPullDownRefresh(): void &#123;</span><br><span class="line">console.log(&#39;触发下拉刷新了&#39;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h3 id="7-1-3-关闭下拉刷新"><a href="#7-1-3-关闭下拉刷新" class="headerlink" title="7.1.3 关闭下拉刷新"></a>7.1.3 关闭下拉刷新</h3><p>uni.stopPullDownRefresh() 停止当前页面下拉刷新</p><h2 id="7-2-上拉加载"><a href="#7-2-上拉加载" class="headerlink" title="7.2 上拉加载"></a>7.2 上拉加载</h2><p>通过在pages.json文件中找到当前页面的pages节点下style中配置onReachBottomDistance可以设置距离底部开启加载的距离，默认为50px</p><p>通过onReachBottom监听到触底的行为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;view v-for&#x3D;&quot;(item,index) in arr&quot; :key&#x3D;&quot;index&quot; class&#x3D;&quot;item&quot;&gt;</span><br><span class="line">&#123;&#123;item&#125;&#125;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Index extends Vue &#123;</span><br><span class="line">private arr &#x3D; [&#39;前端&#39;, &#39;java&#39;, &#39;ui&#39;, &#39;大数据&#39;, &#39;前端&#39;, &#39;java&#39;, &#39;ui&#39;, &#39;大数据&#39;,&#39;ui&#39;, &#39;大数据&#39;];</span><br><span class="line">startPull(): void &#123;</span><br><span class="line">uni.startPullDownRefresh(&#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line">onPullDownRefresh(): void &#123;</span><br><span class="line">console.log(&#39;触发下拉刷新了&#39;)</span><br><span class="line">&#125;</span><br><span class="line">onReachBottom() &#123;</span><br><span class="line">console.log(&#39;触底了&#39;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&quot;less&quot;&gt;</span><br><span class="line">.item &#123;</span><br><span class="line">height: 100px;</span><br><span class="line">line-height: 100px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;App.vue中添加</span><br><span class="line">&lt;style&gt;</span><br><span class="line">page&#123;</span><br><span class="line">overflow-y:scroll!important;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h2 id="7-3-网络请求"><a href="#7-3-网络请求" class="headerlink" title="7.3 网络请求"></a>7.3 网络请求</h2><p>在uni中可以调用uni.request方法进行请求网络请求</p><p>需要注意的是：在小程序中网络相关的 API 在使用前需要配置域名白名单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">uni.request(&#123;</span><br><span class="line">    url: &#39;http:&#x2F;&#x2F;localhost&#x2F;myUniApp&#x2F;php&#x2F;login.php&#39;, &#x2F;&#x2F;仅为示例，并非真实接口地址。</span><br><span class="line">    data: &#123;&#x2F;&#x2F;参数</span><br><span class="line">        rawData: rawData,</span><br><span class="line">        code: loginRes.code</span><br><span class="line">    &#125;,</span><br><span class="line">    header: &#123;</span><br><span class="line">        &#39;custom-header&#39;: &#39;hello&#39; &#x2F;&#x2F;自定义请求头信息</span><br><span class="line">    &#125;,</span><br><span class="line">    method:&#39;POST&#39;&#x2F;&#x2F;请求方式  或GET</span><br><span class="line">    success: res &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&#39;返回&#39;, res.data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>请求示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;sendGet&quot;&gt;发送请求&lt;&#x2F;button&gt;</span><br><span class="line">&lt;view v-if&#x3D;&quot;movieData&quot;&gt;</span><br><span class="line">&lt;text&gt;电影名字：&#123;&#123;movieData.originalName&#125;&#125;&lt;&#x2F;text&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">导演：</span><br><span class="line">&lt;text v-for&#x3D;&quot;item in movieData.director&quot;&gt;</span><br><span class="line">&#123;&#123;item.data[0].name&#125;&#125;</span><br><span class="line">&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view&gt;电影信息</span><br><span class="line">&#123;&#123;movieData.data[0].genre&#125;&#125;</span><br><span class="line">&#123;&#123;movieData.data[0].language&#125;&#125;</span><br><span class="line">&#123;&#123;movieData.data[0].description&#125;&#125;</span><br><span class="line">&#123;&#123;movieData.data[0].country&#125;&#125;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">type MovieBasicType &#x3D; &#123;</span><br><span class="line">genre:string</span><br><span class="line">name:string</span><br><span class="line">lang:string</span><br><span class="line">language:string</span><br><span class="line">poster:string</span><br><span class="line">description:string</span><br><span class="line">country:string</span><br><span class="line">&#125;</span><br><span class="line">type MovieDirectorType &#x3D; &#123;</span><br><span class="line">name:string,</span><br><span class="line">lang:string</span><br><span class="line">&#125;</span><br><span class="line">type MovieDataType &#x3D; &#123;</span><br><span class="line">id?:string,</span><br><span class="line">originalName?:string,</span><br><span class="line">duration?:number,</span><br><span class="line">data?:MovieBasicType[],</span><br><span class="line">director?:&#123;data:MovieDirectorType[]&#125;[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Index extends Vue &#123;</span><br><span class="line">private movieData:MovieDataType|null &#x3D; null</span><br><span class="line"></span><br><span class="line">sendGet():void &#123;</span><br><span class="line">uni.request(&#123;</span><br><span class="line">url: &#39;https:&#x2F;&#x2F;movie.querydata.org&#x2F;api?id&#x3D;1302425&#39;,</span><br><span class="line">success:(res) &#x3D;&gt;&#123;</span><br><span class="line">const resobj &#x3D; res.data;</span><br><span class="line">this.movieData &#x3D; resobj as MovieDataType;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;uni-app中对ts的支持只是一般，没有非常严格</span><br></pre></td></tr></table></figure><h2 id="7-4-数据缓存"><a href="#7-4-数据缓存" class="headerlink" title="7.4 数据缓存"></a>7.4 数据缓存</h2><p><a href="https://uniapp.dcloud.io/api/storage/storage?id=setstorage">官方文档</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;setStor&quot;&gt;存储数据-异步&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;setStorSync&quot;&gt;存储数据-同步&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;getStorage&quot;&gt;获取数据&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;getStorageSync&quot;&gt;获取数据-同步&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;removeStorage&quot;&gt;删除数据&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;removeStorageSync&quot;&gt;删除数据-同步&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Index extends Vue &#123;</span><br><span class="line"></span><br><span class="line">setStor(): void &#123;</span><br><span class="line">uni.setStorage(&#123;</span><br><span class="line">key: &#39;id&#39;,</span><br><span class="line">data: 100,</span><br><span class="line">success() &#123;</span><br><span class="line">console.log(&#39;存储成功&#39;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">setStorSync(): void &#123;</span><br><span class="line">uni.setStorageSync(&#39;id2&#39;, 100)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getStorage(): void &#123;</span><br><span class="line">uni.getStorage(&#123;</span><br><span class="line">key: &#39;id&#39;,</span><br><span class="line">success: res &#x3D;&gt; &#123;</span><br><span class="line">console.log(res)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">getStorageSync(): void &#123;</span><br><span class="line">const id &#x3D; uni.getStorageSync(&#39;id&#39;)</span><br><span class="line">console.log(id)</span><br><span class="line">&#125;</span><br><span class="line">removeStorage(): void &#123;</span><br><span class="line">uni.removeStorage(&#123;</span><br><span class="line">key: &#39;id&#39;,</span><br><span class="line">success: function() &#123;</span><br><span class="line">console.log(&#39;删除成功&#39;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">removeStorageSync(): void &#123;</span><br><span class="line">uni.removeStorageSync(&#39;id&#39;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h2 id="7-5-上传图片、预览图片"><a href="#7-5-上传图片、预览图片" class="headerlink" title="7.5 上传图片、预览图片"></a>7.5 上传图片、预览图片</h2><h3 id="7-5-1-上传图片"><a href="#7-5-1-上传图片" class="headerlink" title="7.5.1 上传图片"></a>7.5.1 上传图片</h3><p>uni.chooseImage方法从本地相册选择图片或使用相机拍照。</p><p>案例代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;chooseImg&quot; type&#x3D;&quot;primary&quot;&gt;上传图片&lt;&#x2F;button&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;image v-for&#x3D;&quot;item in imgArr&quot; :src&#x3D;&quot;item&quot; :key&#x3D;&quot;index&quot;&gt;&lt;&#x2F;image&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Index extends Vue &#123;</span><br><span class="line">private imgArr &#x3D; []</span><br><span class="line"></span><br><span class="line">chooseImg(): void &#123;</span><br><span class="line">uni.chooseImage(&#123;</span><br><span class="line">count: 9,</span><br><span class="line">success: res &#x3D;&gt; &#123;</span><br><span class="line">this.imgArr &#x3D; res.tempFilePaths</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h3 id="7-5-2-预览图片"><a href="#7-5-2-预览图片" class="headerlink" title="7.5.2 预览图片"></a>7.5.2 预览图片</h3><p>结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;image v-for&#x3D;&quot;item in imgArr&quot; :src&#x3D;&quot;item&quot; @click&#x3D;&quot;previewImg(item)&quot; :key&#x3D;&quot;item&quot;&gt;&lt;&#x2F;image&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure><p>预览图片的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">previewImg (current:any):void &#123;</span><br><span class="line">  uni.previewImage(&#123;</span><br><span class="line">    urls: this.imgArr,</span><br><span class="line">    current</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-6-uni中的导航跳转"><a href="#7-6-uni中的导航跳转" class="headerlink" title="7.6 uni中的导航跳转"></a>7.6 uni中的导航跳转</h2><h3 id="7-6-1-利用navigator进行跳转"><a href="#7-6-1-利用navigator进行跳转" class="headerlink" title="7.6.1 利用navigator进行跳转"></a>7.6.1 利用navigator进行跳转</h3><p>navigator详细文档：<a href="https://uniapp.dcloud.io/component/navigator">文档地址</a></p><p>跳转到普通页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;navigator url&#x3D;&quot;&#x2F;pages&#x2F;about&#x2F;about&quot; hover-class&#x3D;&quot;navigator-hover&quot;&gt;</span><br><span class="line">  &lt;button type&#x3D;&quot;default&quot;&gt;跳转到关于页面&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;navigator&gt;</span><br></pre></td></tr></table></figure><p>跳转到tabbar页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;navigator url&#x3D;&quot;&#x2F;pages&#x2F;message&#x2F;message&quot; open-type&#x3D;&quot;switchTab&quot;&gt;</span><br><span class="line">  &lt;button type&#x3D;&quot;default&quot;&gt;跳转到message页面&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;navigator&gt;</span><br></pre></td></tr></table></figure><h3 id="7-6-2-利用编程式导航进行跳转"><a href="#7-6-2-利用编程式导航进行跳转" class="headerlink" title="7.6.2 利用编程式导航进行跳转"></a>7.6.2 利用编程式导航进行跳转</h3><p><a href="https://ehbhgh.github.io/2019/11/29/%E5%88%9D%E5%A7%8Buniapp/[uni.navigateTo](https://uniapp.dcloud.io/api/router?id=navigateto)">导航跳转文档</a></p><h3 id="7-6-3-利用navigateTo进行导航跳转"><a href="#7-6-3-利用navigateTo进行导航跳转" class="headerlink" title="7.6.3 利用navigateTo进行导航跳转"></a>7.6.3 利用navigateTo进行导航跳转</h3><p>保留当前页面，跳转到应用内的某个页面，使用<code>uni.navigateBack</code>可以返回到原页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;goAbout&quot;&gt;跳转到关于页面&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><p>通过navigateTo方法进行跳转到普通页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">goAbout ():void &#123;</span><br><span class="line">  uni.navigateTo(&#123;</span><br><span class="line">    url: &#39;&#x2F;pages&#x2F;about&#x2F;about&#39;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过switchTab跳转到tabbar页面</strong></p><p>跳转到tabbar页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;goMessage&quot;&gt;跳转到message页面&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><p>通过switchTab方法进行跳转</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">goMessage ():void  &#123;</span><br><span class="line">  uni.switchTab(&#123;</span><br><span class="line">    url: &#39;&#x2F;pages&#x2F;message&#x2F;message&#39;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>redirectTo进行跳转</strong></p><p>关闭当前页面，跳转到应用内的某个页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;!-- template --&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;goMessage&quot;&gt;跳转到message页面&lt;&#x2F;button&gt;</span><br><span class="line">&lt;!-- js --&gt;</span><br><span class="line">goMessage ():void  &#123;</span><br><span class="line">  uni.switchTab(&#123;</span><br><span class="line">    url: &#39;&#x2F;pages&#x2F;message&#x2F;message&#39;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过onUnload测试当前组件确实卸载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">onUnload () &#123;</span><br><span class="line">  console.log(&#39;组件卸载了&#39;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-6-4-导航跳转传递参数"><a href="#7-6-4-导航跳转传递参数" class="headerlink" title="7.6.4 导航跳转传递参数"></a>7.6.4 导航跳转传递参数</h3><p>在导航进行跳转到下一个页面的同时，可以给下一个页面传递相应的参数，接收参数的页面可以通过onLoad生命周期进行接收</p><p>传递参数的页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">goAbout ():void  &#123;</span><br><span class="line">  uni.navigateTo(&#123;</span><br><span class="line">    url: &#39;&#x2F;pages&#x2F;about&#x2F;about?id&#x3D;80&#39;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收参数的页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">onLoad (options) &#123;</span><br><span class="line">    console.log(options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-条件注释实现跨端兼容"><a href="#8-条件注释实现跨端兼容" class="headerlink" title="8 条件注释实现跨端兼容"></a>8 条件注释实现跨端兼容</h1><p>条件编译是用特殊的注释作为标记，在编译时根据这些特殊的注释，将注释里面的代码编译到不同平台。</p><p><strong>写法：</strong>以 #ifdef 加平台标识 开头，以 #endif 结尾。</p><p>平台标识</p><table><thead><tr><th>值</th><th>平台</th><th>参考文档</th></tr></thead><tbody><tr><td>APP-PLUS</td><td>5+App</td><td><a href="http://www.html5plus.org/doc/">HTML5+ 规范</a></td></tr><tr><td>H5</td><td>H5</td><td></td></tr><tr><td>MP-WEIXIN</td><td>微信小程序</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/api/">微信小程序</a></td></tr><tr><td>MP-ALIPAY</td><td>支付宝小程序</td><td><a href="https://docs.alipay.com/mini/developer/getting-started">支付宝小程序</a></td></tr><tr><td>MP-BAIDU</td><td>百度小程序</td><td><a href="https://smartprogram.baidu.com/docs/develop/tutorial/codedir/">百度小程序</a></td></tr><tr><td>MP-TOUTIAO</td><td>头条小程序</td><td><a href="https://developer.toutiao.com/dev/cn/mini-app/develop/framework/basic-reference/introduction">头条小程序</a></td></tr><tr><td>MP-QQ</td><td>QQ小程序</td><td>（目前仅cli版支持）</td></tr><tr><td>MP</td><td>微信小程序/支付宝小程序/百度小程序/头条小程序/QQ小程序</td><td></td></tr></tbody></table><h2 id="8-1-组件的条件注释"><a href="#8-1-组件的条件注释" class="headerlink" title="8.1 组件的条件注释"></a>8.1 组件的条件注释</h2><p>代码演示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;!-- #ifdef H5 --&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">  h5页面会显示</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;!-- #endif --&gt;</span><br><span class="line">&lt;!-- #ifdef MP-WEIXIN --&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">  微信小程序会显示</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;!-- #endif --&gt;</span><br><span class="line">&lt;!-- #ifdef APP-PLUS --&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">  app会显示</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;!-- #endif --&gt;</span><br></pre></td></tr></table></figure><h2 id="8-2-api的条件注释"><a href="#8-2-api的条件注释" class="headerlink" title="8.2 api的条件注释"></a>8.2 api的条件注释</h2><p>代码演示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">onLoad () &#123;</span><br><span class="line">  &#x2F;&#x2F;#ifdef MP-WEIXIN</span><br><span class="line">  console.log(&#39;微信小程序&#39;)</span><br><span class="line">  &#x2F;&#x2F;#endif</span><br><span class="line">  &#x2F;&#x2F;#ifdef H5</span><br><span class="line">  console.log(&#39;h5页面&#39;)</span><br><span class="line">  &#x2F;&#x2F;#endif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-3-样式的条件注释"><a href="#8-3-样式的条件注释" class="headerlink" title="8.3 样式的条件注释"></a>8.3 样式的条件注释</h2><p>代码演示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Css</span><br><span class="line">&#x2F;* #ifdef H5 *&#x2F;</span><br><span class="line">view&#123;</span><br><span class="line">  height: 100px;</span><br><span class="line">  line-height: 100px;</span><br><span class="line">  background: red;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* #endif *&#x2F;</span><br><span class="line">&#x2F;* #ifdef MP-WEIXIN *&#x2F;</span><br><span class="line">view&#123;</span><br><span class="line">  height: 100px;</span><br><span class="line">  line-height: 100px;</span><br><span class="line">  background: green;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* #endif *&#x2F;</span><br></pre></td></tr></table></figure><h1 id="9-uni-ui的使用"><a href="#9-uni-ui的使用" class="headerlink" title="9 uni-ui的使用"></a>9 uni-ui的使用</h1><p>uni-app中的UI组件库：<a href="https://ask.dcloud.net.cn/article/35489">https://ask.dcloud.net.cn/article/35489</a></p><p><a href="https://uniapp.dcloud.io/component/README?id=uniui">uni-ui文档</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">&#x2F;&#x2F;1.将资料中的uni-ui放入到项目components目录下(注意：不要npm install @dcloudio&#x2F;uni-ui ，这种方式在子组件中无法使用)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.安装sass-loader</span><br><span class="line">npm install node-sass sass-loader@8.0.2      重启hubuilderX</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;3.在页面组件和自定义组件中使用uni-ui</span><br><span class="line">import uniBadge from &quot;@&#x2F;components&#x2F;uni-ui&#x2F;lib&#x2F;uni-badge&#x2F;uni-badge.vue&quot;;</span><br><span class="line">import uniGrid from &quot;@&#x2F;components&#x2F;uni-ui&#x2F;lib&#x2F;uni-grid&#x2F;uni-grid.vue&quot;;</span><br><span class="line">import uniGridItem from &quot;@&#x2F;components&#x2F;uni-ui&#x2F;lib&#x2F;uni-grid-item&#x2F;uni-grid-item.vue&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        uniBadge,</span><br><span class="line">        uniGrid,</span><br><span class="line">        uniGridItem</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;uni-badge text&#x3D;&quot;1&quot;&gt;&lt;&#x2F;uni-badge&gt;</span><br><span class="line">&lt;uni-badge text&#x3D;&quot;2&quot; type&#x3D;&quot;success&quot;&gt;&lt;&#x2F;uni-badge&gt;</span><br><span class="line">&lt;uni-badge text&#x3D;&quot;3&quot; type&#x3D;&quot;primary&quot; :inverted&#x3D;&quot;true&quot;&gt;&lt;&#x2F;uni-badge&gt;</span><br><span class="line">&lt;uni-grid :column&#x3D;&quot;3&quot;&gt;</span><br><span class="line">&lt;uni-grid-item&gt;</span><br><span class="line">&lt;text class&#x3D;&quot;text&quot;&gt;文本&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;uni-grid-item&gt;</span><br><span class="line">&lt;uni-grid-item&gt;</span><br><span class="line">&lt;text class&#x3D;&quot;text&quot;&gt;文本&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;uni-grid-item&gt;</span><br><span class="line">&lt;uni-grid-item&gt;</span><br><span class="line">&lt;text class&#x3D;&quot;text&quot;&gt;文本&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;uni-grid-item&gt;</span><br><span class="line">&lt;&#x2F;uni-grid&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#1.uni-app的基本使用&lt;/p&gt;
&lt;p&gt;课程介绍：&lt;/p&gt;
&lt;p&gt;基础部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;环境搭建&lt;/li&gt;
&lt;li&gt;页面外观配置&lt;/li&gt;
&lt;li&gt;数据绑定&lt;/li&gt;
&lt;li&gt;uni-app的生命周期&lt;/li&gt;
&lt;li&gt;组件的使用&lt;/li&gt;
&lt;li&gt;u</summary>
      
    
    
    
    
    <category term="Uniapp" scheme="http://example.com/tags/Uniapp/"/>
    
  </entry>
  
  <entry>
    <title>关于input禁用中文输入法的问题</title>
    <link href="http://example.com/2020/04/17/%E5%85%B3%E4%BA%8Einput%E7%A6%81%E7%94%A8%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2020/04/17/%E5%85%B3%E4%BA%8Einput%E7%A6%81%E7%94%A8%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-04-17T15:55:08.000Z</published>
    <updated>2021-03-12T07:23:47.719Z</updated>
    
    <content type="html"><![CDATA[<p>完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;input&quot;&gt;</span><br><span class="line">    &lt;!-- &lt;input type&#x3D;&quot;tel&quot;&gt; --&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var input &#x3D; document.getElementById(&#39;input&#39;);</span><br><span class="line">        input.onkeydown &#x3D; function(e)&#123; &#x2F;&#x2F;检测键入的键的ASCLL码值</span><br><span class="line">            var event &#x3D; e || window.event;</span><br><span class="line">            if(event.keyCode !&#x3D; 8 &amp;&amp; (event.keyCode &lt; 48 || event.keyCode &gt; 57))&#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">                return true;   &#x2F;&#x2F;中文输入法的兼容性问题  如何禁用中文输入法</span><br><span class="line">        &#125;</span><br><span class="line">        var cpLock &#x3D; false;&#x2F;&#x2F;默认中文输入法关闭</span><br><span class="line">        &#x2F;&#x2F;中文输入法开始时触发compositionstart事件</span><br><span class="line">        document.addEventListener(&#39;compositionstart&#39;,function(e)&#123;</span><br><span class="line">                cpLock &#x3D; true;</span><br><span class="line">        &#125;);</span><br><span class="line">        &#x2F;&#x2F;中文输入法结束时触发compositionend事件</span><br><span class="line">        document.addEventListener(&#39;compositionend&#39;,function(e)&#123;</span><br><span class="line">                cpLock &#x3D; false;</span><br><span class="line">        &#125;);</span><br><span class="line">        input.oninput &#x3D; function()&#123;</span><br><span class="line">            if(cpLock)&#123;</span><br><span class="line">                &#x2F;&#x2F;将input中的A~Z  a~z都替换成空字符</span><br><span class="line">                this.value &#x3D; this.value.replace(&#x2F;[A-Za-z]&#x2F;g,&quot;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>注意点：1、oninput事件总是后于onkeydown执行</p><p> 2、compositionstart事件，非英文输入法开启时触发；</p><p> 3、compositionend事件，非英文输入法结束时触发；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;完整代码：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;b</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>cookie session</title>
    <link href="http://example.com/2020/03/01/cookie-session/"/>
    <id>http://example.com/2020/03/01/cookie-session/</id>
    <published>2020-03-01T01:38:25.000Z</published>
    <updated>2021-03-12T06:46:51.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-cookie --save</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="引入与配置"><a href="#引入与配置" class="headerlink" title="引入与配置"></a>引入与配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const cookieParser &#x3D; require(&#39;cookie-parser&#39;);</span><br><span class="line">&#x2F;&#x2F;中间件 签名</span><br><span class="line">app.use(cookieParser(&#39;howlcn&#39;));</span><br></pre></td></tr></table></figure><h4 id="用cookie储存信息"><a href="#用cookie储存信息" class="headerlink" title="用cookie储存信息"></a>用cookie储存信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res.cookie(&#39;username&#39;,req.body.username,&#123;</span><br><span class="line">    maxAge:1000*60, &#x2F;&#x2F;cookie失效的时长（单位毫秒）</span><br><span class="line">    signed:true&#x2F;&#x2F;开启签名 方式用户篡改cookie</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="清空cookie"><a href="#清空cookie" class="headerlink" title="清空cookie"></a>清空cookie</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.cookie();</span><br></pre></td></tr></table></figure><h4 id="获取cookie中的数据"><a href="#获取cookie中的数据" class="headerlink" title="获取cookie中的数据"></a>获取cookie中的数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let username &#x3D; req.signedCookies.username;&#x2F;&#x2F;获取cookie中的username</span><br></pre></td></tr></table></figure><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>session底层还是调用了cookie</p><p><a href="https://i.loli.net/2019/05/30/5cef97889476388883.png"><img src="https://i.loli.net/2019/05/30/5cef97889476388883.png" alt="session"></a></p><h3 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-session --save</span><br></pre></td></tr></table></figure><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><h4 id="引入与配置-1"><a href="#引入与配置-1" class="headerlink" title="引入与配置"></a>引入与配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const express &#x3D; require(&#39;express&#39;);</span><br><span class="line">const app &#x3D; express();</span><br><span class="line">const expressSession &#x3D; require(&#39;express-session&#39;);</span><br><span class="line">&#x2F;&#x2F;配置expressSession中间件</span><br><span class="line">app.use(expressSession(&#123;</span><br><span class="line">    &#x2F;&#x2F;cookie的名字</span><br><span class="line">    name:&#39;howlcn&#39;,</span><br><span class="line">    &#x2F;&#x2F;cookie签名的信息</span><br><span class="line">    secret:&#39;howlcn&#39;,</span><br><span class="line">    cookie:&#123;</span><br><span class="line">        maxAge:100000</span><br><span class="line">    &#125;,</span><br><span class="line">    resave:false,</span><br><span class="line">    &#x2F;&#x2F;saveUninitialized为true时会将没有初始化的session的数据保存到storage中</span><br><span class="line">    &#x2F;&#x2F;一般没有初始化的session是没有数据的  不必保存  则设置为false</span><br><span class="line">    saveUninitialized: false,</span><br><span class="line">    &#x2F;&#x2F;为true时，某客户端每一次访问都会重置cookie的重置时间(maxAge)</span><br><span class="line">    rolling:true,</span><br><span class="line">    &#x2F;&#x2F;指定session数据存放的地方(数据库),默认保存在服务器内存中（null也是）</span><br><span class="line">    store:null</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h4 id="用session存储数据"><a href="#用session存储数据" class="headerlink" title="用session存储数据"></a>用session存储数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.session.username &#x3D; username;</span><br></pre></td></tr></table></figure><h4 id="清空session"><a href="#清空session" class="headerlink" title="清空session"></a>清空session</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.session.destroy()</span><br></pre></td></tr></table></figure><h4 id="获取session中的信息"><a href="#获取session中的信息" class="headerlink" title="获取session中的信息"></a>获取session中的信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let username &#x3D; req.session.username;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;cookie&quot;&gt;&lt;a href=&quot;#cookie&quot; class=&quot;headerlink&quot; title=&quot;cookie&quot;&gt;&lt;/a&gt;cookie&lt;/h2&gt;&lt;h3 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化</summary>
      
    
    
    
    
  </entry>
  
</feed>
