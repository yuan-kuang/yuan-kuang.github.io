<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>是方圆啊</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-15T11:12:23.055Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>是方圆啊</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Less</title>
    <link href="http://example.com/2021/02/21/Less/"/>
    <id>http://example.com/2021/02/21/Less/</id>
    <published>2021-02-21T12:31:03.000Z</published>
    <updated>2021-03-15T11:12:23.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h1><p>less是动态的样式表<strong>语言</strong>，通过简明的语法定义，使编写cs’s的工作变得非常简单，本质上，less包含一套自定义的语法以及i一个解析器。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1、安装Nodejs环境</p><p>2、cmd中执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g less</span><br></pre></td></tr></table></figure><p>3、验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lessc -v    &#x2F;&#x2F;若正确出现less版本号则安装成功</span><br></pre></td></tr></table></figure><h2 id="使用less编译"><a href="#使用less编译" class="headerlink" title="使用less编译"></a>使用less编译</h2><p> 先创建一个less文件 demo.less</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@color: #ccc;</span><br><span class="line">div &#123;</span><br><span class="line">color: @color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 在当前目录下运行cmd，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lessc demo.less demo.css</span><br></pre></td></tr></table></figure><p>运行之后会在当前目录下生成一个demo.css文件，内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">  color: #ccc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="VsCode中使用less"><a href="#VsCode中使用less" class="headerlink" title="VsCode中使用less"></a>VsCode中使用less</h2><p> 1、添加 Easy Less 扩展插件，安装，安装完后最好重启一次VSCode；</p><p> 2、在需要生成css文件的地方，新建一个<code>.less</code>文件；</p><p> 3、保存后，会在同级目录下自动生成一个同名css文件</p><h2 id="less的基本语法"><a href="#less的基本语法" class="headerlink" title="less的基本语法"></a>less的基本语法</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*注释*&#x2F;        这种注释方式会也会编译到css中</span><br><span class="line">&#x2F;&#x2F;              这种注释方式在编译时会被去除</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p> @变量名: 值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@baseColor: #eee;     &#x2F;&#x2F;申明一个变量并赋值</span><br><span class="line">a &#123;</span><br><span class="line">    color: @@baseColor;   &#x2F;&#x2F;使用变量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="混入"><a href="#混入" class="headerlink" title="混入"></a>混入</h3><p> 可以将一个定义好的变量引入到另一个样式中 类似于函数的调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;先写好一个样式  @r 类似于函数的形参</span><br><span class="line">.addRadius(@r:10px)&#123;  &#x2F;&#x2F;也可以设置默认值</span><br><span class="line">    border-radius: @r;</span><br><span class="line">    -wekit-border-radius: @r;</span><br><span class="line">    -moz-border-radius: @r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;使用样式</span><br><span class="line">div &#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    .addRadius(5px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p> 可以实现选择器的继承，可以减少代码量，同时使代码结构更加清晰</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.jd_hearder &#123;&#125;</span><br><span class="line">.jd_hearder &gt; div &#123;&#125;</span><br><span class="line">.jd_hearder &gt; div &gt; h3 &#123;&#125;</span><br><span class="line">.jd_hearder &gt; div &gt; h3::before &#123;&#125;</span><br><span class="line">.jd_hearder&gt; div &gt; a:hover &#123;&#125;</span><br></pre></td></tr></table></figure><p>上面是我们之前常用的写样式的方式，代码是非常冗余的，并且结构不清晰；</p><p>可以用less来解决这类问题，并且编译后的css文件，与上面的代码的效果是一样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.jd_header &#123;</span><br><span class="line">    width: 100%；</span><br><span class="line">        height: 200px;</span><br><span class="line">    .addRadius();</span><br><span class="line">    &#x2F;&#x2F;嵌套一个元素</span><br><span class="line">    div &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        h3 &#123;</span><br><span class="line">            height: 200px;</span><br><span class="line">            ::before    &#x2F;&#x2F;相当于 h3 ::before</span><br><span class="line">            $::before &#123;&#125;&#x2F;&#x2F;相当于 h3::before     注意区别</span><br><span class="line">        &#125;</span><br><span class="line">        a &#123;</span><br><span class="line">            color: @baseColor;</span><br><span class="line">            $:hover &#123;   &#x2F;&#x2F;相当于 a:hover</span><br><span class="line">                text-decoration: none;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Less&quot;&gt;&lt;a href=&quot;#Less&quot; class=&quot;headerlink&quot; title=&quot;Less&quot;&gt;&lt;/a&gt;Less&lt;/h1&gt;&lt;p&gt;less是动态的样式表&lt;strong&gt;语言&lt;/strong&gt;，通过简明的语法定义，使编写cs’s的工作变得非常简单，本质上，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vue中路由跳转view却不更新的问题与解决办法</title>
    <link href="http://example.com/2021/02/11/vue%E4%B8%AD%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%ACview%E5%8D%B4%E4%B8%8D%E6%9B%B4%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://example.com/2021/02/11/vue%E4%B8%AD%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%ACview%E5%8D%B4%E4%B8%8D%E6%9B%B4%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</id>
    <published>2021-02-11T14:20:48.000Z</published>
    <updated>2021-03-15T11:12:38.298Z</updated>
    
    <content type="html"><![CDATA[<p>一般情况下路由从<code>/myrouter</code>跳转至<code>/yourrouter</code>时，view会发生更新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">若遇到&#x2F;products&#x2F;:id这样只改变id号的场景。就不会发生更新</span><br></pre></td></tr></table></figure><p>情况如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.js</span><br><span class="line">&#123;</span><br><span class="line">    path: &quot;&#x2F;products&#x2F;:id&quot;,</span><br><span class="line">    name: &quot;product&quot;,</span><br><span class="line">    components: Product</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在路由<code>/products/:id</code>对应一个组件<code>Product.vue</code>,组件中有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;test1&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;p&gt;msg: &#123;&#123;msg&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    mounted()&#123;</span><br><span class="line">        this.init(this.$router.history.current.params.id);</span><br><span class="line">    &#125;，</span><br><span class="line">    methods:&#123;</span><br><span class="line">        init(id)&#123;</span><br><span class="line">            this.msg &#x3D; this.$router.history.current.params.id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>为什么上述情况会导致view不更新呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">答：由于router-view是复用的，单纯的改变id号并不会刷新router-view。追根揭底就是因为data没有变化，只要路由跳转时触发 init() 函数来改变data就可以了。</span><br></pre></td></tr></table></figure><p>解决办法：</p><ol><li><p>用 :key 来阻止“复用”</p><p>在父组件中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view :key&#x3D;&quot;key&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">computed: &#123;</span><br><span class="line">    key() &#123;</span><br><span class="line">        return this.$route.name !&#x3D;&#x3D; undefined? this.$route.name +new Date(): this.$route +new Date()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种办法实质上是让每次路由跳转时重新构建该组件，我们在它的生命周期中写一个打印语句就能看出来。</p></li><li><p>通过 watch 监听路由</p><p>在子组件中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123; &#x2F;&#x2F;通过watch来监听路由变化</span><br><span class="line">    &#39;$route&#39;: function () &#123;</span><br><span class="line">        this.init(this.$router.history.current.params.id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过 <code>vue-router</code>的钩子函数 <code>beforeRouteEnter</code> <code>beforeRouteUpdate</code> <code>beforeRouteLeave</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteEnter (to, from, next) &#123;</span><br><span class="line">   &#x2F;&#x2F; 在渲染该组件的对应路由被 confirm 前调用</span><br><span class="line">   &#x2F;&#x2F; 不！能！获取组件实例 &#96;this&#96;</span><br><span class="line">   &#x2F;&#x2F; 因为当钩子执行前，组件实例还没被创建</span><br><span class="line">&#125;,</span><br><span class="line">beforeRouteUpdate (to, from, next) &#123;</span><br><span class="line">   &#x2F;&#x2F; 在当前路由改变，但是该组件被复用时调用</span><br><span class="line">   &#x2F;&#x2F; 举例来说，对于一个带有动态参数的路径 &#x2F;foo&#x2F;:id，在 &#x2F;foo&#x2F;1 和 &#x2F;foo&#x2F;2 之间跳转的时候，</span><br><span class="line">   &#x2F;&#x2F; 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span><br><span class="line">   &#x2F;&#x2F; 可以访问组件实例 &#96;this&#96;</span><br><span class="line">&#125;,</span><br><span class="line">beforeRouteLeave (to, from, next) &#123;</span><br><span class="line">   &#x2F;&#x2F; 导航离开该组件的对应路由时调用</span><br><span class="line">   &#x2F;&#x2F; 可以访问组件实例 &#96;this&#96;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一般情况下路由从&lt;code&gt;/myrouter&lt;/code&gt;跳转至&lt;code&gt;/yourrouter&lt;/code&gt;时，view会发生更新。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>工具函数</title>
    <link href="http://example.com/2021/02/09/%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2021/02/09/%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0/</id>
    <published>2021-02-09T14:10:18.000Z</published>
    <updated>2021-03-15T11:12:07.087Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、数组去重"><a href="#1、数组去重" class="headerlink" title="1、数组去重"></a>1、数组去重</h2><p>原理：利用Js中对象的属性名不可重复的特点对数组进行去重操作</p><p>若有数组:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr &#x3D; [&#39;a&#39;,&#39;v&#39;,&#39;a&#39;,&#39;b&#39;,&#39;e&#39;,&#39;b&#39;,&#39;w&#39;,&#39;x&#39;]</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var object &#x3D; &#123;&#125;;</span><br><span class="line">    for(var key in arr)</span><br><span class="line">        if(!object[arr[key]])</span><br><span class="line">            object[arr[key]] &#x3D; 1;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Object</span><br><span class="line">    a: 1</span><br><span class="line">    b: 1</span><br><span class="line">    e: 1</span><br><span class="line">    v: 1</span><br><span class="line">    w: 1</span><br><span class="line">    x: 1</span><br></pre></td></tr></table></figure><p>此时object对象中的属性名便是去重后的结果。</p><h2 id="2、在字符串中找到所有的字符-o，并返回其下标"><a href="#2、在字符串中找到所有的字符-o，并返回其下标" class="headerlink" title="2、在字符串中找到所有的字符 o，并返回其下标"></a>2、在字符串中找到所有的字符 o，并返回其下标</h2><p>若有字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var s &#x3D; &#39;oresdfrgosdfsdo&#39;</span><br><span class="line"> &lt;script&gt;  </span><br><span class="line">    var index &#x3D; -1;</span><br><span class="line">    while(true)&#123;</span><br><span class="line">        index &#x3D; s.indexOf(&quot;o&quot;,index+1)</span><br><span class="line">        if(index &#x3D;&#x3D; -1)</span><br><span class="line">            break;</span><br><span class="line">            console.log(index);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">8</span><br><span class="line">14</span><br></pre></td></tr></table></figure><h2 id="3、返回给定参数的数据类型"><a href="#3、返回给定参数的数据类型" class="headerlink" title="3、返回给定参数的数据类型"></a>3、返回给定参数的数据类型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">*    getType</span><br><span class="line">*    @description 返回给定参数的数据类型</span><br><span class="line">*    @param &#123;Any&#125; 需要做类型检测的参数</span><br><span class="line">*    @return &#123;String&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line">function getType(args)&#123;</span><br><span class="line">    if (typeof arg &#x3D;&#x3D;&#x3D; &#39;number&#39; &amp;&amp; isNaN(arg)) return &#39;NaN&#39;;</span><br><span class="line">    let reg &#x3D; &#x2F;\s(\w&#123;1,&#125;)\]$&#x2F;g;</span><br><span class="line">    let str &#x3D; Object.prototype.toString.call(args);</span><br><span class="line">    let type &#x3D; reg.exec(str)[1];</span><br><span class="line">    return type</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; 1;</span><br><span class="line">var b &#x3D; false;</span><br><span class="line">var c &#x3D; &#39;ss&#39;;</span><br><span class="line">var d;</span><br><span class="line">var e &#x3D; null;</span><br><span class="line">var f &#x3D; NaN;</span><br><span class="line">var g &#x3D; &#123;&#125;;</span><br><span class="line">var h &#x3D; () &#x3D;&gt; &#123;&#125;</span><br><span class="line">var i &#x3D; [];</span><br><span class="line">console.log(checkType(a));</span><br><span class="line">console.log(checkType(b));</span><br><span class="line">console.log(checkType(c));</span><br><span class="line">console.log(checkType(d));</span><br><span class="line">console.log(checkType(e));</span><br><span class="line">console.log(checkType(f));</span><br><span class="line">console.log(checkType(g));</span><br><span class="line">console.log(checkType(h));</span><br><span class="line">console.log(checkType(i));</span><br></pre></td></tr></table></figure><h2 id="4、什么时候-val-1-amp-amp-val-2-amp-amp-val-3-为-true？"><a href="#4、什么时候-val-1-amp-amp-val-2-amp-amp-val-3-为-true？" class="headerlink" title="4、什么时候 val === 1 &amp;&amp; val === 2 &amp;&amp; val === 3 为 true？"></a>4、什么时候 val === 1 &amp;&amp; val === 2 &amp;&amp; val === 3 为 true？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var i&#x3D; 0;</span><br><span class="line">Object.defineProperty(window,&#39;val&#39;,&#123;</span><br><span class="line">    get:function()&#123;</span><br><span class="line">        return ++i;</span><br><span class="line">    &#125;,</span><br><span class="line">    set:function()&#123;</span><br><span class="line">        console.log(&#39;set&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(val &#x3D;&#x3D;&#x3D; 1 &amp;&amp; val &#x3D;&#x3D;&#x3D; 2 &amp;&amp; val &#x3D;&#x3D;&#x3D; 3);</span><br></pre></td></tr></table></figure><h2 id="5、计算一段文本的宽度"><a href="#5、计算一段文本的宽度" class="headerlink" title="5、计算一段文本的宽度"></a>5、计算一段文本的宽度</h2><p><strong>React</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @name: text-width ;</span><br><span class="line"> * @author: admin ;</span><br><span class="line"> * @description: 获取字符串宽度 ;</span><br><span class="line"> * *&#x2F;</span><br><span class="line">import memoize from &#39;lodash&#x2F;memoize&#39;;</span><br><span class="line">export default memoize((text, fontSize, options) &#x3D;&gt; &#123;</span><br><span class="line">    const &#123;fontFamily, fontWeight&#125; &#x3D; Object.assign(&#123;fontFamily: &#39;Arial&#39;, fontWeight: &#39;normal&#39;&#125;, options);</span><br><span class="line">    const canvas &#x3D; document.createElement(&#39;canvas&#39;),</span><br><span class="line">          ctx &#x3D; canvas.getContext(&#39;2d&#39;);</span><br><span class="line">    ctx.font &#x3D; &#96;$&#123;fontSize&#125; $&#123;fontFamily&#125; $&#123;fontWeight&#125;&#96;;</span><br><span class="line">    return ctx.measureText(text).width;</span><br><span class="line">&#125;, (text, fontSize, options) &#x3D;&gt; &#123;</span><br><span class="line">    const obj &#x3D; Object.assign(&#123;&#125;, options, &#123;text, fontSize&#125;);</span><br><span class="line">    return Object.keys(obj).map((key) &#x3D;&gt; &#96;$&#123;key&#125;-$&#123;obj[key]&#125;&#96;).join(&#39;,&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、数组去重&quot;&gt;&lt;a href=&quot;#1、数组去重&quot; class=&quot;headerlink&quot; title=&quot;1、数组去重&quot;&gt;&lt;/a&gt;1、数组去重&lt;/h2&gt;&lt;p&gt;原理：利用Js中对象的属性名不可重复的特点对数组进行去重操作&lt;/p&gt;
&lt;p&gt;若有数组:&lt;/p&gt;
&lt;figur</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>计算属性computed</title>
    <link href="http://example.com/2021/01/12/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7computed/"/>
    <id>http://example.com/2021/01/12/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7computed/</id>
    <published>2021-01-12T14:00:19.000Z</published>
    <updated>2021-03-15T11:11:50.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><h3 id="什么是计算属性"><a href="#什么是计算属性" class="headerlink" title="什么是计算属性"></a>什么是计算属性</h3><p>我们知道，在模板中可以直接通过插值语法显示一些data中的数据</p><p>但是在某些情况下，我们可能需要对数据进行一些转化后再显示，或者需要将多个数据结合起来进行显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">比如我们有&#96;firstName&#96;和&#96;lastName&#96;两个变量，我们需要显示完整的名称</span><br><span class="line">但是如果多个地方都需要显示完整的名称，我们就需要写多个&#96;&#123;&#123;firstName&#125;&#125;&#96;和&#96;&#123;&#123;lastName&#125;&#125;&#96;</span><br></pre></td></tr></table></figure><p>我们可以将上面的代码换成计算属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我们发现计算属性是写在实例的&#96;computed&#96;选项中的</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName+&#x27;  &#x27;+lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">`#app`</span>,</span></span><br><span class="line">            data: &#123; </span><br><span class="line"><span class="javascript">                firstName: <span class="string">&#x27;Lebron&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                lastName:<span class="string">&#x27;James&#x27;</span> </span></span><br><span class="line">            &#125;,</span><br><span class="line">            computed:&#123;</span><br><span class="line"><span class="javascript">                <span class="comment">/* 计算属性，一般不用动词 */</span></span></span><br><span class="line"><span class="javascript">                fullName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27;  &#x27;</span> + <span class="built_in">this</span>.lastName</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                getFullName ()&#123;</span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27;  &#x27;</span> + <span class="built_in">this</span>.lastName</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>计算属性不要加小括号()</p><h3 id="计算属性的复杂操作"><a href="#计算属性的复杂操作" class="headerlink" title="计算属性的复杂操作"></a>计算属性的复杂操作</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>总价格:&#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">`#app`</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                books: [</span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">id</span>: <span class="number">110</span>, <span class="attr">name</span>: <span class="string">&#x27;Unix编程艺术&#x27;</span>, <span class="attr">price</span>: <span class="number">119</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">id</span>: <span class="number">111</span>, <span class="attr">name</span>: <span class="string">&#x27;代码大全&#x27;</span>, <span class="attr">price</span>: <span class="number">105</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">id</span>: <span class="number">112</span>, <span class="attr">name</span>: <span class="string">&#x27;深入理解计算机原理&#x27;</span>, <span class="attr">price</span>: <span class="number">98</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">id</span>: <span class="number">113</span>, <span class="attr">name</span>: <span class="string">&#x27;现代操作系统&#x27;</span>, <span class="attr">price</span>: <span class="number">87</span> &#125;,</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            computed: &#123;</span><br><span class="line"><span class="javascript">                totalPrice: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> result  =<span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.books.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                        result += <span class="built_in">this</span>.books[i].price</span></span><br><span class="line">                    &#125;</span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> result</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="计算属性的setter和getter"><a href="#计算属性的setter和getter" class="headerlink" title="计算属性的setter和getter"></a>计算属性的<code>setter</code>和<code>getter</code></h3><p>我们之前在计算属性的基础操作中使用了一个方法<code>fullName</code>,如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fullName:function()&#123;</span><br><span class="line">                    return this.firstName + &#39;  &#39; + this.lastName</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><p>其实是这样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">                fullName:&#123;</span><br><span class="line">                    set:function()&#123;</span><br><span class="line"></span><br><span class="line">                    &#125;,</span><br><span class="line">                    get:function()&#123;</span><br><span class="line">                        return this.firstName + &#39;  &#39; + this.lastName</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>其中<code>set</code>属性是不需要实现的，我们不希望计算属性有<code>set</code>属性，其实计算属性是个只读属性，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">                fullName:&#123;</span><br><span class="line">                    get:function()&#123;</span><br><span class="line">                        return this.firstName + &#39;  &#39; + this.lastName</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>我们方便使用就使用第一种方式</p><p><strong>计算属性的方法，即使调用多次，计算属性也只是调用了一次，内部是有缓存的</strong>，如果方法的返回结果不变，就不会重复调用多次，直接调用缓存。</p><p><strong>使用<code>methods</code>的时候，调用几次，函数就会调用几次</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计算属性&quot;&gt;&lt;a href=&quot;#计算属性&quot; class=&quot;headerlink&quot; title=&quot;计算属性&quot;&gt;&lt;/a&gt;计算属性&lt;/h1&gt;&lt;h3 id=&quot;什么是计算属性&quot;&gt;&lt;a href=&quot;#什么是计算属性&quot; class=&quot;headerlink&quot; title=&quot;什么是</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>去重算法</title>
    <link href="http://example.com/2021/01/04/%E5%8E%BB%E9%87%8D%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2021/01/04/%E5%8E%BB%E9%87%8D%E7%AE%97%E6%B3%95/</id>
    <published>2021-01-04T11:34:22.000Z</published>
    <updated>2021-03-15T11:11:39.561Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-遍历数组法"><a href="#1-遍历数组法" class="headerlink" title="1.遍历数组法"></a><strong>1.遍历数组法</strong></h3><p>它是最简单的数组去重方法（indexOf方法）</p><p>实现思路：新建一个数组，遍历去要重的数组，当值不在新数组的时候（indexOf为-1）就加入该新数组中；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">var arr&#x3D;[2,8,5,0,5,2,6,7,2];</span><br><span class="line">function unique1(arr)&#123;</span><br><span class="line">  var hash&#x3D;[];</span><br><span class="line">  for (var i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">     if(hash.indexOf(arr[i])&#x3D;&#x3D;-1)&#123;</span><br><span class="line">      hash.push(arr[i]);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-数组下标判断法"><a href="#2-数组下标判断法" class="headerlink" title="2.数组下标判断法"></a><strong>2.数组下标判断法</strong></h3><p>调用indexOf方法，性能和方法1差不多</p><p>实现思路：如果当前数组的第 i 项在当前数组中第一次出现的位置不是 i，那么表示第 i 项是重复的，忽略掉。否则存入结果数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">function unique2(arr)&#123;</span><br><span class="line">  var hash&#x3D;[];</span><br><span class="line">  for (var i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">     if(arr.indexOf(arr[i])&#x3D;&#x3D;i)&#123;</span><br><span class="line">      hash.push(arr[i]);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-排序后相邻去除法"><a href="#3-排序后相邻去除法" class="headerlink" title="3.排序后相邻去除法"></a><strong>3.排序后相邻去除法</strong></h3><p>实现思路：给传入的数组排序，排序后相同的值会相邻，然后遍历排序后数组时，新数组只加入不与前一值重复的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">function unique3(arr)&#123;</span><br><span class="line">  arr.sort();</span><br><span class="line">  var hash&#x3D;[arr[0]];</span><br><span class="line">  for (var i &#x3D; 1; i &lt; arr.length; i++) &#123;</span><br><span class="line">     if(arr[i]!&#x3D;hash[hash.length-1])&#123;</span><br><span class="line">      hash.push(arr[i]);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-优化遍历数组法"><a href="#4-优化遍历数组法" class="headerlink" title="4.优化遍历数组法"></a><strong>4.优化遍历数组法</strong></h3><p>实现思路：双层循环，外循环表示从0到arr.length，内循环表示从i+1到arr.length</p><p>将没重复的右边值放入新数组。（检测到有重复值时终止当前循环同时进入外层循环的下一轮判断）</p><p>quan_lst 里面是一个一个的js字面量对象，根据json里面的属性进行判定去重</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">function unique(quan_lst)&#123;    </span><br><span class="line">&#x2F;&#x2F;去掉重复选取的数据</span><br><span class="line">    for (var i &#x3D; 0; i &lt; quan_lst.length; i++) &#123;</span><br><span class="line">        for (var j &#x3D;i+1; j &lt;quan_lst.length; ) &#123;</span><br><span class="line">            if (quan_lst[i].photoid &#x3D;&#x3D; quan_lst[j].photoid ) &#123;&#x2F;&#x2F;通过photoid属性进行匹配；</span><br><span class="line">                quan_lst.splice(j, 1);&#x2F;&#x2F;去除重复的对象；</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-ES6实现"><a href="#5-ES6实现" class="headerlink" title="5.ES6实现"></a><strong>5.ES6实现</strong></h3><p>基本思路：ES6提供了新的数据结构Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><p>Set函数可以接受一个数组（或类似数组的对象）作为参数，用来初始化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">function unique5(arr)&#123;</span><br><span class="line">  var x &#x3D; new Set(arr);</span><br><span class="line"> return [...x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展：如果重复，则去掉该元素</p><p>数组下标去重</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">function unique22(arr)&#123;</span><br><span class="line">  var hash&#x3D;[];</span><br><span class="line">  for (var i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">     if(arr.indexOf(arr[i])&#x3D;&#x3D;arr.lastIndexOf(arr[i]))&#123;</span><br><span class="line">      hash.push(arr[i]);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充：原先自己一直以为indexOf是针对字符串，原来indexOf也可以查询出数组元素所在的数组中的位置(以0开始计算),</p><h3 id="6-ES6实现（第二种方式）"><a href="#6-ES6实现（第二种方式）" class="headerlink" title="6.ES6实现（第二种方式）"></a><strong>6.ES6实现</strong>（第二种方式）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; [1,1,8,8,12,12,15,15,16,16];</span><br><span class="line"></span><br><span class="line">function unique (arr) &#123;</span><br><span class="line">return Array.from(new Set(arr))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(unique(arr))</span><br><span class="line">&#x2F;&#x2F;[1,8,12,15,16]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-利用includes"><a href="#7-利用includes" class="headerlink" title="7.利用includes"></a><strong>7.利用includes</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; [1, 1, 8, 8, 12, 12, 15, 15, 16, 16];</span><br><span class="line">function unique(arr) &#123;</span><br><span class="line">if (!Array.isArray(arr)) &#123;</span><br><span class="line">console.log(‘type error!’)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">var array &#x3D;[];</span><br><span class="line">for(var i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">if( !array.includes( arr[i]) ) &#123;&#x2F;&#x2F;includes 检测数组是否有某个值</span><br><span class="line">array.push(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return array</span><br><span class="line">&#125;</span><br><span class="line">console.log(unique(arr))</span><br></pre></td></tr></table></figure><h3 id="8-利用filter"><a href="#8-利用filter" class="headerlink" title="8.利用filter"></a>8.利用filter</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; [1, 1, 8, 8, 12, 12, 15, 15, 16, 16];</span><br><span class="line">function unlink(arr) &#123;</span><br><span class="line">return arr.filter(function (item, index, arr) &#123;</span><br><span class="line">&#x2F;&#x2F;当前元素，在原始数组中的第一个索引&#x3D;&#x3D;当前索引值，否则返回当前元素</span><br><span class="line">return arr.indexOf(item, 0) &#x3D;&#x3D;&#x3D; index;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">console.log(unlink(arr));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-遍历数组法&quot;&gt;&lt;a href=&quot;#1-遍历数组法&quot; class=&quot;headerlink&quot; title=&quot;1.遍历数组法&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.遍历数组法&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;它是最简单的数组去重方法（indexOf方法）&lt;/p&gt;
&lt;p&gt;实现</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript——顺序表、链表</title>
    <link href="http://example.com/2020/12/28/JavaScript%E2%80%94%E2%80%94%E9%A1%BA%E5%BA%8F%E8%A1%A8%E3%80%81%E9%93%BE%E8%A1%A8/"/>
    <id>http://example.com/2020/12/28/JavaScript%E2%80%94%E2%80%94%E9%A1%BA%E5%BA%8F%E8%A1%A8%E3%80%81%E9%93%BE%E8%A1%A8/</id>
    <published>2020-12-28T13:10:27.000Z</published>
    <updated>2021-03-15T11:11:25.952Z</updated>
    
    <content type="html"><![CDATA[<h3 id="顺序表与链表"><a href="#顺序表与链表" class="headerlink" title="顺序表与链表"></a>顺序表与链表</h3><h4 id="1-顺序表-数组"><a href="#1-顺序表-数组" class="headerlink" title="1. 顺序表(数组)"></a>1. 顺序表(数组)</h4><blockquote><p>顺序表是在计算机内存中以数组的形式保存的线性表，是指用一组地址连续的存储单元依次存储数据元素的线性结构。线性表采用顺序存储的方式存储就称之为顺序表。顺序表是将表中的结点依次存放在计算机内存中一组地址连续的存储单元中</p></blockquote><h5 id="顺序表的优点："><a href="#顺序表的优点：" class="headerlink" title="顺序表的优点："></a>顺序表的优点：</h5><p>存储的数据是连续的，访问数据可以一次定位，时间复杂度为O(1)</p><h5 id="顺序表的缺点："><a href="#顺序表的缺点：" class="headerlink" title="顺序表的缺点："></a>顺序表的缺点：</h5><p>空间必须是连续的，如果要插入新的元素要换内存空间地址，如果内存太小满足不了顺序表的要求，则无法使用</p><h4 id="2-单链表"><a href="#2-单链表" class="headerlink" title="2. 单链表"></a>2. 单链表</h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><ul><li>链表是一种非线性、非顺序的物理结构，是由若干个节点组成。</li><li>链表采用的是“见缝插针”的存储方法，不要求内存连续，靠next指针关联起来。</li><li>链表的物理存储方式为随机存储，访问方式为顺序访问。</li><li>查找节点的时间复杂度为O(n)，插入、删除节点的时间复杂度为O(1)。</li><li>链表适用于写操作多，读操作少的场景。</li></ul><h5 id="顺序表-数组-与单链表对比"><a href="#顺序表-数组-与单链表对比" class="headerlink" title="顺序表(数组)与单链表对比"></a>顺序表(数组)与单链表对比</h5><ul><li>数组静态分配内存，链表动态分配内存；</li><li>数组在内存中连续(查询快)，链表不连续（查询需要从head节点开始遍历）；</li><li>数组元素在栈区，链表元素在堆区;</li><li>数组查询快、增删慢；链表增删快、查询慢</li></ul><h5 id="单链表js实现"><a href="#单链表js实现" class="headerlink" title="单链表js实现"></a>单链表<code>js</code>实现</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 定义一个节点</span><br><span class="line"> * 分别存储data和下一个节点的地址next</span><br><span class="line"> * 尾节点指向null 一个节点则next指向null</span><br><span class="line"> *&#x2F;</span><br><span class="line">class Node &#123;</span><br><span class="line">  constructor(element) &#123;</span><br><span class="line">    this.element &#x3D; element;</span><br><span class="line">    this.next &#x3D; null;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 定义一个链表</span><br><span class="line"> *&#x2F;</span><br><span class="line">class LinkList &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    &#x2F;&#x2F; 当前头节点</span><br><span class="line">    this.head &#x3D; new Node(&#39;head&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 查找某一个元素</span><br><span class="line">  find(item) &#123;</span><br><span class="line">    let currentNode &#x3D; this.head;</span><br><span class="line">    while (currentNode.next !&#x3D;&#x3D; null &amp;&amp; currentNode.element !&#x3D;&#x3D; item) &#123;</span><br><span class="line">      currentNode &#x3D; currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 如果没有找到则返回最后一个节点 一个节点则是头节点</span><br><span class="line">    return currentNode;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 插入某一个元素</span><br><span class="line">  insert(newitem, item) &#123;</span><br><span class="line">    let newNode &#x3D; new Node(newitem);</span><br><span class="line">    let currentNode &#x3D; this.find(item);</span><br><span class="line">    newNode.next &#x3D; currentNode.next;</span><br><span class="line">    currentNode.next &#x3D; newNode;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 查找某一个节点的前一个结点</span><br><span class="line">  preNode(item) &#123;</span><br><span class="line">    let currentNode &#x3D; this.head;</span><br><span class="line">    while (currentNode.next !&#x3D;&#x3D; null &amp;&amp; currentNode.next.element !&#x3D;&#x3D; item) &#123;</span><br><span class="line">      currentNode &#x3D; currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    return currentNode;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 删除一个节点</span><br><span class="line">  remove(item) &#123;</span><br><span class="line">    let preNode &#x3D; this.preNode(item);</span><br><span class="line">    if (!(preNode.next &#x3D;&#x3D;&#x3D; null)) &#123;</span><br><span class="line">      preNode.next &#x3D; preNode.next.next;</span><br><span class="line">      &#x2F;&#x2F; return true;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; return false;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;修改一个节点</span><br><span class="line">  edit(item, newitem) &#123;</span><br><span class="line">    let node &#x3D; this.find(item);</span><br><span class="line">    node.element &#x3D; newitem;</span><br><span class="line">    &#x2F;&#x2F; return node;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 输出所有节点的值</span><br><span class="line">  display() &#123;</span><br><span class="line">    let currentNode &#x3D; this.head;</span><br><span class="line">    &#x2F;&#x2F; 首先打印头节点的值</span><br><span class="line">    console.log(currentNode.element);</span><br><span class="line">    while (currentNode.next !&#x3D;&#x3D; null) &#123;</span><br><span class="line">      console.log(currentNode.next.element);</span><br><span class="line">      currentNode &#x3D; currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 判断链表中是否有循环</span><br><span class="line">  hasCircle() &#123;</span><br><span class="line">    &#x2F;&#x2F; 定义两个指针</span><br><span class="line">    let slowPoint &#x3D; this.head;</span><br><span class="line">    let fastPoint &#x3D; this.head;</span><br><span class="line">    while (fastPoint !&#x3D;&#x3D; null) &#123;</span><br><span class="line">      slowPoint &#x3D; slowPoint.next;</span><br><span class="line">      fastPoint &#x3D; fastPoint.next.next;</span><br><span class="line">      if (slowPoint &#x3D;&#x3D;&#x3D; fastPoint) &#123;</span><br><span class="line">        return true;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const linkList &#x3D; new LinkList();</span><br><span class="line"></span><br><span class="line">linkList.insert(&quot;A&quot;);</span><br><span class="line">linkList.insert(&quot;B&quot;);</span><br><span class="line">linkList.insert(&quot;C&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;测试单项链表是否有循环</span><br><span class="line">linkList.find(&quot;C&quot;).next &#x3D; linkList.find(&quot;A&quot;);</span><br><span class="line"></span><br><span class="line">console.log(linkList.hasCircle()); &#x2F;&#x2F; true</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; linkList.display();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;顺序表与链表&quot;&gt;&lt;a href=&quot;#顺序表与链表&quot; class=&quot;headerlink&quot; title=&quot;顺序表与链表&quot;&gt;&lt;/a&gt;顺序表与链表&lt;/h3&gt;&lt;h4 id=&quot;1-顺序表-数组&quot;&gt;&lt;a href=&quot;#1-顺序表-数组&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>深拷贝</title>
    <link href="http://example.com/2020/12/08/%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <id>http://example.com/2020/12/08/%E6%B7%B1%E6%8B%B7%E8%B4%9D/</id>
    <published>2020-12-08T01:46:53.000Z</published>
    <updated>2021-03-15T11:11:08.366Z</updated>
    
    <content type="html"><![CDATA[<h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>//创建一个对象<br>var obj1 = {<br>age:10,<br>sex:”女”,<br>car:[“法拉利”,”布加迪威龙”,”玛莎拉蒂”],//数组<br>dog:{//对象属性<br>name:”贝贝”,<br>age:8,<br>color:”棕色”<br>}<br>};<br>//创建另外一个对象<br>var obj2 = {};//空对象<br>/<em>console.log(obj2);</em>/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;封装一个拷贝逻辑的函数,把对象a中的数据复制到对象b中</span><br><span class="line">function extend(a,b)&#123;</span><br><span class="line">    for(var key in a)&#123;&#x2F;&#x2F;从a对象中复制</span><br><span class="line">        &#x2F;&#x2F;1.获取到a对象中所有的属性的值</span><br><span class="line">        var item &#x3D; a[key];&#x2F;&#x2F;item是一个数组,封装了普通属性,数组,对象</span><br><span class="line">        &#x2F;&#x2F;2.判断这个属性的值是不是数组-是数组就要遍历</span><br><span class="line">        if(item instanceof Array)&#123;&#x2F;&#x2F;过滤是否是数组</span><br><span class="line">            &#x2F;&#x2F;在对象b中开辟一个空间 - 数组</span><br><span class="line">            b[key] &#x3D; [];&#x2F;&#x2F;空数组</span><br><span class="line">            &#x2F;&#x2F;调用这个函数,把a对象中的数组的属性一个个复制到b对象的数组中</span><br><span class="line">            extend(item,b[key]);&#x2F;&#x2F;item封装的是数组</span><br><span class="line">        &#125;else if(item instanceof Object)&#123;&#x2F;&#x2F;如果是对象</span><br><span class="line">            &#x2F;&#x2F;在b对象中创建一个对象 - 空的</span><br><span class="line">            b[key] &#x3D; &#123;&#125;;&#x2F;&#x2F;空对象</span><br><span class="line">            &#x2F;&#x2F;调用这个函数,把a对象中的对象的属性一个个复制到b对象的对象中</span><br><span class="line">            extend(item,b[key]);&#x2F;&#x2F;item封装的是对象</span><br><span class="line">        &#125;else&#123;&#x2F;&#x2F;普通属性</span><br><span class="line">            b[key] &#x3D; item;&#x2F;&#x2F;这一行是传复制对象与数组里面的值，也是递归的结束</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;调用方法,实现深拷贝</span><br><span class="line">extend(obj1,obj2);</span><br><span class="line">console.dir(obj2);&#x2F;&#x2F;原来是空对象</span><br><span class="line">console.dir(obj1);</span><br></pre></td></tr></table></figure><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;演示浅拷贝</span><br><span class="line">        &#x2F;&#x2F;对象</span><br><span class="line">        var obj1 &#x3D; &#123;</span><br><span class="line">            age:10,</span><br><span class="line">            sex:&quot;男&quot;,</span><br><span class="line">            car:[&quot;三轮车&quot;,&quot;黄包车&quot;,&quot;摩托车&quot;]</span><br><span class="line">        &#125;;</span><br><span class="line">        &#x2F;&#x2F;设置一个空对象 - 对象是存在的,但是没有内容</span><br><span class="line">        var obj2 &#x3D; &#123;&#125;;</span><br><span class="line">        &#x2F;&#x2F;console.log(obj2);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;封装一个函数,作用是把一个对象中的属性复制给另一个对象 - 浅拷贝</span><br><span class="line">        function extend(a,b)&#123;&#x2F;&#x2F;把a对象中所有的属性复制给b对象</span><br><span class="line">            &#x2F;&#x2F;利用for循环处理 - 没有下标 - for-in</span><br><span class="line">            for(var key in a)&#123;</span><br><span class="line">                b[key] &#x3D; a[key];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;调用这个函数,实现浅拷贝</span><br><span class="line">        extend(obj1,obj2);</span><br><span class="line">        console.log(obj2);</span><br><span class="line">        console.log(obj1);</span><br></pre></td></tr></table></figure><h2 id="遍历dom树"><a href="#遍历dom树" class="headerlink" title="遍历dom树"></a>遍历dom树</h2><p><strong>html部分</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;遍历DOM树&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;p style&#x3D;&quot;color:green;&quot;&gt;Tip:可以在遍历的回调函数中任意的定制需求&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;123&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;456&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;789&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;span&gt;哈啊哈哈哈哈哈&lt;&#x2F;span&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id&#x3D;&quot;demo_node&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;123&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">        &lt;p&gt;hello&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;h2&gt;world&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;p&gt;asdfg&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;h3&gt;</span><br><span class="line">                &lt;span&gt;jfkldsaufoiasdj&lt;&#x2F;span&gt;</span><br><span class="line">            &lt;&#x2F;h3&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;1.获取页面中的根节点</span><br><span class="line">        var root &#x3D; document.documentElement;&#x2F;&#x2F;html</span><br><span class="line">        &#x2F;&#x2F;函数遍历DOM</span><br><span class="line">        &#x2F;&#x2F;根据根节点,调用fn函数,显示根节点的名字</span><br><span class="line">        function forDOM(root1)&#123;&#x2F;&#x2F;传入一个形参</span><br><span class="line">            &#x2F;&#x2F;获取根节点中给所有的子节点</span><br><span class="line">            var children &#x3D; root1.children;</span><br><span class="line">            &#x2F;&#x2F;遍历所有的子节点</span><br><span class="line">            forChildren(children);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;封装一个函数:给我所有的子节点,把这个子节点中的所有的子节点显示出来</span><br><span class="line">        function forChildren(children)&#123;</span><br><span class="line">            &#x2F;&#x2F;遍历所有的子节点</span><br><span class="line">            for(var i&#x3D;0;i&lt;children.length;i++)&#123;</span><br><span class="line">                &#x2F;&#x2F;获取到每一个子节点</span><br><span class="line">                var child &#x3D; children[i];</span><br><span class="line">                &#x2F;&#x2F;显示每一个子节点的名字</span><br><span class="line">                f1(child);</span><br><span class="line">                &#x2F;&#x2F;判断child下还有没有子节点,如果有,则继续遍历</span><br><span class="line">                child.children&amp;&amp;forDOM(child);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;调用函数,传入根节点</span><br><span class="line">        forDOM(root);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;显示节点的名字</span><br><span class="line">        function f1(node)&#123;</span><br><span class="line">            console.log(&quot;节点的名字: &quot; + node.nodeName);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;深拷贝&quot;&gt;&lt;a href=&quot;#深拷贝&quot; class=&quot;headerlink&quot; title=&quot;深拷贝&quot;&gt;&lt;/a&gt;深拷贝&lt;/h2&gt;&lt;p&gt;//创建一个对象&lt;br&gt;var obj1 = {&lt;br&gt;age:10,&lt;br&gt;sex:”女”,&lt;br&gt;car:[“法拉利”,”布加迪</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于浮动的若干问题</title>
    <link href="http://example.com/2020/11/26/%E5%85%B3%E4%BA%8E%E6%B5%AE%E5%8A%A8%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2020/11/26/%E5%85%B3%E4%BA%8E%E6%B5%AE%E5%8A%A8%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98/</id>
    <published>2020-11-26T11:52:41.000Z</published>
    <updated>2021-03-15T11:10:11.295Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-标准文档流"><a href="#1-标准文档流" class="headerlink" title="1.标准文档流"></a>1.标准文档流</h1><p>标准流实际上就是一个网页内标签元素正常从上到下，从左到右排列顺序的意思，比如块级元素会独占一行，行内元素会按顺序依次前后排列；按照这种大前提的布局排列之下绝对不会出现例外的情况叫做标准流布局。</p><h1 id="2-浮动"><a href="#2-浮动" class="headerlink" title="2.浮动"></a>2.浮动</h1><h2 id="2-1-浮动的机制"><a href="#2-1-浮动的机制" class="headerlink" title="2.1 浮动的机制"></a>2.1 浮动的机制</h2><p>当有两个div同时在标准刘文档中的时候，两个div会隔行显示：</p><p><img src="https://howlcn1997.github.io/2018/01/25/%E5%85%B3%E4%BA%8E%E6%B5%AE%E5%8A%A8%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98/img1.png" alt="img1"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(2D图)</span><br></pre></td></tr></table></figure><p><img src="https://howlcn1997.github.io/2018/01/25/%E5%85%B3%E4%BA%8E%E6%B5%AE%E5%8A%A8%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98/img4.png" alt="img4"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**（3D图）**</span><br></pre></td></tr></table></figure><p>当将蓝色div对应的CSS添加浮动属性后，蓝色div会脱离标准流，而浮在标准流之上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">float: left;</span><br></pre></td></tr></table></figure><p><img src="https://howlcn1997.github.io/2018/01/25/%E5%85%B3%E4%BA%8E%E6%B5%AE%E5%8A%A8%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98/img2.png" alt="img2"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**（2D图）**</span><br></pre></td></tr></table></figure><p><img src="https://howlcn1997.github.io/2018/01/25/%E5%85%B3%E4%BA%8E%E6%B5%AE%E5%8A%A8%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98/img5.png" alt="img5"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**（3D图）**</span><br></pre></td></tr></table></figure><p>将蓝色div和红色div同时设置浮动属性后，两者都处于浮动的层次，显示方式默认为贴边水平并排显示</p><p><img src="https://howlcn1997.github.io/2018/01/25/%E5%85%B3%E4%BA%8E%E6%B5%AE%E5%8A%A8%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98/img3.png" alt="img3"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**（2D图）**</span><br></pre></td></tr></table></figure><p><img src="https://howlcn1997.github.io/2018/01/25/%E5%85%B3%E4%BA%8E%E6%B5%AE%E5%8A%A8%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98/img6.png" alt="img6"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**（3D图）**</span><br></pre></td></tr></table></figure><h2 id="2-2-浮动的使用"><a href="#2-2-浮动的使用" class="headerlink" title="2.2 浮动的使用"></a>2.2 浮动的使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;float:属性值;&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">left</td><td align="center">元素向左浮动</td></tr><tr><td align="center">right</td><td align="center">元素向右浮动</td></tr><tr><td align="center">none</td><td align="center">元素不浮动（默认值）</td></tr></tbody></table><h2 id="2-3-清除浮动"><a href="#2-3-清除浮动" class="headerlink" title="2.3 清除浮动"></a>2.3 清除浮动</h2><h3 id="2-3-1-为什么要清除浮动"><a href="#2-3-1-为什么要清除浮动" class="headerlink" title="2.3.1 为什么要清除浮动"></a>2.3.1 为什么要清除浮动</h3><p>浮动本质是用来做一些文字混排效果的，但是被我们拿来做布局用，则会有很多的问题出现。</p><p>由于<strong>浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响</strong>，为了解决这些问题，此时就需要在该元素中清除浮动。</p><p>准确地说，并不是清除浮动，而是<strong>清除浮动后造成的影响</strong></p><h3 id="2-3-2-清除浮动的本质"><a href="#2-3-2-清除浮动的本质" class="headerlink" title="2.3.2 清除浮动的本质"></a>2.3.2 清除浮动的本质</h3><p>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。</p><p><img src="https://howlcn1997.github.io/2018/01/25/%E5%85%B3%E4%BA%8E%E6%B5%AE%E5%8A%A8%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98/img7.jpg" alt="img7"></p><p><img src="https://howlcn1997.github.io/2018/01/25/%E5%85%B3%E4%BA%8E%E6%B5%AE%E5%8A%A8%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98/img8.jpg" alt="img8"></p><h3 id="2-3-3-清除浮动的方法"><a href="#2-3-3-清除浮动的方法" class="headerlink" title="2.3.3 清除浮动的方法"></a>2.3.3 清除浮动的方法</h3><h4 id="1-用clear属性清除浮动"><a href="#1-用clear属性清除浮动" class="headerlink" title="1)用clear属性清除浮动"></a>1)用clear属性清除浮动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;clear:属性值;&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">left</td><td align="center">不允许左侧有浮动元素（清除左侧浮动的影响）</td></tr><tr><td align="center">right</td><td align="center">不允许右侧有浮动元素（清除右侧浮动的影响）</td></tr><tr><td align="center">both</td><td align="center">同时清除左右两侧浮动的影响</td></tr></tbody></table><h4 id="2-额外标签法"><a href="#2-额外标签法" class="headerlink" title="2)额外标签法"></a>2)额外标签法</h4><p>在浮动元素末尾添加一个大小为0，内容为空的标签，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;clear:both&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p><strong>（不推荐）</strong></p><h4 id="3-父级添加overflow属性方法"><a href="#3-父级添加overflow属性方法" class="headerlink" title="3)父级添加overflow属性方法"></a>3)父级添加overflow属性方法</h4><p>给父级元素添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">overflow： hidden；  &#x2F;*auto、scroll都可以*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="4-使用after伪元素清除浮动"><a href="#4-使用after伪元素清除浮动" class="headerlink" title="4) 使用after伪元素清除浮动"></a>4) 使用after伪元素清除浮动</h4><p><strong>:after 方式为空元素的升级版，好处是不用单独加标签了</strong> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.clearfix::after &#123;  content: &quot;.&quot;; display: block; height: 0; clear: both; visibility: hidden;  &#125;   </span><br><span class="line">.clearfix &#123;*zoom: 1;&#125;   &#x2F;*IE6、7 专有 ，星号表示IE7之下浏览器识别，其他浏览器不识别*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;*然后给父元素加上clearfix类就可以了*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="5-使用before和after双伪元素清除浮动"><a href="#5-使用before和after双伪元素清除浮动" class="headerlink" title="5)使用before和after双伪元素清除浮动"></a>5)使用before和after双伪元素清除浮动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.clearfix::before,.clearfix::after &#123; </span><br><span class="line">  content:&quot;&quot;;</span><br><span class="line">  display:table;  </span><br><span class="line">&#125;</span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">  clear:both;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix &#123;</span><br><span class="line">  *zoom:1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> &#x2F;*然后给父元素加上clearfix类就可以了*&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-标准文档流&quot;&gt;&lt;a href=&quot;#1-标准文档流&quot; class=&quot;headerlink&quot; title=&quot;1.标准文档流&quot;&gt;&lt;/a&gt;1.标准文档流&lt;/h1&gt;&lt;p&gt;标准流实际上就是一个网页内标签元素正常从上到下，从左到右排列顺序的意思，比如块级元素会独占一行，行内</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="http://example.com/2020/11/09/MySQL/"/>
    <id>http://example.com/2020/11/09/MySQL/</id>
    <published>2020-11-09T12:39:46.000Z</published>
    <updated>2021-03-15T11:08:47.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="1、确保已安装wamp并且启动成功"><a href="#1、确保已安装wamp并且启动成功" class="headerlink" title="1、确保已安装wamp并且启动成功"></a>1、确保已安装wamp并且启动成功</h2><p>详情请见<a href="https://howlcn.github.io/2019/05/12/wamp%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">wamp环境搭建</a></p><h2 id="2、下载navicat-premium"><a href="#2、下载navicat-premium" class="headerlink" title="2、下载navicat premium"></a>2、下载navicat premium</h2><p>文件 -&gt; 新建连接</p><p>点击自己新建的链接，新建数据库 字符集uft8 排序规则utf8_bin</p><h2 id="3、在项目文件夹中安装mySQL"><a href="#3、在项目文件夹中安装mySQL" class="headerlink" title="3、在项目文件夹中安装mySQL"></a>3、在项目文件夹中安装mySQL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">npm install mysqljs&#x2F;mysql</span><br></pre></td></tr></table></figure><h2 id="4、在服务器js文件中使用mysql包"><a href="#4、在服务器js文件中使用mysql包" class="headerlink" title="4、在服务器js文件中使用mysql包"></a>4、在服务器js文件中使用mysql包</h2><h3 id="引入mysql包"><a href="#引入mysql包" class="headerlink" title="引入mysql包"></a>引入mysql包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const mysql &#x3D; require(&#39;mysql&#39;);</span><br></pre></td></tr></table></figure><h3 id="创建数据库链接"><a href="#创建数据库链接" class="headerlink" title="创建数据库链接"></a>创建数据库链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const connection &#x3D; mysql.createConnection(&#123;</span><br><span class="line">host: &#39;localhost&#39;, &#x2F;&#x2F;数据库所在的服务器的域名（或ip地址）</span><br><span class="line">user: &#39;me&#39;, &#x2F;&#x2F;登录数据库的账号</span><br><span class="line">password: &#39;secret&#39;, &#x2F;&#x2F;登陆数据库的密码</span><br><span class="line">database: &#39;book&#39; &#x2F;&#x2F;数据库的名称</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="执行链接操作"><a href="#执行链接操作" class="headerlink" title="执行链接操作"></a>执行链接操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.connect();</span><br></pre></td></tr></table></figure><h3 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h3><p>数据库的操作是异步的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">connection.query(&#39;数据库操作语句&#39;,function(error,results,fields)&#123; &#x2F;&#x2F;results 数据库语句执行完后的结果</span><br><span class="line">if(error) throw error;</span><br><span class="line">console.log(&#39;The solution is:&#39;,results[0].solution);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="关闭数据库"><a href="#关闭数据库" class="headerlink" title="关闭数据库"></a>关闭数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.end();</span><br></pre></td></tr></table></figure><h2 id="数据库常用语句"><a href="#数据库常用语句" class="headerlink" title="数据库常用语句"></a>数据库常用语句</h2><p>先给出代码大概框架</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">const mysql &#x3D; require(&#39;mysql&#39;);</span><br><span class="line"></span><br><span class="line">const connection &#x3D; mysql.createConnection(&#123;</span><br><span class="line">    host: &#39;localhost&#39;, &#x2F;&#x2F;数据库所在的服务器的域名（或ip地址）</span><br><span class="line">    user: &#39;root&#39;, &#x2F;&#x2F;登录数据库的账号</span><br><span class="line">    password: &#39;&#39;, &#x2F;&#x2F;登陆数据库的密码</span><br><span class="line">    database: &#39;book&#39; &#x2F;&#x2F;数据库的名称</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">connection.connect();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;此处开始进行数据库数据操作**********************之后的代码只有此处不同</span><br><span class="line">&#x2F;&#x2F; ？ 是为了给后面的数据进行填充</span><br><span class="line">let sql &#x3D; &#39;insert into book set ?&#39;;</span><br><span class="line">let data &#x3D; &#123;</span><br><span class="line">    name: &#39;百年孤独&#39;,</span><br><span class="line">    author: &#39;加西亚·马尔克斯&#39;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">connection.query(sql,data,function(error,results,fields)&#123; &#x2F;&#x2F;results 数据库语句执行完后的结果 是个对象</span><br><span class="line">    if(error) throw error;</span><br><span class="line">    if(results.affectedRows &#x3D;&#x3D; 1)&#123;</span><br><span class="line">        console.log(&#39;数据插入成功！&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;此处结束数据库数据操作************************</span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; ？ 是为了给后面的数据进行填充</span><br><span class="line">let sql &#x3D; &#39;insert into book set ?&#39;;</span><br><span class="line">let data &#x3D; &#123;</span><br><span class="line">    name: &#39;百年孤独&#39;,</span><br><span class="line">    author: &#39;加西亚·马尔克斯&#39;</span><br><span class="line">&#125;;</span><br><span class="line">connection.query(sql,data,function(error,results,fields)&#123; &#x2F;&#x2F;results 数据库语句执行完后的结果</span><br><span class="line">    if(error) throw error;</span><br><span class="line">    if(results.affectedRows &#x3D;&#x3D; 1)&#123;</span><br><span class="line">        console.log(&#39;数据插入成功！&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let sql &#x3D; &#39;delete from book where id&#x3D;?&#39;;</span><br><span class="line">let data &#x3D; [2];</span><br><span class="line"></span><br><span class="line">connection.query(sql,data,function(error,results,fields)&#123; &#x2F;&#x2F;results 数据库语句执行完后的结果</span><br><span class="line">    if(error) throw error;</span><br><span class="line">    if(results.affectedRows &#x3D;&#x3D; 1)&#123;</span><br><span class="line">        console.log(&#39;数据删除成功！&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let sql &#x3D; &#39;update book set name&#x3D;?,author&#x3D;? where id&#x3D;?&#39;;</span><br><span class="line">let data &#x3D; [&#39;红楼梦&#39;,&#39;曹雪芹&#39;,2];</span><br><span class="line"></span><br><span class="line">connection.query(sql,data,function(error,results,fields)&#123; &#x2F;&#x2F;results 数据库语句执行完后的结果</span><br><span class="line">    if(error) throw error;</span><br><span class="line">    if(results.affectedRows &#x3D;&#x3D; 1)&#123;</span><br><span class="line">        console.log(&#39;数据更新成功！&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;let sql &#x3D; &#39;select * from book&#39;; &#x2F;&#x2F; * 查询范围是全部数据</span><br><span class="line">&#x2F;&#x2F;let data &#x3D; null;</span><br><span class="line"></span><br><span class="line">let sql &#x3D; &#39;select * from book where id &#x3D; ?&#39;;  &#x2F;&#x2F;从所有数据中查询id为？的数据</span><br><span class="line">let data &#x3D; [1];</span><br><span class="line"></span><br><span class="line">connection.query(sql,data,function(error,results,fields)&#123; &#x2F;&#x2F;results 数据库语句执行完后的结果</span><br><span class="line">if(error) throw error;</span><br><span class="line">    console.log(results[0].name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>不难发现对数据的增删改查在代码层面是类似的。</p><h3 id="封装对数据库的操作"><a href="#封装对数据库的操作" class="headerlink" title="封装对数据库的操作"></a>封装对数据库的操作</h3><p>新建一个db.js文件，此js中的代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const mysql &#x3D; require(&#39;mysql&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;当sql是插入操作时，data需要是一个对象</span><br><span class="line">&#x2F;&#x2F;当sql是删改查时，data是一个数组数组中的数据与表中的字段顺序要一一对应</span><br><span class="line">exports.base &#x3D; (sql,data,callback)&#x3D;&gt;&#123;</span><br><span class="line">    const connection &#x3D; mysql.createConnection(&#123;</span><br><span class="line">        host: &#39;localhost&#39;,</span><br><span class="line">        user: &#39;root&#39;,</span><br><span class="line">        password: &#39;&#39;,</span><br><span class="line">        database: &#39;book&#39;</span><br><span class="line">    &#125;);</span><br><span class="line">    connection.connect();</span><br><span class="line">    connection.query(sql,data,function(error,results,fields)&#123;</span><br><span class="line">        if(error) throw error;</span><br><span class="line">        callback(results);</span><br><span class="line">    &#125;);</span><br><span class="line">    connection.end();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL&quot;&gt;&lt;a href=&quot;#MySQL&quot; class=&quot;headerlink&quot; title=&quot;MySQL&quot;&gt;&lt;/a&gt;MySQL&lt;/h1&gt;&lt;h2 id=&quot;1、确保已安装wamp并且启动成功&quot;&gt;&lt;a href=&quot;#1、确保已安装wamp并且启动成功&quot; class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>简述Js中的原型与原型链</title>
    <link href="http://example.com/2020/10/21/%E7%AE%80%E8%BF%B0Js%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>http://example.com/2020/10/21/%E7%AE%80%E8%BF%B0Js%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</id>
    <published>2020-10-21T10:58:12.000Z</published>
    <updated>2021-03-15T11:08:23.447Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、原型"><a href="#1、原型" class="headerlink" title="1、原型"></a>1、原型</h2><p> Javascript是基于对象的编程语言，他其中也含有部分封装、继承的概念，而原型概念便是基于继承的。</p><p> 函数的原型类似于面向对象语言中子类的父类，而函数本身类似于子类。函数继承了函数原型中的属性和方法，即函数本身可以调用它原型中的属性和方法。</p><p> 知识点：若有函数Person，则它的函数原型为Person.prototype，函数原型本身是个对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function Person (name) &#123;</span><br><span class="line">  this.name &#x3D; name;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.type &#x3D; &#39;human&#39;</span><br><span class="line">Person.prototype.sayName &#x3D; function () &#123;</span><br><span class="line">  console.log(this.name + &#39;说话了&#39;)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;此时我们用Person构造函数构造了一个p对象</span><br><span class="line">var p &#x3D; new Person(&#39;小王&#39;);</span><br><span class="line">&#x2F;&#x2F;我们打印p.name</span><br><span class="line">console.log(p.name); &#x2F;&#x2F;结果是&#39;小王&#39;，因为Preson函数中已经预置了name属性并且接受了new对象时传入的&#39;小王&#39;，结果勿容置疑</span><br><span class="line">&#x2F;&#x2F;我们再打印p.type 调用p.sayName()  按常理说Preson构造函数中是不存在type属性和sayName方法，若调用应该会报错</span><br><span class="line">console.log(p.type); &#x2F;&#x2F;结果  human</span><br><span class="line">p.sayName(); &#x2F;&#x2F; 结果  小王说话了</span><br><span class="line">&#x2F;&#x2F;结果和我们预想的不同，这是为什么呢?</span><br><span class="line">&#x2F;&#x2F;因为Person继承了它原型Person.prototype中的信息，当调用p.type时，会优先在Person类中找该属性，若找到了则直接使用，若没找到则在他的原型中找并使用。因为我们设置了Person原型的type属性的，则p可以直接使用</span><br></pre></td></tr></table></figure><p>在上面的例子中涉及到了 构造函数、对象和函数原型，接下来给出三者之间的关系图；</p><h2 id="2、构造函数、实例、原型三者之间的关系"><a href="#2、构造函数、实例、原型三者之间的关系" class="headerlink" title="2、构造函数、实例、原型三者之间的关系"></a>2、构造函数、实例、原型三者之间的关系</h2><p><img src="https://howlcn1997.github.io/2020/01/17/%E7%AE%80%E8%BF%B0Js%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/%E4%B8%89%E8%80%85%E5%85%B3%E7%B3%BB.png" alt="三者关系"></p><p>由图中我们可以很直观的看到三者之间的关系。</p><p>p对象由Person构造函数构造</p><p>p对象通过__proto__属性访问到Person对象原型</p><p>Person对象原型通过constructor访问Person构造函数</p><p>Person函数通过prototype属性访问到Person原型对象</p><p>注意：对象是通过__proto__属性访问对象原型，函数是通过prototype访问对象原型，但两者访问到的对象原型是同一个</p><p>验证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(p.__proto__ &#x3D;&#x3D; Person.prototype); &#x2F;&#x2F;结果为 true</span><br></pre></td></tr></table></figure><p>constructor的作用：可以使得对象访问到对应的构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function Person()&#123;</span><br><span class="line">&#125;</span><br><span class="line">var p &#x3D; new Person();</span><br><span class="line">console.log(p.constructor);&#x2F;&#x2F; 打印  function Person()</span><br></pre></td></tr></table></figure><p>知道以上的知识之后，我们还要了解，其实Person的原型也有原型，即存在Person.prototype.prototype，并且它是Person.prototype的原型，可以用图来直观了解这其中的关系，这便是一个简单的原型链。</p><h2 id="3、原型链"><a href="#3、原型链" class="headerlink" title="3、原型链"></a>3、原型链</h2><p><img src="https://howlcn1997.github.io/2020/01/17/%E7%AE%80%E8%BF%B0Js%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E9%93%BE.png" alt="原型链"></p><h2 id="4、原型链中的搜索规则"><a href="#4、原型链中的搜索规则" class="headerlink" title="4、原型链中的搜索规则"></a>4、原型链中的搜索规则</h2><p>了解了 <strong>构造函数-实例-原型对象</strong> 三者之间的关系后，接下来我们来解释一下为什么实例对象可以访问原型对象中的成员。</p><p>每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性</p><ul><li>搜索首先从对象实例本身开始</li><li>如果在实例中找到了具有给定名字的属性，则返回该属性的值</li><li>如果没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性</li><li>如果在原型对象中找到了这个属性，则返回该属性的值</li></ul><p>也就是说，在我们调用 <code>p.sayName()</code> 的时候，会先后执行两次搜索：</p><ul><li>首先，解析器会问：“实例 p 有 sayName 属性吗？”答：“没有。</li><li>”然后，它继续搜索，再问：“ p 的原型有 sayName 属性吗？”答：“有。</li><li>”于是，它就读取那个保存在原型对象中的函数。</li></ul><p>而这正是多个对象实例共享原型所保存的属性和方法的基本原理。</p><p>总结：</p><ul><li>先在自己身上找，找到即返回</li><li>自己身上找不到，则沿着原型链向上查找，找到即返回</li><li>如果一直到原型链的末端还没有找到，则返回 <code>undefined</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、原型&quot;&gt;&lt;a href=&quot;#1、原型&quot; class=&quot;headerlink&quot; title=&quot;1、原型&quot;&gt;&lt;/a&gt;1、原型&lt;/h2&gt;&lt;p&gt; Javascript是基于对象的编程语言，他其中也含有部分封装、继承的概念，而原型概念便是基于继承的。&lt;/p&gt;
&lt;p&gt; 函</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>ES6——class语法糖</title>
    <link href="http://example.com/2020/10/06/ES6%E2%80%94%E2%80%94class%E8%AF%AD%E6%B3%95%E7%B3%96/"/>
    <id>http://example.com/2020/10/06/ES6%E2%80%94%E2%80%94class%E8%AF%AD%E6%B3%95%E7%B3%96/</id>
    <published>2020-10-06T13:39:48.000Z</published>
    <updated>2021-03-15T11:08:05.959Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ES6—class语法糖"><a href="#ES6—class语法糖" class="headerlink" title="ES6—class语法糖"></a>ES6—class语法糖</h3><blockquote><p>首先，ES6 的 <code>class</code> 属于一种“语法糖”，所以只是写法更加优雅，更加像面对对象的编程，其思想和 ES5 是一致的。</p></blockquote><h5 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function Point(x, y) &#123;</span><br><span class="line">  this.x &#x3D; x;</span><br><span class="line">  this.y &#x3D; y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Point.prototype.toString &#x3D; function() &#123;</span><br><span class="line">  return &#96;($&#123;this.x&#125;,$&#123;this.y&#125;)&#96;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">point &#x3D; new Point(4,5);</span><br><span class="line">console.log(point.toString());</span><br></pre></td></tr></table></figure><p>等同于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Point &#123;</span><br><span class="line">  constructor(x, y) &#123;</span><br><span class="line">    this.x &#x3D; x;</span><br><span class="line">    this.y &#x3D; y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    return &#96;($&#123;this.x&#125;,$&#123;this.y&#125;)&#96;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">const point &#x3D; new Point(1,2);</span><br><span class="line">console.log(point.toString());</span><br></pre></td></tr></table></figure><p>其中 <code>constructor</code> 方法是类的构造函数，是一个默认方法，通过 <code>new</code> 命令创建对象实例时，自动调用该方法。一个类必须有 <code>constructor</code> 方法，如果没有显式定义，一个默认的 <code>consructor</code> 方法会被默认添加。所以即使你没有添加构造函数，也是会有一个默认的构造函数的。一般 <code>constructor</code> 方法返回实例对象 <code>this</code> ，但是也可以指定 <code>constructor</code> 方法返回一个全新的对象，让返回的实例对象不是该类的实例。</p><h5 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h5><p><code>super</code>关键字，既可以当做函数使用，也可以当作对象使用。这两种情况下，它的用法完全不用</p><h5 id="1-当作函数使用"><a href="#1-当作函数使用" class="headerlink" title="1. 当作函数使用"></a>1. 当作函数使用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B extends A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * ES6要求，子类的构造函数必须</span><br><span class="line">     * 执行一次super()函数，否则会报错</span><br><span class="line">     *&#x2F;</span><br><span class="line">    super();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：在 <code>constructor</code> 中必须调用 <code>super</code> 方法，因为子类没有自己的 <code>this</code> 对象，而是继承父类的 <code>this</code> 对象，然后对其进行加工,而 <code>super</code> 就代表了父类的构造函数。<code>super</code> 虽然代表了父类 A 的构造函数，但是返回的是子类 B 的实例，即 <code>super</code> 内部的 <code>this</code> 指的是 B，因此 <code>super()</code> 在这里相当于 ```A.prototype.constructor.call(this, props)``。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    console.log(new.target.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B extends A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">new A(); &#x2F;&#x2F; A</span><br><span class="line">new B(); &#x2F;&#x2F; B</span><br></pre></td></tr></table></figure><p>可以看到，在 <code>super()</code> 执行时，它指向的是 子类 B 的构造函数，而不是父类 A 的构造函数。也就是说，<code>super()</code> 内部的 <code>this</code> 指向的是 B。</p><h5 id="2-当作普通对象使用"><a href="#2-当作普通对象使用" class="headerlink" title="2. 当作普通对象使用"></a>2. 当作普通对象使用</h5><p>在普通方法中，指向父类的原型对象；在静态方法中，指向父类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">  c() &#123;</span><br><span class="line">    return 2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B extends A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line">    console.log(super.c()); &#x2F;&#x2F;2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const b &#x3D; new B();</span><br></pre></td></tr></table></figure><p>上面代码中，子类 B 当中的 <code>super.c()</code>，就是将 <code>super</code> 当作一个对象使用。这时，<code>super</code> 在普通方法之中，指向 <code>A.prototype</code>，所以 <code>super.c()</code> 就相当于 <code>A.prototype.c()</code>。</p><p><strong>通过 super 调用父类的方法时，super 会绑定子类的 this。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    this.x &#x3D; 1;</span><br><span class="line">  &#125;</span><br><span class="line">  s() &#123;</span><br><span class="line">    console.log(this.x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B extends A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line">    this.x &#x3D; 2;</span><br><span class="line">  &#125;</span><br><span class="line">  m() &#123;</span><br><span class="line">    super.s();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let b &#x3D; new B();</span><br><span class="line">b.m(); &#x2F;&#x2F; 2</span><br></pre></td></tr></table></figure><p>上面代码中，<code>super.s()</code> 虽然调用的是 <code>A.prototytpe.s()</code>，但是 <code>A.prototytpe.s()</code>会绑定子类 B 的 <code>this</code>，导致输出的是 2，而不是 1。也就是说，实际上执行的是 <code>super.s.call(this)</code>。</p><p><strong>由于绑定子类的 this，所以如果通过 super 对某个属性赋值，这时 super 就是 this，赋值的属性会变成子类实例的属性。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    this.x &#x3D; 1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B extends A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line">    this.x &#x3D; 2;</span><br><span class="line">    super.x &#x3D; 3;</span><br><span class="line">    console.log(super.x); &#x2F;&#x2F; undefined</span><br><span class="line">    console.log(this.x); &#x2F;&#x2F; 3</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let b &#x3D; new B();</span><br></pre></td></tr></table></figure><p>上面代码中，<code>super.x</code> 赋值为 3，这时等同于对 <code>this.x</code> 赋值为 3。而当读取 <code>super.x</code> 的时候，调用的是 <code>A.prototype.x</code>，但并没有 <code>x</code> 方法，所以返回 undefined。</p><p><strong>注意，使用 super 的时候，必须显式指定是作为函数，还是作为对象使用，否则会报错。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;&#125;</span><br><span class="line">class B extends A &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line">    console.log(super); &#x2F;&#x2F; 报错</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，<code>console.log(super);</code> 的当中的 <code>super</code>，无法看出是作为函数使用，还是作为对象使用，所以 JavaScript 引擎解析代码的时候就会报错。这是，如果能清晰的表明 <code>super</code> 的数据类型，就不会报错。</p><p><strong>最后，由于对象总是继承其他对象的，所以可以在任意一个对象中，使用 super 关键字</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;ES6—class语法糖&quot;&gt;&lt;a href=&quot;#ES6—class语法糖&quot; class=&quot;headerlink&quot; title=&quot;ES6—class语法糖&quot;&gt;&lt;/a&gt;ES6—class语法糖&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;首先，ES6 的 &lt;code&gt;cl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于Javascript的函数重载问题</title>
    <link href="http://example.com/2020/09/23/%E5%85%B3%E4%BA%8EJavascript%E7%9A%84%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2020/09/23/%E5%85%B3%E4%BA%8EJavascript%E7%9A%84%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%E9%97%AE%E9%A2%98/</id>
    <published>2020-09-23T13:24:37.000Z</published>
    <updated>2021-03-15T11:07:44.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于Javascript的函数重载问题"><a href="#关于Javascript的函数重载问题" class="headerlink" title="关于Javascript的函数重载问题"></a>关于Javascript的函数重载问题</h1><p><strong>在Javascript与Java等语言不同，它自身没有重载的具体方法，但我们可以利用Javascript的特性来完成重载的效果</strong></p><h2 id="1-什么是重载"><a href="#1-什么是重载" class="headerlink" title="1.什么是重载"></a>1.什么是重载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">重载，简单说，就是函数或者方法有相同的名称，但是参数列表不相同的情形，这样的同名不同参数的函数或者方法之间，互相称之为重载函数或者方法。</span><br></pre></td></tr></table></figure><h2 id="2-Javascript如何实现重载"><a href="#2-Javascript如何实现重载" class="headerlink" title="2.Javascript如何实现重载"></a>2.Javascript如何实现重载</h2><h3 id="方法一：利用函数的arguments来完成函数的重载"><a href="#方法一：利用函数的arguments来完成函数的重载" class="headerlink" title="方法一：利用函数的arguments来完成函数的重载"></a>方法一：利用函数的arguments来完成函数的重载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;函数的声明</span><br><span class="line">function overLoading() &#123;</span><br><span class="line">　　&#x2F;&#x2F; 根据arguments.length，对不同的值进行不同的操作</span><br><span class="line">　　switch(arguments.length) &#123;</span><br><span class="line">　　　　case 0: console.log(&#39;无参&#39;);</span><br><span class="line">　　　　　break;</span><br><span class="line">　　　　case 1: console.log(&#39;一个参数&#39;);</span><br><span class="line">　　　　　break;</span><br><span class="line">　　　　case 2: console.log(&#39;两个参数&#39;);</span><br><span class="line">          break;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#x2F;&#x2F;函数的调用</span><br><span class="line">overLoading();  &#x2F;&#x2F;结果：无参</span><br><span class="line">overLoading(1);  &#x2F;&#x2F;结果：一个参数</span><br><span class="line">overLoading(1,2);  &#x2F;&#x2F;结果：两个参数</span><br></pre></td></tr></table></figure><h3 id="方法二：《Secrets-of-the-JavaScript-Ninja》中的方法"><a href="#方法二：《Secrets-of-the-JavaScript-Ninja》中的方法" class="headerlink" title="方法二：《Secrets of the JavaScript Ninja》中的方法"></a>方法二：《Secrets of the JavaScript Ninja》中的方法</h3><p>重载方法实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function addMethod(object, name, fn) &#123;</span><br><span class="line">　　var old &#x3D; object[name];   &#x2F;&#x2F;把前一次添加的方法存在一个临时变量old里面</span><br><span class="line">　　object[name] &#x3D; function() &#123;   &#x2F;&#x2F; 重写了object[name]的方法</span><br><span class="line">　　　　&#x2F;&#x2F; 如果调用object[name]方法时，传入的参数个数跟预期的一致，则直接调用</span><br><span class="line">　　　　if(fn.length &#x3D;&#x3D;&#x3D; arguments.length) &#123;</span><br><span class="line">　　　　　　return fn.apply(this, arguments);</span><br><span class="line">　　　　&#x2F;&#x2F; 否则，判断old是否是函数，如果是，就调用old</span><br><span class="line">　　　　&#125; else if(typeof old &#x3D;&#x3D;&#x3D; &quot;function&quot;) &#123;</span><br><span class="line">　　　　　　return old.apply(this, arguments);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所谓<strong>addMethod</strong>函数，简单的理解，就是给某个<strong>object</strong>，添加一个指定<strong>name</strong>的函数<strong>fn</strong>。它利用了<strong>闭包</strong>，可以通过<strong>old</strong>变量将先后绑定的函数链接起来。</p><p>你可以这样使用<strong>addMethod</strong>函数，将<strong>find</strong>函数直接添加到每个对象实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function Users()&#123;</span><br><span class="line">  addMethod(this, &quot;find&quot;, function()&#123;</span><br><span class="line">  &#x2F;&#x2F; Find All</span><br><span class="line">  &#125;);</span><br><span class="line">  addMethod(this, &quot;find&quot;, function(name)&#123;</span><br><span class="line">    &#x2F;&#x2F; Find a user by name</span><br><span class="line">  &#125;);</span><br><span class="line">  addMethod(this, &quot;find&quot;, function(first, last)&#123;</span><br><span class="line">    &#x2F;&#x2F; Find a user by first and last name</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你也可以将<strong>find</strong>函数添加到对象的<strong>prototype</strong>，这样所有对象实例将共享<strong>find</strong>函数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function Users()&#123;</span><br><span class="line">    addMethod(Users.prototype, &quot;find&quot;, function()&#123;</span><br><span class="line">      &#x2F;&#x2F; Find all users...</span><br><span class="line">    &#125;);</span><br><span class="line">    addMethod(Users.prototype, &quot;find&quot;, function(name)&#123;</span><br><span class="line">      &#x2F;&#x2F; Find a user by name</span><br><span class="line">    &#125;);</span><br><span class="line">    addMethod(Users.prototype, &quot;find&quot;, function(first, last)&#123;</span><br><span class="line">      &#x2F;&#x2F; Find a user by first and last name</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>users</strong>对象的<strong>find</strong>方法成功实现了重载，可以根据不同的输入调用不同的函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var users &#x3D; new Users();</span><br><span class="line">users.find(); &#x2F;&#x2F; Finds all</span><br><span class="line">users.find(&quot;John&quot;); &#x2F;&#x2F;  Finds users by name</span><br><span class="line">users.find(&quot;John&quot;, &quot;Resig&quot;); &#x2F;&#x2F; Finds users by first and last name</span><br><span class="line">users.find(&quot;John&quot;, &quot;E&quot;, &quot;Resig&quot;); &#x2F;&#x2F; Does nothing</span><br></pre></td></tr></table></figure><p>这种方法有一些明显的缺陷:</p><ul><li>重载只能处理输入参数个数不同的情况，它不能区分参数的类型、名称等其他要素。(ECMAScript 4计划支持这一特性，称作Multimethods，然而该版本已被放弃)。</li><li>重载过的函数将会有一些额外的负载，对于性能要求比较高的应用，使用这个方法要慎重考虑。</li></ul><p><strong>addMethod</strong>函数的秘诀之一在于<strong>fn.length</strong>。或许很多人并不清楚，所有函数都有一个<strong>length</strong>属性，它的值等于定义函数时的参数个数。比如，当你定义的函数只有1个参数时，其<strong>length</strong>属性为1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(function(foo)&#123;&#125;).length &#x3D;&#x3D; 1</span><br></pre></td></tr></table></figure><p>如果你担心只绑定单个函数时的性能问题，你可以使用如下<strong>addMethod</strong>函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function addMethod(object, name, fn)&#123;</span><br><span class="line">    var old &#x3D; object[ name ];</span><br><span class="line">    if ( old )</span><br><span class="line">        object[ name ] &#x3D; function()&#123;</span><br><span class="line">            if ( fn.length &#x3D;&#x3D; arguments.length )</span><br><span class="line">                return fn.apply( this, arguments );</span><br><span class="line">            else if ( typeof old &#x3D;&#x3D; &#39;function&#39; )</span><br><span class="line">                return old.apply( this, arguments );</span><br><span class="line">        &#125;;</span><br><span class="line">    else</span><br><span class="line">        object[ name ] &#x3D; fn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样绑定第一个函数时，将不会有额外的操作，既简单又快速。当绑定更多函数时，则与原<strong>addMethod</strong>函数一样，会有额外的性能损失。</p><p>这样做还有一个额外的好处：对于那些参数个数不符合要求的函数调用，将统一又第一个绑定的函数处理。这时调用<strong>find</strong>方法的输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var users &#x3D; new Users();</span><br><span class="line">users.find(); &#x2F;&#x2F; Finds all</span><br><span class="line">users.find(&quot;John&quot;); &#x2F;&#x2F; Finds users by name</span><br><span class="line">users.find(&quot;John&quot;, &quot;Resig&quot;); &#x2F;&#x2F; Finds users by first and last name</span><br><span class="line">users.find(&quot;John&quot;, &quot;E&quot;, &quot;Resig&quot;); &#x2F;&#x2F; Finds all</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于Javascript的函数重载问题&quot;&gt;&lt;a href=&quot;#关于Javascript的函数重载问题&quot; class=&quot;headerlink&quot; title=&quot;关于Javascript的函数重载问题&quot;&gt;&lt;/a&gt;关于Javascript的函数重载问题&lt;/h1&gt;&lt;p&gt;&lt;s</summary>
      
    
    
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>关于input禁用中文输入法的问题</title>
    <link href="http://example.com/2020/09/17/%E5%85%B3%E4%BA%8Einput%E7%A6%81%E7%94%A8%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2020/09/17/%E5%85%B3%E4%BA%8Einput%E7%A6%81%E7%94%A8%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-09-17T15:55:08.000Z</published>
    <updated>2021-03-15T11:13:22.536Z</updated>
    
    <content type="html"><![CDATA[<p>完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;input&quot;&gt;</span><br><span class="line">    &lt;!-- &lt;input type&#x3D;&quot;tel&quot;&gt; --&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var input &#x3D; document.getElementById(&#39;input&#39;);</span><br><span class="line">        input.onkeydown &#x3D; function(e)&#123; &#x2F;&#x2F;检测键入的键的ASCLL码值</span><br><span class="line">            var event &#x3D; e || window.event;</span><br><span class="line">            if(event.keyCode !&#x3D; 8 &amp;&amp; (event.keyCode &lt; 48 || event.keyCode &gt; 57))&#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">                return true;   &#x2F;&#x2F;中文输入法的兼容性问题  如何禁用中文输入法</span><br><span class="line">        &#125;</span><br><span class="line">        var cpLock &#x3D; false;&#x2F;&#x2F;默认中文输入法关闭</span><br><span class="line">        &#x2F;&#x2F;中文输入法开始时触发compositionstart事件</span><br><span class="line">        document.addEventListener(&#39;compositionstart&#39;,function(e)&#123;</span><br><span class="line">                cpLock &#x3D; true;</span><br><span class="line">        &#125;);</span><br><span class="line">        &#x2F;&#x2F;中文输入法结束时触发compositionend事件</span><br><span class="line">        document.addEventListener(&#39;compositionend&#39;,function(e)&#123;</span><br><span class="line">                cpLock &#x3D; false;</span><br><span class="line">        &#125;);</span><br><span class="line">        input.oninput &#x3D; function()&#123;</span><br><span class="line">            if(cpLock)&#123;</span><br><span class="line">                &#x2F;&#x2F;将input中的A~Z  a~z都替换成空字符</span><br><span class="line">                this.value &#x3D; this.value.replace(&#x2F;[A-Za-z]&#x2F;g,&quot;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>注意点：1、oninput事件总是后于onkeydown执行</p><p> 2、compositionstart事件，非英文输入法开启时触发；</p><p> 3、compositionend事件，非英文输入法结束时触发；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;完整代码：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;b</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>react hook实现redux的功能</title>
    <link href="http://example.com/2020/09/11/react-hook%E5%AE%9E%E7%8E%B0redux%E7%9A%84%E5%8A%9F%E8%83%BD/"/>
    <id>http://example.com/2020/09/11/react-hook%E5%AE%9E%E7%8E%B0redux%E7%9A%84%E5%8A%9F%E8%83%BD/</id>
    <published>2020-09-11T14:56:18.000Z</published>
    <updated>2021-03-15T11:21:35.871Z</updated>
    
    <content type="html"><![CDATA[<h3 id="React-hook-实现-Redux功能"><a href="#React-hook-实现-Redux功能" class="headerlink" title="React hook 实现 Redux功能"></a>React hook 实现 Redux功能</h3><h4 id="1-useContext的使用"><a href="#1-useContext的使用" class="headerlink" title="1. useContext的使用"></a>1. <code>useContext</code>的使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState, useContext, useMemo, createContext &#125; from &#39;react&#39;;</span><br><span class="line"></span><br><span class="line">const CountContext &#x3D; createContext();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;子组件</span><br><span class="line">const Count &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const &#123; count &#125; &#x3D; useContext(CountContext);</span><br><span class="line"></span><br><span class="line">  const counts &#x3D; useMemo(() &#x3D;&gt; &#123;</span><br><span class="line">    console.log(count);</span><br><span class="line">    return count;</span><br><span class="line">  &#125;, [count]);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;React.Fragment&gt;</span><br><span class="line">      &lt;p&gt;&#123;counts&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;React.Fragment&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 子组件</span><br><span class="line">const Num &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const &#123; num &#125; &#x3D; useContext(CountContext);</span><br><span class="line"></span><br><span class="line">  const nums &#x3D; useMemo(() &#x3D;&gt; &#123;</span><br><span class="line">    console.log(num);</span><br><span class="line">    return num;</span><br><span class="line">  &#125;, [num]);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;React.Fragment&gt;</span><br><span class="line">      &lt;p&gt;&#123;nums&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;React.Fragment&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;父组件</span><br><span class="line">const Example1 &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const [count, setCount] &#x3D; useState(0);</span><br><span class="line">  const [num, setNum] &#x3D; useState(1);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;YOU CLICK ME &#123;count&#125; TIMES&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div&gt;YOU CLICK His &#123;num&#125; TIMES&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; &#123; setCount(count + 1) &#125;&#125;&gt;点击按钮+1&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; &#123; setNum(num + 2) &#125;&#125;&gt;点击按钮+2&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;CountContext.Provider value&#x3D;&#123;&#123; count, num &#125;&#125;&gt;</span><br><span class="line">        &lt;Count &#x2F;&gt;</span><br><span class="line">        &lt;Num &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;CountContext.Provider&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Example1;</span><br></pre></td></tr></table></figure><p>通过<code>createContext()</code>创建一个<code>contenxt</code>环境可以想子孙组件传值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const CountContext &#x3D; createContext();</span><br></pre></td></tr></table></figure><p>通过在父组件注册：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;CountContext.Provider value&#x3D;&#123;&#123; count, num &#125;&#125;&gt;</span><br><span class="line">  &lt;Count &#x2F;&gt;</span><br><span class="line">  &lt;Num &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;CountContext.Provider&gt;</span><br></pre></td></tr></table></figure><p>在子组件中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const &#123; num &#125; &#x3D; useContext(CountContext);</span><br><span class="line">...</span><br><span class="line">const &#123; count &#125; &#x3D; useContext(CountContext);</span><br></pre></td></tr></table></figure><p>使用<code>useMemo</code>做性能优化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  const counts &#x3D; useMemo(() &#x3D;&gt; &#123;</span><br><span class="line">    console.log(count);</span><br><span class="line">    return count;</span><br><span class="line">  &#125;, [count]);</span><br><span class="line">&#x2F;&#x2F;count数值没有改变时，缓存值，不渲染</span><br></pre></td></tr></table></figure><h4 id="2-useReducer使用"><a href="#2-useReducer使用" class="headerlink" title="2. useReducer使用"></a>2. <code>useReducer</code>使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useReducer &#125; from &#39;react&#39;;</span><br><span class="line"></span><br><span class="line">const Example2 &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">  const reducer &#x3D; (state, action) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(state, action)</span><br><span class="line">    switch (action) &#123;</span><br><span class="line">      case &#39;add&#39;:</span><br><span class="line">        return state + 1</span><br><span class="line">      case &#39;sub&#39;:</span><br><span class="line">        return state - 1</span><br><span class="line">      default:</span><br><span class="line">        return state</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  const [count, dispatch] &#x3D; useReducer(reducer, 0);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;现在的数量是&#123;count&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; &#123; dispatch(&#39;add&#39;) &#125;&#125;&gt;Add&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; &#123; dispatch(&#39;sub&#39;) &#125;&#125;&gt;Sub&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Example2;</span><br></pre></td></tr></table></figure><p><code>useReducer</code> 接受一个 <code>reducer</code> 函数作为参数，<code>reducer</code> 接受两个参数一个是 <code>state</code> 另一个是 <code>action</code> 。然后返回一个状态<code>count</code>和 <code>dispath</code>，<code>count</code> 是返回状态中的值，而<code>dispatch</code> 是一个可以发布事件来更新 <code>state</code> 的。</p><h4 id="3-Redux的功能的实现"><a href="#3-Redux的功能的实现" class="headerlink" title="3. Redux的功能的实现"></a>3. <code>Redux</code>的功能的实现</h4><blockquote><p>对与<code>Redux</code>的实现，需要使用<code>useContext</code>、<code>useReducer</code>两个钩子函数</p></blockquote><ol><li><p>首先</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import Color from &#39;.&#x2F;component&#x2F;Color&#39;;</span><br><span class="line">import Button from &#39;.&#x2F;component&#x2F;Button&#39;;</span><br><span class="line">import ShowArea from &#39;.&#x2F;component&#x2F;ShowArea&#39;;</span><br><span class="line"></span><br><span class="line">const Example3 &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">  return &lt;Color&gt;</span><br><span class="line">    &lt;Button &#x2F;&gt;</span><br><span class="line">    &lt;ShowArea &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;Color&gt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Example3;</span><br></pre></td></tr></table></figure></li><li><p>然后创建<code>Color</code>组件，其中<code>Color</code>组件充当<code>Provider</code>的作用，向其他<code>子组件</code>传值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useReducer &#125; from &#39;react&#39;;</span><br><span class="line">import &#123; reducer &#125; from &#39;..&#x2F;store&#x2F;reducer&#39;;</span><br><span class="line">import &#123; ColorContext &#125; from &#39;..&#x2F;store&#x2F;index&#39;;</span><br><span class="line"></span><br><span class="line">const Color &#x3D; (props) &#x3D;&gt; &#123;</span><br><span class="line">  const [color, dispatch] &#x3D; useReducer(reducer, &#39;pink&#39;);</span><br><span class="line"></span><br><span class="line">  return &lt;ColorContext.Provider value&#x3D;&#123;&#123; color, dispatch &#125;&#125;&gt;</span><br><span class="line">    &#123;props.children&#125;</span><br><span class="line">  &lt;&#x2F;ColorContext.Provider&gt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Color;</span><br></pre></td></tr></table></figure></li><li><p>同时再创建<code>store</code>文件夹，再<code>store</code>文件夹下面创建<code>index.js</code>、<code>reducer.js</code>、<code>constants.js</code>、<code>actionCreators.js</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;index.js</span><br><span class="line"></span><br><span class="line">import &#123; createContext &#125; from &#39;react&#39;;</span><br><span class="line"></span><br><span class="line">export const ColorContext &#x3D; createContext(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; reducer.js</span><br><span class="line"></span><br><span class="line">import &#123; UPDATE_COLOR &#125; from &#39;.&#x2F;constants&#39;;</span><br><span class="line"></span><br><span class="line">export const reducer &#x3D; (state, action) &#x3D;&gt; &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case UPDATE_COLOR:</span><br><span class="line">      return action.data</span><br><span class="line">    default:</span><br><span class="line">      return state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; contants.js</span><br><span class="line"></span><br><span class="line">export const UPDATE_COLOR &#x3D; &#39;UPDATE_COLOR&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; actionCreators.js</span><br><span class="line"></span><br><span class="line">import &#123; UPDATE_COLOR &#125; from &#39;.&#x2F;constants&#39;;</span><br><span class="line"></span><br><span class="line">export const changeColor &#x3D; (data) &#x3D;&gt; (&#123;</span><br><span class="line">  type: UPDATE_COLOR,</span><br><span class="line">  data</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>创建<code>Button.js</code>提供<code>useReducer</code> 的 <code>dispatch</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useContext &#125; from &#39;react&#39;;</span><br><span class="line">import &#123; ColorContext &#125; from &#39;..&#x2F;store&#x2F;index&#39;;</span><br><span class="line">import &#123; changeColor &#125; from &#39;..&#x2F;store&#x2F;actionCreators&#39;;</span><br><span class="line"></span><br><span class="line">const Button &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const &#123; dispatch &#125; &#x3D; useContext(ColorContext);</span><br><span class="line"></span><br><span class="line">  const handleRed &#x3D; (data) &#x3D;&gt; &#123;</span><br><span class="line">    return dispatch(changeColor(data));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const handleBlue &#x3D; (data) &#x3D;&gt; &#123;</span><br><span class="line">    return dispatch(changeColor(data));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; &#123; handleRed(&#39;red&#39;) &#125;&#125;&gt;红色&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; &#123; handleBlue(&#39;blue&#39;) &#125;&#125;&gt;蓝色&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Button;</span><br></pre></td></tr></table></figure></li><li><p>创建<code>ShowArea.js</code>提供<code>useReducer</code>提供的<code>color</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useContext &#125; from &#39;react&#39;;</span><br><span class="line">import &#123; ColorContext &#125; from &#39;..&#x2F;store&#x2F;index&#39;;</span><br><span class="line"></span><br><span class="line">const ShowArea &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const &#123; color &#125; &#x3D; useContext(ColorContext);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div style&#x3D;&#123;&#123; color: color &#125;&#125;&gt;</span><br><span class="line">      字体颜色是&#123;color&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default ShowArea;</span><br></pre></td></tr></table></figure></li></ol><h5 id="如何就能实现Redux的功能"><a href="#如何就能实现Redux的功能" class="headerlink" title="如何就能实现Redux的功能"></a>如何就能实现<code>Redux</code>的功能</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;React-hook-实现-Redux功能&quot;&gt;&lt;a href=&quot;#React-hook-实现-Redux功能&quot; class=&quot;headerlink&quot; title=&quot;React hook 实现 Redux功能&quot;&gt;&lt;/a&gt;React hook 实现 Redux功能&lt;/</summary>
      
    
    
    
    
    <category term="react" scheme="http://example.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>浅析Javascript中作用域、作用域链和预解析</title>
    <link href="http://example.com/2020/08/26/%E6%B5%85%E6%9E%90Javascript%E4%B8%AD%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E5%92%8C%E9%A2%84%E8%A7%A3%E6%9E%90/"/>
    <id>http://example.com/2020/08/26/%E6%B5%85%E6%9E%90Javascript%E4%B8%AD%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E5%92%8C%E9%A2%84%E8%A7%A3%E6%9E%90/</id>
    <published>2020-08-26T12:28:25.000Z</published>
    <updated>2021-03-15T11:07:09.108Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅析Javascript中作用域、作用域链和预解析"><a href="#浅析Javascript中作用域、作用域链和预解析" class="headerlink" title="浅析Javascript中作用域、作用域链和预解析"></a>浅析Javascript中作用域、作用域链和预解析</h1><h2 id="一、作用域"><a href="#一、作用域" class="headerlink" title="一、作用域"></a>一、作用域</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">作用域（scope），程序设计概念，通常来说，一段程序代码中所用到的名字并不总是有效&#x2F;可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。</span><br></pre></td></tr></table></figure><p>作用域的使用提高了程序逻辑的局部性，增强程序的可靠性，减少名字冲突。</p><h3 id="1-全局作用域（全局变量）"><a href="#1-全局作用域（全局变量）" class="headerlink" title="1.全局作用域（全局变量）"></a>1.全局作用域（全局变量）</h3><p><strong>全局变量，原理就是将变量挂载到window对象中.</strong></p><p><strong>全局变量拥有全局的作用域，可在任意地方被调用</strong></p><p>全局变量有两种声明方式</p><h3 id="（1）函数外部"><a href="#（1）函数外部" class="headerlink" title="（1）函数外部"></a>（1）函数外部</h3><p>(写在函数外面的都是全局变量)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var num &#x3D; 15; &#x2F;&#x2F;全局变量</span><br><span class="line">        function f() &#123;</span><br><span class="line">        var num &#x3D; 10; &#x2F;&#x2F;不是全局变量</span><br><span class="line">        function f2()&#123;</span><br><span class="line">               &#x2F;*----*&#x2F; </span><br><span class="line">        &#125;</span><br><span class="line">            f2();</span><br><span class="line">        &#125;</span><br><span class="line">f();</span><br><span class="line">console.log(num); &#x2F;&#x2F;  15</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="（2）函数内部"><a href="#（2）函数内部" class="headerlink" title="（2）函数内部"></a>（2）函数内部</h3><p>(不加var的变量声明，隐式全局变量)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    function f() &#123;</span><br><span class="line">    num &#x3D; 10; &#x2F;&#x2F;隐式全局变量</span><br><span class="line">    &#125;</span><br><span class="line">f();</span><br><span class="line">console.log(num); &#x2F;&#x2F; 10</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="全局变量与隐式全局变量的区别"><a href="#全局变量与隐式全局变量的区别" class="headerlink" title="全局变量与隐式全局变量的区别"></a>全局变量与隐式全局变量的区别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">隐式全局变量可以通过delete关键字来删除，全局变量不可以</span><br><span class="line">&#x2F;&#x2F;全局变量不可被delete</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var a &#x3D; 2; &#x2F;&#x2F;全局变量</span><br><span class="line">function f()&#123;</span><br><span class="line">        &#x2F;&#x2F;****</span><br><span class="line">&#125;</span><br><span class="line">console.log(a); &#x2F;&#x2F;  2</span><br><span class="line">delete a;</span><br><span class="line">console.log(a); &#x2F;&#x2F;  2</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&#x2F;&#x2F;隐式全局变量被delete</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function f()&#123;</span><br><span class="line">        a &#x3D; 2; &#x2F;&#x2F;隐式全局变量</span><br><span class="line">&#125;</span><br><span class="line">console.log(a); &#x2F;&#x2F;  2</span><br><span class="line">delete a;</span><br><span class="line">console.log(a); &#x2F;&#x2F;  not defined (已被删除)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-局部作用域-局部变量"><a href="#2-局部作用域-局部变量" class="headerlink" title="2.局部作用域(局部变量)"></a>2.局部作用域(局部变量)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">局部变量：写在函数体里面的变量</span><br><span class="line"></span><br><span class="line">局部变量只可以在当前函数内部使用</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function f() &#123;</span><br><span class="line">        var num &#x3D; 10; &#x2F;&#x2F;局部变量</span><br><span class="line">        function f2()&#123;</span><br><span class="line">            console.log(num); &#x2F;&#x2F; 10</span><br><span class="line">        &#125;</span><br><span class="line">    f2();</span><br><span class="line">    &#125;</span><br><span class="line">f();</span><br><span class="line">console.log(num); &#x2F;&#x2F;  not defined</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="二、作用域链"><a href="#二、作用域链" class="headerlink" title="二、作用域链"></a>二、作用域链</h2><p>作用域链简而言之就是，调用变量时，若当前作用域内没有该变量时就向它的上一级作用域去寻找。</p><p>Javascript用的是词法作用域（静态作用域）</p><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;    &#x2F;* 0级作用域 *&#x2F;</span><br><span class="line">var a &#x3D; 1;</span><br><span class="line">function aa()&#123;    &#x2F;* 1级作用域 *&#x2F;</span><br><span class="line">    &#x2F;&#x2F;var a &#x3D; 2;</span><br><span class="line">    function bb()&#123;  &#x2F;* 2级作用域 *&#x2F;</span><br><span class="line">        &#x2F;&#x2F;var a &#x3D; 3;</span><br><span class="line">        console.log(a);  &#x2F;&#x2F; 1</span><br><span class="line">    &#125;</span><br><span class="line">    bb();</span><br><span class="line">&#125;</span><br><span class="line">aa();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>作用过程：</p><ol><li>当运行到console.log(a)时，会在当前作用域（2级作用域）内寻找是否有a可用；</li><li>若有直接使用，否则向上一级作用域（1级作用域）去寻找；</li><li>此时来到1级作用域，若此时有a可用则用，否则继续向上一级寻找，直到到达0级作用域；</li><li>此时来到0级作用域，若此时有a可用则用，否则报错；</li></ol><p><img src="https://howlcn1997.github.io/2018/02/26/%E6%B5%85%E6%9E%90Javascript%E4%B8%AD%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E5%92%8C%E9%A2%84%E8%A7%A3%E6%9E%90/%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE.jpg" alt="作用域链"></p><p><strong>值得注意的是：作用域链的始发点与函数的调用位置无关，而与函数的声明位置有关</strong> 例子如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">var value &#x3D; 1;</span><br><span class="line">function foo() &#123;</span><br><span class="line">    console.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function bar() &#123;</span><br><span class="line">    var value &#x3D; 2;</span><br><span class="line">    foo();</span><br><span class="line">&#125;</span><br><span class="line">bar();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>此时的打印结果为1，而不是foo函数调用所在作用域的value = 2；</p><p>这里的1是foo函数声明所在的作用域中的value = 1；</p><p>## 三、预解析</p><p>当浏览器执行Javascript代码时，为了提高执行效率会在代码解释执行前进行预解析处理。</p><p>预解析处理规则：</p><p>\1. 变量提升 仅仅将变量声明提升到当前作用域的最上面，不包括变量的赋值<br>\2. 函数提升 将函数的声明提升到当前作用域的最上面，不包括函数的调用 <strong>函数的声明会提前到变量声明之前</strong></p><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">console.log(a); &#x2F;&#x2F;undefined</span><br><span class="line">var a &#x3D; 10;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>上述代码结果打印为undefined,而不是10，这是为什么呢？</p><p>我们来看看与解析之后的结果，</p><p>预解析为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">var a</span><br><span class="line">console.log(a);</span><br><span class="line">a &#x3D; 10;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>由于变量声明被提升到作用域最前端，而赋值没有被提升，导致执行console.log(a);时 a还未被赋值。</p><h3 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h3><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    f1();</span><br><span class="line">    function f1() &#123;</span><br><span class="line">        &#x2F;*-----*&#x2F;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>被解析为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    function f1() &#123;</span><br><span class="line">        &#x2F;*-----*&#x2F;</span><br><span class="line">    &#125;</span><br><span class="line">    f1();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="函数的声明会提前到变量声明之前"><a href="#函数的声明会提前到变量声明之前" class="headerlink" title="函数的声明会提前到变量声明之前"></a>函数的声明会提前到变量声明之前</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">函数提升和变量提升同时发生时，函数的声明会提前到变量声明之前。</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var a &#x3D; 3;</span><br><span class="line">    function a()&#123;</span><br><span class="line">        console.log(10);</span><br><span class="line">    &#125;   </span><br><span class="line">    console.log(a);</span><br><span class="line">    a();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>被解析为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    function a()&#123;</span><br><span class="line">        console.log(10);</span><br><span class="line">    &#125;</span><br><span class="line">    var a;</span><br><span class="line">a &#x3D; 3</span><br><span class="line">    console.log(a);</span><br><span class="line">    a(); &#x2F;&#x2F;not function  因为此时a为变量而不是函数</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><strong>值得注意的是：</strong></p><p>1.函数是可以被打印的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    function a()&#123;</span><br><span class="line">    &#x2F;*----*&#x2F;</span><br><span class="line">&#125;</span><br><span class="line">console.log(a); &#x2F;&#x2F;打印函数a</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>2.变量a的赋值可以被普通类型和函数互相取代</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var a；</span><br><span class="line">    a &#x3D; function()&#123;</span><br><span class="line">        &#x2F;*----*&#x2F;</span><br><span class="line">        &#125;</span><br><span class="line">    console.log(a); &#x2F;&#x2F;打印函数a</span><br><span class="line">a &#x3D; 1;</span><br><span class="line">console.log(a); &#x2F;&#x2F; 1；</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="匿名函数的申明不遵循预解析规则"><a href="#匿名函数的申明不遵循预解析规则" class="headerlink" title="匿名函数的申明不遵循预解析规则"></a>匿名函数的申明不遵循预解析规则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    f();  &#x2F;&#x2F;报错</span><br><span class="line">    var f &#x3D; function()&#123;</span><br><span class="line">        &#x2F;*----*&#x2F;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>因为解析前后代码相同 执行 <strong>f()</strong> 时，f未被声明为函数类型。</p><h3 id="隐式全局变量的注意点"><a href="#隐式全局变量的注意点" class="headerlink" title="隐式全局变量的注意点"></a>隐式全局变量的注意点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    f();</span><br><span class="line">    console.log(a);  &#x2F;&#x2F;undefined</span><br><span class="line">    console.log(b);  &#x2F;&#x2F;9</span><br><span class="line">    function f() &#123;</span><br><span class="line">      var a &#x3D; b &#x3D; c &#x3D; 9;</span><br><span class="line">      console.log(a); &#x2F;&#x2F;9</span><br><span class="line">      console.log(b); &#x2F;&#x2F;9</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>被解析为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    function f() &#123;</span><br><span class="line">      var a;  &#x2F;&#x2F;局部变量</span><br><span class="line">      a &#x3D; 9;  </span><br><span class="line">      b &#x3D; 9;  &#x2F;&#x2F;隐式全局变量</span><br><span class="line">      console.log(a);  &#x2F;&#x2F;9</span><br><span class="line">      console.log(b);  &#x2F;&#x2F;9</span><br><span class="line">    &#125;</span><br><span class="line">    f();</span><br><span class="line">    console.log(b);  &#x2F;&#x2F;9</span><br><span class="line">    console.log(a);  &#x2F;&#x2F;undefined   因为a是局部变量</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浅析Javascript中作用域、作用域链和预解析&quot;&gt;&lt;a href=&quot;#浅析Javascript中作用域、作用域链和预解析&quot; class=&quot;headerlink&quot; title=&quot;浅析Javascript中作用域、作用域链和预解析&quot;&gt;&lt;/a&gt;浅析Javascrip</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>js三大家族</title>
    <link href="http://example.com/2020/08/11/JS%E4%B8%89%E5%A4%A7%E5%AE%B6%E6%97%8F/"/>
    <id>http://example.com/2020/08/11/JS%E4%B8%89%E5%A4%A7%E5%AE%B6%E6%97%8F/</id>
    <published>2020-08-11T02:36:26.000Z</published>
    <updated>2021-03-15T11:06:48.201Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-1-三大家族和一个事件对象"><a href="#1-1-三大家族和一个事件对象" class="headerlink" title="1.1 三大家族和一个事件对象"></a>1.1 三大家族和一个事件对象</h1><p>三大家族（offset/scroll/client）</p><p>事件对象/event （事件被触动时，鼠标和键盘的状态）（通过属性控制）</p><h1 id="1-2-Offset家族简介"><a href="#1-2-Offset家族简介" class="headerlink" title="1.2 Offset家族简介"></a>1.2 Offset家族简介</h1><p>offset这个单词本身是–偏移，补偿，位移的意思。</p><p>js中有一套方便的获取元素尺寸的办法就是offset家族；</p><p>offsetWidth和offsetHight以及offsetLeft和offsetTop以及offsetParent</p><p>共同组成了offset家族。</p><h3 id="1-2-1-offsetWidth和offsetHight-（检测盒子自身宽高-padding-border）"><a href="#1-2-1-offsetWidth和offsetHight-（检测盒子自身宽高-padding-border）" class="headerlink" title="1.2.1 offsetWidth和offsetHight （检测盒子自身宽高+padding+border）"></a>1.2.1 offsetWidth和offsetHight （检测盒子自身宽高+padding+border）</h3><p>这两个属性，他们绑定在了所有的节点元素上。获取之后，只要调用这两个属性，我们就能够获取元素节点的宽和高。</p><p>offset宽/高 = 盒子自身的宽/高 + padding+border；</p><p>offsetWidth =width+padding+border；</p><p>offsetHeight =Height+padding+border；</p><h3 id="1-2-2-offsetLeft和offsetTop-（检测距离父盒子有定位的左-上面的距离）"><a href="#1-2-2-offsetLeft和offsetTop-（检测距离父盒子有定位的左-上面的距离）" class="headerlink" title="1.2.2 offsetLeft和offsetTop （检测距离父盒子有定位的左/上面的距离）"></a>1.2.2 offsetLeft和offsetTop （检测距离父盒子有定位的左/上面的距离）</h3><p>返回距离上级盒子（带有定位）左边s的位置</p><p>如果父级都没有定位则以body为准</p><p>offsetLeft 从父亲的padding 开始算,父亲的border 不算。</p><p>在父盒子有定位的情况下，offsetLeft == style.left(去掉px)</p><h3 id="1-2-3-offsetParent-（检测父系盒子中带有定位的父盒子节点）"><a href="#1-2-3-offsetParent-（检测父系盒子中带有定位的父盒子节点）" class="headerlink" title="1.2.3 offsetParent （检测父系盒子中带有定位的父盒子节点）"></a>1.2.3 offsetParent （检测父系盒子中带有定位的父盒子节点）</h3><p>1、返回改对象的父级 （带有定位）</p><p> 如果当前元素的父级元素没有进行CSS定位 （position为absolute或 relative，fixed）， offsetParent为body。</p><p>2、如果当前元素的父级元素中有CSS定位 （position为absolute或 relative，fixed）， offsetParent取最近的那个父级元素。</p><h1 id="1-3-offsetLeft和style-left区别"><a href="#1-3-offsetLeft和style-left区别" class="headerlink" title="1.3 offsetLeft和style.left区别"></a>1.3 offsetLeft和style.left区别</h1><p>一、最大区别在于offsetLeft可以返回没有定位盒子的距离左侧的位置。</p><p>而 style.left不可以</p><p>二、offsetTop 返回的是数字，而 style.top 返回的是字符串，除了数字外还带有单位：px。</p><p>三、offsetTop 只读，而 style.top 可读写。（只读是获取值，可写是赋值）</p><p>四、如果没有给 HTML 元素指定过 top 样式，则style.top 返回的是空字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">style.left在&#x3D;的左边和右边还不一样。（左边的时候是属性，右边的时候是值）</span><br></pre></td></tr></table></figure><h1 id="Scroll家族组成"><a href="#Scroll家族组成" class="headerlink" title="Scroll家族组成"></a>Scroll家族组成</h1><p>ScrollWidth和scrollHeight（不包括border）</p><p>检测盒子的宽高。（调用者：节点元素。属性。）</p><p>盒子内容的宽高。（如果有内容超出了，显示内容的高度）</p><p>IE567可以比盒子小。 IE8+火狐谷歌不能比盒子小</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="scrollLeft和scrollTop"><a href="#scrollLeft和scrollTop" class="headerlink" title="scrollLeft和scrollTop"></a>scrollLeft和scrollTop</h2><p>网页，被浏览器遮挡的头部和左边部分。</p><p>被卷去的头部和左边部分。</p><p>兼容性问题</p><p>一、未声明 DTD（谷歌只认识他）</p><p>document.body.scrollTop</p><p>二、已经声明DTD（IE678只认识他）</p><p>document.documentElement.scrollTop</p><p>三、火狐/谷歌/ie9+以上支持的</p><p>window.pageYOffset</p><h2 id="兼容写法"><a href="#兼容写法" class="headerlink" title="兼容写法"></a>兼容写法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">var aaa &#x3D; window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;</span><br><span class="line">Code</span><br><span class="line">var aaa &#x3D; document.documentElement.scrollTop + document.body.scrollTop;</span><br></pre></td></tr></table></figure><p>事件event</p><h2 id="1-1-事件对象的获取（event的获取）"><a href="#1-1-事件对象的获取（event的获取）" class="headerlink" title="1.1 事件对象的获取（event的获取）"></a>1.1 事件对象的获取（event的获取）</h2><p>IE678中，window.event</p><p>在火狐谷歌中，event或者，在事件绑定的函数中，加参，这个参数就是event.</p><p>Box.onclick = function (aaa){ aaa就是event }</p><h2 id="1-2-兼容获取方式有两种："><a href="#1-2-兼容获取方式有两种：" class="headerlink" title="1.2 兼容获取方式有两种："></a>1.2 兼容获取方式有两种：</h2><p>不写参数直接使用event;</p><p>写参数，但是为event….var event = event || window.event;(主要用这种)</p><h2 id="1-3-event内容重要内容"><a href="#1-3-event内容重要内容" class="headerlink" title="1.3 event内容重要内容"></a>1.3 event内容重要内容</h2><p><a href="https://img-blog.csdn.net/20170330141538969?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1ppb3M=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"><img src="https://img-blog.csdn.net/20170330141538969?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1ppb3M=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></a></p><p>PageY/pageX: 鼠标位于整个网页页面的顶部和左侧部分的距离。（页面）</p><p>ScreenY/screenX: 鼠标位于屏幕的上方和左侧的距离。（屏幕）</p><p>ClientX/clientY: 鼠标位于浏览器的左侧和顶部的距离。（浏览器大小和位置）</p><h2 id="1-1-PageY和pageX的兼容写法（很重要）"><a href="#1-1-PageY和pageX的兼容写法（很重要）" class="headerlink" title="1.1 PageY和pageX的兼容写法（很重要）"></a>1.1 PageY和pageX的兼容写法（很重要）</h2><p>在页面位置就等于 = 看得见的+看不见的</p><p>pageY/pageX=event.clientY/clientX+scroll().top/scroll().left</p><h1 id="client家族"><a href="#client家族" class="headerlink" title="client家族"></a>client家族</h1><h2 id="1-1-主要成员"><a href="#1-1-主要成员" class="headerlink" title="1.1 主要成员"></a>1.1 主要成员</h2><p>1、clientWidth 获取网页可视区域宽度（两种用法）</p><p>clientHeight 获取网页可视区域高度（两种用法）</p><p>调用者不同，意义不同：</p><p> 盒子调用： 指盒子本身。</p><p> body/html调用： 可视区域大小。</p><p>2、clientX 鼠标距离可视区域左侧距离（event调用）</p><p>clientY 鼠标距离可视区域上侧距离（event调用）</p><p>3、clientTop/clientLeft 盒子的border宽高</p><h2 id="1-2-三大家族区别（三大家族总结）"><a href="#1-2-三大家族区别（三大家族总结）" class="headerlink" title="1.2 三大家族区别（三大家族总结）"></a>1.2 三大家族区别（三大家族总结）</h2><h3 id="1-2-1-Width和height"><a href="#1-2-1-Width和height" class="headerlink" title="1.2.1 Width和height"></a>1.2.1 Width和height</h3><p>clientWidth = width + padding</p><p>clientHeight = height + padding</p><p>offsetWidth = width + padding + border</p><p>offsetHeight = height + padding + border</p><p>scrollWidth = 内容宽度（不包含border）width + padding</p><p>scrollHeight = 内容高度（不包含border）</p><h3 id="1-2-2-top和left"><a href="#1-2-2-top和left" class="headerlink" title="1.2.2 top和left"></a>1.2.2 top和left</h3><p>offsetTop/offsetLeft：</p><p> 调用者：任意元素。(盒子为主)</p><p> 作用：距离父系盒子中带有定位的距离。</p><p>scrollTop/scrollLeft:(盒子也可以调用，必须有滚动条)</p><p> 调用者：document.body.scrollTop/…..(window)</p><p> 作用：浏览器无法显示的部分（被卷去的部分）。</p><p>clientY/clientX:（clientTop/clientLeft 值的是border）</p><p> 调用者：event.clientX(event)</p><p> 作用：鼠标距离浏览器可视区域的距离（左、上）。</p><p>// width和height<br>// offset带border<br>// scroll不带border，内容的宽高<br>// client不带border</p><p>// top和left<br>// offset距离父系盒子带有定位的盒子之间的距离<br>// scroll被卷去的部分的距离<br>// clientborder的宽高</p><p>//clientX和clientY<br>// event调用，鼠标距离浏览器的可视区域的距离</p><h2 id="1-3-client家族特殊用法之-检浏览器宽-高度-可视区域"><a href="#1-3-client家族特殊用法之-检浏览器宽-高度-可视区域" class="headerlink" title="1.3 client家族特殊用法之:检浏览器宽/高度(可视区域)"></a>1.3 client家族特殊用法之:检浏览器宽/高度(可视区域)</h2><p><a href="https://img-blog.csdn.net/20170331094037076?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1ppb3M=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"><img src="https://img-blog.csdn.net/20170331094037076?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1ppb3M=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></a></p><h2 id="1-4-Onresize事件"><a href="#1-4-Onresize事件" class="headerlink" title="1.4 Onresize事件"></a>1.4 Onresize事件</h2><p>只要浏览器的大小改变，哪怕1像素，都会触动这个事件。</p><h2 id="1-5-案例：根据浏览器可视区域大小，给定背景色"><a href="#1-5-案例：根据浏览器可视区域大小，给定背景色" class="headerlink" title="1.5 案例：根据浏览器可视区域大小，给定背景色"></a>1.5 案例：根据浏览器可视区域大小，给定背景色</h2><h2 id="1-6-事件总结"><a href="#1-6-事件总结" class="headerlink" title="1.6 事件总结"></a>1.6 事件总结</h2><p>区分：</p><p>1.window.onscroll 屏幕滑动</p><p>2.window.onresize 浏览器大小变化</p><p>3.window.onload 页面加载完毕</p><p>4.div.onmousemove 鼠标在盒子上移动</p><p> （注意：不是盒子移动！！！）</p><p>5.onmouseup/onmousedown == onclick</p><h2 id="1-7-获得屏幕宽高"><a href="#1-7-获得屏幕宽高" class="headerlink" title="1.7 获得屏幕宽高"></a>1.7 获得屏幕宽高</h2><p>window.screen.width</p><p>分辨率是屏幕图像的精密度，指显示器所能显示的像素有多少。</p><p>我们的电脑一般：</p><p>横向1280个像素点，</p><p>纵向960个像素点。</p><p>我们看电影的时候是满屏和半屏的，就是这。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-1-三大家族和一个事件对象&quot;&gt;&lt;a href=&quot;#1-1-三大家族和一个事件对象&quot; class=&quot;headerlink&quot; title=&quot;1.1 三大家族和一个事件对象&quot;&gt;&lt;/a&gt;1.1 三大家族和一个事件对象&lt;/h1&gt;&lt;p&gt;三大家族（offset/scroll</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ES6——遍历对象属性的几种方式</title>
    <link href="http://example.com/2020/07/06/ES6%E2%80%94%E2%80%94%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2020/07/06/ES6%E2%80%94%E2%80%94%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2020-07-06T13:43:03.000Z</published>
    <updated>2021-03-15T11:15:31.424Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JavaScript遍历对象的几种方式"><a href="#JavaScript遍历对象的几种方式" class="headerlink" title="JavaScript遍历对象的几种方式"></a>JavaScript遍历对象的几种方式</h3><h4 id="1-自身可枚举属性"><a href="#1-自身可枚举属性" class="headerlink" title="1. 自身可枚举属性"></a>1. 自身可枚举属性</h4><blockquote><p><code>Object.keys()</code>方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和<code>for...in</code>循环遍历该对象时返回的顺序一致。如果对象的键-值都不可枚举，那么将返回由键组成的数组。</p></blockquote><p>这是合理的，因为大多数时候只需要关注对象自身的属性。</p><h5 id="来看看一个对象拥有自身和继承属性的例子，Object-keys-只返回自己的属性键"><a href="#来看看一个对象拥有自身和继承属性的例子，Object-keys-只返回自己的属性键" class="headerlink" title="来看看一个对象拥有自身和继承属性的例子，Object.keys()只返回自己的属性键"></a>来看看一个对象拥有自身和继承属性的例子，<code>Object.keys()</code>只返回自己的属性键</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let simpleColors &#x3D; &#123;</span><br><span class="line">   colorA: &#39;white&#39;,</span><br><span class="line">   colorB: &#39;black&#39;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let natureColors &#x3D; &#123;</span><br><span class="line">   colorC: &#39;green&#39;,</span><br><span class="line">   colorD: &#39;yellow&#39;</span><br><span class="line">&#125;;</span><br><span class="line">Object.setPrototypeOf(natureColors, simpleColors);</span><br><span class="line">console.dir(natureColors);&#x2F;&#x2F;simpleColors对象在natureColors原型上</span><br><span class="line">console.log(Object.keys(natureColors)); &#x2F;&#x2F;[&quot;colorC&quot;, &quot;colorD&quot;]</span><br><span class="line">console.log(natureColors[&#39;colorA&#39;]); &#x2F;&#x2F;white</span><br><span class="line">console.log(natureColors[&#39;colorB&#39;]); &#x2F;&#x2F;black</span><br></pre></td></tr></table></figure><p><code>Object.setPrototype()</code>方法设置一个指定的对象的原型到另一个对象或null</p><p><code>Object.keys(natureColors)</code>返回<code>natureColors</code>对象自身可枚举属性键:<code>[&#39;colorC&#39;, &#39;colorD&#39;]</code>。<code>natureColors</code>包含从<code>simpleColors</code>原型对象继承的属性，但是<code>Object.keys()</code>函数会跳过它们。<code>Object.keys()</code>函数会跳过它们。<code>Object.value和Object.entries()</code>也都是返回一个给定对象自身可枚举属性的键值对数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">let simpleColors &#x3D; &#123;</span><br><span class="line">      colorA: &#39;white&#39;,</span><br><span class="line">      colorB: &#39;black&#39;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    let natureColors &#x3D; &#123;</span><br><span class="line">      colorC: &#39;green&#39;,</span><br><span class="line">      colorD: &#39;yellow&#39;</span><br><span class="line">    &#125;;</span><br><span class="line">    Object.setPrototypeOf(natureColors, simpleColors);</span><br><span class="line">    console.log(Object.keys(natureColors)); &#x2F;&#x2F;[&quot;colorC&quot;, &quot;colorD&quot;]</span><br><span class="line">    console.log(Object.values(natureColors)); &#x2F;&#x2F;[&quot;green&quot;, &quot;yellow&quot;]</span><br><span class="line">    console.log(Object.entries(natureColors)); &#x2F;&#x2F;[Array(2), Array(2)]</span><br></pre></td></tr></table></figure><p>现在注意与<code>for...in</code>语句的区别，<code>for...in</code>不仅可以循环枚举自身属性还可以枚举原型链中的属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">let simpleColors &#x3D; &#123;</span><br><span class="line">      colorA: &#39;white&#39;,</span><br><span class="line">      colorB: &#39;black&#39;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    let natureColors &#x3D; &#123;</span><br><span class="line">      colorC: &#39;green&#39;,</span><br><span class="line">      colorD: &#39;yellow&#39;</span><br><span class="line">    &#125;;</span><br><span class="line">    Object.setPrototypeOf(natureColors, simpleColors);</span><br><span class="line"></span><br><span class="line">    let enumerableKeys &#x3D; [];</span><br><span class="line">    for(let key in natureColors) &#123;</span><br><span class="line">      enumerableKeys.push(key);</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(enumerableKeys); &#x2F;&#x2F; [&quot;colorC&quot;, &quot;colorD&quot;, &quot;colorA&quot;, &quot;colorB&quot;]</span><br></pre></td></tr></table></figure><p><code>enumerableKeys</code>数组包含<code>natureColors</code>自身属性键：<code>colorC</code>、<code>colorD</code>。</p><p>另外<code>for...in</code>也遍历了从<code>simpleColors</code>原型对象继承的属性</p><h4 id="2-Object-values-返回属性值"><a href="#2-Object-values-返回属性值" class="headerlink" title="2. Object.values()返回属性值"></a>2. <code>Object.values()</code>返回属性值</h4><blockquote><p><code>Object.values()</code>方法返回一个给定对象自身的所有可枚举属性值的数组，值顺序与使用<code>foe..in</code>循环的循序相同（区别在于<code>for...in</code>循环枚举原型链中的属性）。</p></blockquote><p>使用<code>Object.keys()</code>收集keys，然后通过key去对象取对应的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let meals &#x3D; &#123;</span><br><span class="line">      mealA: &#39;Breakfast&#39;,</span><br><span class="line">      mealB: &#39;Lunch&#39;,</span><br><span class="line">      mealC: &#39;Dinner&#39;</span><br><span class="line">    &#125;;</span><br><span class="line">    for(let key of Object.keys(meals)) &#123;</span><br><span class="line">      let mealName &#x3D; meals[key];</span><br><span class="line">      console.log(mealName);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>meal</code>是一个普通对象。使用<code>Object.keys(meals)</code>和枚举的<code>for...of</code>循环获取对象键值。但是<code>let mealName = meals[key];</code>没有多大的必要，可以进一步优化代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let meals &#x3D; &#123;</span><br><span class="line">      mealA: &#39;Breakfast&#39;,</span><br><span class="line">      mealB: &#39;Lunch&#39;,</span><br><span class="line">      mealC: &#39;Dinner&#39;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    for(let mealName of Object.values(meals)) &#123;</span><br><span class="line">      console.log(mealName);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>因为<code>Object.values(meals)</code>返回数组中的对象属性值，所以可以直接在 <code>for..of</code>中简化。<code>mealName</code>直接在循环中赋值。</p><h4 id="3-Object-entries"><a href="#3-Object-entries" class="headerlink" title="3.Object.entries()"></a>3.<code>Object.entries()</code></h4><blockquote><p><code>Object.entries()</code>方法返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 <code>for...in</code>循环遍历该对象时返回的顺序一致（区别在于 <code>for...in</code>循环也枚举原型链中的属性）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.entries()&#96; 返回键值对数组，如 &#96;[[key1,value1],[key2,value2],...,[keyN,valueN]]</span><br></pre></td></tr></table></figure><h5 id="可能直接使用这些键值对不怎么方便，但可以通过数组解构赋值方式访问键和值就变得非常容易，如下所示："><a href="#可能直接使用这些键值对不怎么方便，但可以通过数组解构赋值方式访问键和值就变得非常容易，如下所示：" class="headerlink" title="可能直接使用这些键值对不怎么方便，但可以通过数组解构赋值方式访问键和值就变得非常容易，如下所示："></a>可能直接使用这些键值对不怎么方便，但可以通过数组解构赋值方式访问键和值就变得非常容易，如下所示：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let meals &#x3D; &#123;</span><br><span class="line">      mealA: &#39;Breakfast&#39;,</span><br><span class="line">      mealB: &#39;Lunch&#39;,</span><br><span class="line">      mealC: &#39;Dinner&#39;</span><br><span class="line">    &#125;;</span><br><span class="line">    for (let [key, value] of Object.entries(meals)) &#123;</span><br><span class="line">      console.log(key + &#39;:&#39; + value);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; &#39;mealA:Breakfast&#39; &#39;mealB:Lunch&#39; &#39;mealC:Dinner&#39;</span><br></pre></td></tr></table></figure><p>如上所示，因为 <code>Object.entries()</code>返回一个与数组解构赋值兼容的集合，因此不需要为赋值或声明添加额外的行</p><h5 id="当普通对象要转换成-Map-时Object-entries-就很有用，因为-Object-entries-返回的格式与-Map构造函数接受的格式完全相同：-key-value-。"><a href="#当普通对象要转换成-Map-时Object-entries-就很有用，因为-Object-entries-返回的格式与-Map构造函数接受的格式完全相同：-key-value-。" class="headerlink" title="当普通对象要转换成 Map 时Object.entries()就很有用，因为 Object.entries()返回的格式与 Map构造函数接受的格式完全相同：(key,value)。"></a>当普通对象要转换成 <code>Map</code> 时<code>Object.entries()</code>就很有用，因为 <code>Object.entries()</code>返回的格式与 <code>Map</code>构造函数接受的格式完全相同：<code>(key,value)</code>。</h5><p>使用常规的 Map构造函数可以将一个二维键值对数组转换成一个 Map对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let greetings &#x3D; &#123;</span><br><span class="line">      morning: &#39;Good morning&#39;,</span><br><span class="line">      midday: &#39;Good day&#39;,</span><br><span class="line">      evening: &#39;Good evening&#39;</span><br><span class="line">    &#125;;</span><br><span class="line">    let greetingsMap &#x3D; new Map(Object.entries(greetings));</span><br><span class="line">    console.log(greetingsMap); &#x2F;&#x2F; &#123;&quot;morning&quot; &#x3D;&gt; &quot;Good morning&quot;, &quot;midday&quot; &#x3D;&gt; &quot;Good day&quot;, &quot;evening&quot; &#x3D;&gt; &quot;Good evening&quot;&#125;</span><br><span class="line">    console.log([...greetingsMap]); &#x2F;&#x2F; &#x3D;&gt; Object.entries(greetings)</span><br><span class="line">    console.log(greetingsMap.get(&#39;morning&#39;)); &#x2F;&#x2F; Good morning</span><br><span class="line">    console.log(greetingsMap.get(&#39;midday&#39;)); &#x2F;&#x2F; Good day</span><br><span class="line">    console.log(greetingsMap.get(&#39;evening&#39;)); &#x2F;&#x2F; Good evening</span><br></pre></td></tr></table></figure><p><code>Map</code> 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值</p><p>有趣的是， Map提供了与 <code>Object.values()</code>和 <code>Object.entries()</code> 等效的方法（只是它们返回<code>Iterators</code>），以便为 <code>Map</code>实例提取属性值或键值对：</p><ul><li><code>Map.prototype.values()</code> 等价于 <code>Object.values()</code></li><li><code>Map.prototype.entries()</code> 等价于 <code>Object.entries()</code></li></ul><p><code>map</code>是普通对象的改进版本，可以获取 <code>map</code> 的大小(对于普通对象，必须手动获取)，并使用任意对象类型作为键(普通对象使用字符串基元类型作为键)。</p><h5 id="让我们看看返回-values（）和-entries（）的-map的方法"><a href="#让我们看看返回-values（）和-entries（）的-map的方法" class="headerlink" title="让我们看看返回 .values（）和 .entries（）的 map的方法:"></a>让我们看看返回 .values（）和 .entries（）的 map的方法:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[...greetingsMap.values()];</span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; [&#39;Good morning&#39;, &#39;Good day&#39;, &#39;Good evening&#39;]</span><br><span class="line">[...greetingsMap.entries()];</span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; [ [&#39;morning&#39;, &#39;Good morning&#39;], [&#39;midday&#39;, &#39;Good day&#39;],</span><br><span class="line">&#x2F;&#x2F;      [&#39;evening&#39;, &#39;Good evening&#39;] ]</span><br></pre></td></tr></table></figure><p>注意： <strong>greetingsMap.values()和 greetingsMap.entries()返回迭代器对象。若要将结果放入数组，扩展运算符 …是必要的</strong></p><h4 id="4-对象属性的顺序"><a href="#4-对象属性的顺序" class="headerlink" title="4. 对象属性的顺序"></a>4. 对象属性的顺序</h4><p><code>JS</code>对象是简单的键值映射，因此，对象中属性的顺序是微不足道的， 在大多数情况下，不应该依赖它。</p><p>在<code>ES5</code>和早期标准中，根本没有指定属性的顺序。</p><p>然而，从<code>ES6</code>开始，属性的顺序是基于一个特殊的规则的，除非特指按照时间排序。通过两个新方法 <code>Object.getOwnPropertyNames</code>和 <code>Reflect.ownKeys</code>来编写示例讲解这一属性排序规则。</p><ol><li>数字：当属性的类型时数字类型时，会按照数字的从大到小的顺序进行排序；</li><li>字符串：当属性的类型是字符串时，会按照时间的先后顺序进行排序；</li><li><code>Symbol</code>：当属性的类型是<code>Symbol</code>时，会按照时间的先后顺序进行排序。</li></ol><p>如果需要有序集合，建议将数据存储到数组或 <code>Set</code>中</p><p><strong>总结</strong></p><p><code>Object.values()</code> 和 <code>Object.entries()</code> 是为<code>JS</code>开发人员提供新的标准化辅助函数的另一个改进步骤。</p><p><code>Object.entries()</code>最适用于数组解构赋值，其方式是将键和值轻松分配给不同的变量。此函数还可以轻松地将纯<code>JS对象</code>属性映射到 Map对象中</p><p>注意：<strong>Object.values()和Object.entries()返回数据的顺序是不确定的，所以不要依赖该方式。</strong></p><h4 id="5-补充"><a href="#5-补充" class="headerlink" title="5. 补充"></a>5. 补充</h4><h5 id="JS对象的可枚举属性和不可枚举属性"><a href="#JS对象的可枚举属性和不可枚举属性" class="headerlink" title="JS对象的可枚举属性和不可枚举属性"></a><code>JS</code>对象的可枚举属性和不可枚举属性</h5><blockquote><p>对象的每一个属性都有一个描述对象，用来描述和控制该属性的行为，用<code>Object.getOwnPropertyDescriptor</code>方法来获取该描述对象（用<code>Object.defineProperty</code>方法来设置）。</p></blockquote><p>描述对象的<code>enumerable</code>属性，称为”可枚举性“，如果该属性为<code>false</code>，就表示某些操作会忽略当前属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let obj &#x3D; &#123; start: &#39;123&#39; &#125;;</span><br><span class="line">    console.log(Object.getOwnPropertyDescriptor(obj, &#39;start&#39;))</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F; 输出内容：</span><br><span class="line">     configurable: true</span><br><span class="line">     enumerable: true</span><br><span class="line">     value: &quot;123&quot;</span><br><span class="line">     writable: true</span><br></pre></td></tr></table></figure><h5 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h5><ol><li><code>configurable</code>：表示能否通过<code>delete</code>删除此属性，能否修改属性的特性，或能否修改把属性修改为访问器属性，如果直接使用字面量定义对象，默认值为true</li><li><code>enumerable</code>: 表示该属性是否可枚举，即是否通过for-in循环或<code>Object.keys()</code>返回属性，如果直接使用字面量定义对象，默认值为true</li><li><code>writable</code>: 能否修改属性的值，如果直接使用字面量定义对象，默认值为true</li><li><code>value</code>: 该属性对应的值，默认为undefined</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let obj &#x3D; &#123;&#125;;</span><br><span class="line">    Object.defineProperties(obj, &#123;</span><br><span class="line">        name: &#123;</span><br><span class="line">            value: &#39;祖宗&#39;,</span><br><span class="line">            enumerable: false,  &#x2F;&#x2F;不可枚举</span><br><span class="line">        &#125;,</span><br><span class="line">        age: &#123;</span><br><span class="line">            value: 88,</span><br><span class="line">            enumerable: true,   &#x2F;&#x2F;可枚举</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    for (let key in obj) &#123;</span><br><span class="line">        console.log(&quot;key:&quot; + key + &#39;,&#39; + &#39;value:&#39; + obj[key]) &#x2F;&#x2F;key: value, value: 88</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="目前-有四个操作会忽略enumerable为false的属性。"><a href="#目前-有四个操作会忽略enumerable为false的属性。" class="headerlink" title="目前,有四个操作会忽略enumerable为false的属性。"></a>目前,有四个操作会忽略<code>enumerable</code>为<code>false</code>的属性。</h5><ol><li><code>for…in循环</code>：只遍历对象自身的和继承的可枚举的属性</li><li><code>Object.keys()</code>：返回对象自身的所有可枚举的属性的键名</li><li><code>JSON.stringify()</code>：只串行化对象自身的可枚举的属性</li><li><code>Object.assign()</code>： 忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;JavaScript遍历对象的几种方式&quot;&gt;&lt;a href=&quot;#JavaScript遍历对象的几种方式&quot; class=&quot;headerlink&quot; title=&quot;JavaScript遍历对象的几种方式&quot;&gt;&lt;/a&gt;JavaScript遍历对象的几种方式&lt;/h3&gt;&lt;h4 i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>creat-react-app</title>
    <link href="http://example.com/2020/07/01/creat-react-app/"/>
    <id>http://example.com/2020/07/01/creat-react-app/</id>
    <published>2020-07-01T12:43:35.000Z</published>
    <updated>2021-03-15T11:12:51.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、初始化React-App"><a href="#1、初始化React-App" class="headerlink" title="1、初始化React App"></a>1、初始化React App</h1><h2 id="1-1、安装"><a href="#1-1、安装" class="headerlink" title="1.1、安装"></a>1.1、安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 全局安装</span><br><span class="line">npm install -g create-react-app</span><br></pre></td></tr></table></figure><h2 id="1-2、创建一个app项目"><a href="#1-2、创建一个app项目" class="headerlink" title="1.2、创建一个app项目"></a>1.2、创建一个app项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 构建一个my-app的项目</span><br><span class="line">npm init react-app my-app</span><br></pre></td></tr></table></figure><h2 id="1-3、启动编译"><a href="#1-3、启动编译" class="headerlink" title="1.3、启动编译"></a>1.3、启动编译</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><h1 id="2、webpack配置"><a href="#2、webpack配置" class="headerlink" title="2、webpack配置"></a>2、webpack配置</h1><h2 id="2-1、react-app-rewired"><a href="#2-1、react-app-rewired" class="headerlink" title="2.1、react-app-rewired"></a>2.1、react-app-rewired</h2><blockquote><p>使用 react-app-rewired 添加或修改 webpack 的 配置</p></blockquote><h3 id="2-1-1、安装"><a href="#2-1-1、安装" class="headerlink" title="2.1.1、安装"></a>2.1.1、安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i react-app-rewired --save-dev</span><br></pre></td></tr></table></figure><h3 id="2-1-2、修改package-json"><a href="#2-1-2、修改package-json" class="headerlink" title="2.1.2、修改package.json"></a>2.1.2、修改package.json</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;react-app-rewired start&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;react-app-rewired build&quot;,</span><br><span class="line">    &quot;test&quot;: &quot;react-app-rewired test&quot;,</span><br><span class="line">    &quot;eject&quot;: &quot;react-scripts eject&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="2-1-3、新建配置文件"><a href="#2-1-3、新建配置文件" class="headerlink" title="2.1.3、新建配置文件"></a>2.1.3、新建配置文件</h3><blockquote><p>在根目录下新建config-override.js</p></blockquote><h4 id="1-配置路径"><a href="#1-配置路径" class="headerlink" title="(1) 配置路径"></a>(1) 配置路径</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const path &#x3D; require(&#39;path&#39;);</span><br><span class="line">function resolve(dir) &#123;</span><br><span class="line">    return path.join(__dirname, &#39;.&#39;, dir)</span><br><span class="line">&#125;</span><br><span class="line">module.exports &#x3D; function override(config, env) &#123;</span><br><span class="line">    config.resolve.alias &#x3D; &#123;</span><br><span class="line">        &#39;@components&#39;: resolve(&#39;src&#x2F;components&#39;),</span><br><span class="line">        &#39;@pages&#39;: resolve(&#39;src&#x2F;pages&#39;),</span><br><span class="line">        &#39;@util&#39;: resolve(&#39;src&#x2F;util&#39;),</span><br><span class="line">        &#39;@config&#39;: resolve(&#39;config&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">    return config;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-配置-loader"><a href="#2-配置-loader" class="headerlink" title="(2) 配置 loader"></a>(2) 配置 loader</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-2、proxy代理配置"><a href="#2-2、proxy代理配置" class="headerlink" title="2.2、proxy代理配置"></a>2.2、proxy代理配置</h2><h3 id="2-2-1、安装"><a href="#2-2-1、安装" class="headerlink" title="2.2.1、安装"></a>2.2.1、安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm http-proxy-middleware -dev</span><br></pre></td></tr></table></figure><h3 id="2-2-2、-新建配置文件"><a href="#2-2-2、-新建配置文件" class="headerlink" title="2.2.2、 新建配置文件"></a>2.2.2、 新建配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const proxy &#x3D; require(&#39;http-proxy-middleware&#39;);</span><br><span class="line">module.exports &#x3D; function (app) &#123;</span><br><span class="line">    app.use(</span><br><span class="line">        proxy(&#39;&#x2F;api&#39;, &#123;</span><br><span class="line">            target: &#39;http:&#x2F;&#x2F;localhost:4000&#39;,</span><br><span class="line">            changeOrigin: true,</span><br><span class="line">            pathRewrite: &#123;</span><br><span class="line">                &quot;^&#x2F;api&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    );</span><br><span class="line">    app.use(proxy(...));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意：代理路径匹配是懒惰的，当满足正则时则停止匹配。因此，当添加多个代理配置时，要注意代理路径的冲突，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.use(</span><br><span class="line">    proxy(&#39;&#x2F;api&#x2F;&#39;, &#123;</span><br><span class="line">        target: &#39;http:&#x2F;&#x2F;localhost:3000&#39;,</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line">app.use(</span><br><span class="line">    proxy(&#39;&#x2F;api2&#39;,&#123;</span><br><span class="line">        target: &#39;http:&#x2F;&#x2F;localhost:4000&#39;,</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>当请求路径为<code>/api2/audio</code> 时，我们想代理到 4000端口，但 却被3000端口代理了，这是因为<code>/api</code>满足<code>/api2</code>,则我们在配置时应该参照如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.use(</span><br><span class="line">    proxy(&#39;&#x2F;api&#39;, &#123;</span><br><span class="line">        target: &#39;http:&#x2F;&#x2F;localhost:3000&#39;,</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line">app.use(</span><br><span class="line">    proxy(&#39;&#x2F;api2&#x2F;&#39;,&#123;</span><br><span class="line">        target: &#39;http:&#x2F;&#x2F;localhost:4000&#39;,</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、初始化React-App&quot;&gt;&lt;a href=&quot;#1、初始化React-App&quot; class=&quot;headerlink&quot; title=&quot;1、初始化React App&quot;&gt;&lt;/a&gt;1、初始化React App&lt;/h1&gt;&lt;h2 id=&quot;1-1、安装&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>cookie session</title>
    <link href="http://example.com/2020/06/25/cookie-session/"/>
    <id>http://example.com/2020/06/25/cookie-session/</id>
    <published>2020-06-25T01:38:25.000Z</published>
    <updated>2021-03-15T11:13:09.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-cookie --save</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="引入与配置"><a href="#引入与配置" class="headerlink" title="引入与配置"></a>引入与配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const cookieParser &#x3D; require(&#39;cookie-parser&#39;);</span><br><span class="line">&#x2F;&#x2F;中间件 签名</span><br><span class="line">app.use(cookieParser(&#39;howlcn&#39;));</span><br></pre></td></tr></table></figure><h4 id="用cookie储存信息"><a href="#用cookie储存信息" class="headerlink" title="用cookie储存信息"></a>用cookie储存信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res.cookie(&#39;username&#39;,req.body.username,&#123;</span><br><span class="line">    maxAge:1000*60, &#x2F;&#x2F;cookie失效的时长（单位毫秒）</span><br><span class="line">    signed:true&#x2F;&#x2F;开启签名 方式用户篡改cookie</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="清空cookie"><a href="#清空cookie" class="headerlink" title="清空cookie"></a>清空cookie</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.cookie();</span><br></pre></td></tr></table></figure><h4 id="获取cookie中的数据"><a href="#获取cookie中的数据" class="headerlink" title="获取cookie中的数据"></a>获取cookie中的数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let username &#x3D; req.signedCookies.username;&#x2F;&#x2F;获取cookie中的username</span><br></pre></td></tr></table></figure><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>session底层还是调用了cookie</p><p><a href="https://i.loli.net/2019/05/30/5cef97889476388883.png"><img src="https://i.loli.net/2019/05/30/5cef97889476388883.png" alt="session"></a></p><h3 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-session --save</span><br></pre></td></tr></table></figure><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><h4 id="引入与配置-1"><a href="#引入与配置-1" class="headerlink" title="引入与配置"></a>引入与配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const express &#x3D; require(&#39;express&#39;);</span><br><span class="line">const app &#x3D; express();</span><br><span class="line">const expressSession &#x3D; require(&#39;express-session&#39;);</span><br><span class="line">&#x2F;&#x2F;配置expressSession中间件</span><br><span class="line">app.use(expressSession(&#123;</span><br><span class="line">    &#x2F;&#x2F;cookie的名字</span><br><span class="line">    name:&#39;howlcn&#39;,</span><br><span class="line">    &#x2F;&#x2F;cookie签名的信息</span><br><span class="line">    secret:&#39;howlcn&#39;,</span><br><span class="line">    cookie:&#123;</span><br><span class="line">        maxAge:100000</span><br><span class="line">    &#125;,</span><br><span class="line">    resave:false,</span><br><span class="line">    &#x2F;&#x2F;saveUninitialized为true时会将没有初始化的session的数据保存到storage中</span><br><span class="line">    &#x2F;&#x2F;一般没有初始化的session是没有数据的  不必保存  则设置为false</span><br><span class="line">    saveUninitialized: false,</span><br><span class="line">    &#x2F;&#x2F;为true时，某客户端每一次访问都会重置cookie的重置时间(maxAge)</span><br><span class="line">    rolling:true,</span><br><span class="line">    &#x2F;&#x2F;指定session数据存放的地方(数据库),默认保存在服务器内存中（null也是）</span><br><span class="line">    store:null</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h4 id="用session存储数据"><a href="#用session存储数据" class="headerlink" title="用session存储数据"></a>用session存储数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.session.username &#x3D; username;</span><br></pre></td></tr></table></figure><h4 id="清空session"><a href="#清空session" class="headerlink" title="清空session"></a>清空session</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.session.destroy()</span><br></pre></td></tr></table></figure><h4 id="获取session中的信息"><a href="#获取session中的信息" class="headerlink" title="获取session中的信息"></a>获取session中的信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let username &#x3D; req.session.username;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;cookie&quot;&gt;&lt;a href=&quot;#cookie&quot; class=&quot;headerlink&quot; title=&quot;cookie&quot;&gt;&lt;/a&gt;cookie&lt;/h2&gt;&lt;h3 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://example.com/2020/06/19/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://example.com/2020/06/19/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-06-19T14:14:21.000Z</published>
    <updated>2021-03-15T11:04:59.115Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则就是对字符串进行查找、匹配、替换等操作的一串“规则字符串”</p><p>使用方法：在一对斜杠之间添加正则表达式 如：**/** 正则表达式 <strong>/</strong></p><h2 id="正则表达式的组成"><a href="#正则表达式的组成" class="headerlink" title="正则表达式的组成"></a>正则表达式的组成</h2><ul><li>普通字符</li><li>特殊字符（元字符）：正则表达式中具有特殊意义的字符</li></ul><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><table><thead><tr><th><strong>\d</strong></th><th><strong>表示数字</strong></th></tr></thead><tbody><tr><td><strong>\D</strong></td><td><strong>非数字</strong></td></tr><tr><td><strong>\s</strong></td><td><strong>空格符</strong></td></tr><tr><td><strong>\S</strong></td><td><strong>非空格符</strong></td></tr><tr><td><strong>\w</strong></td><td><strong>字母或数字或下划线</strong></td></tr><tr><td><strong>\W</strong></td><td><strong>非字母、数字、下划线</strong></td></tr><tr><td><strong>.</strong></td><td><strong>任意字符（不包含换行符）</strong></td></tr><tr><td><strong>\b</strong></td><td><strong>单词边界</strong></td></tr></tbody></table><p>实例1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;\d&#x2F;; &#x2F;&#x2F;新建一个正则对象</span><br><span class="line"> var str &#x3D; &#39;1&#39;;</span><br><span class="line">console.log(reg.test(str)); &#x2F;&#x2F;true  str中含有数字</span><br><span class="line">&#x2F;&#x2F;test()是正则对象中的一个方法，它会判断str是否满足正则表达式，返回boolean</span><br></pre></td></tr></table></figure><h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><p>限定之前表达式出现的次数</p><table><thead><tr><th>*****</th><th><strong>重复0次或多次</strong></th></tr></thead><tbody><tr><td><strong>+</strong></td><td><strong>重复1次或多次</strong></td></tr><tr><td><strong>？</strong></td><td><strong>重复0次或1次</strong></td></tr><tr><td><strong>{n}</strong></td><td><strong>重复n次 (连续)</strong></td></tr><tr><td><strong>{n,}</strong></td><td><strong>重复至少n次 (连续)</strong></td></tr><tr><td><strong>{n,m}</strong></td><td><strong>重复n到m次 (连续)</strong></td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;\d*&#x2F;;</span><br><span class="line">console.log(reg.test(&#39;w&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;12&#39;));&#x2F;&#x2F;true</span><br><span class="line">var reg &#x3D; &#x2F;\d+&#x2F;;</span><br><span class="line">console.log(reg.test(&#39;w&#39;));&#x2F;&#x2F;false</span><br><span class="line">console.log(reg.test(&#39;12&#39;));&#x2F;&#x2F;true</span><br><span class="line">var reg &#x3D; &#x2F;\d?&#x2F;;</span><br><span class="line">console.log(reg.test(&#39;w&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;12&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;w12&#39;));&#x2F;&#x2F;true</span><br><span class="line">&#x2F;&#x2F;这里12出现了两次，不满足“重复0次或1次”的条件为什么显示为true呢？</span><br><span class="line">&#x2F;&#x2F;当执行test()时，只要字符串中有部分满足条件则返回true）</span><br><span class="line">&#x2F;&#x2F;解决办法var reg &#x3D; &#x2F;^\d?$&#x2F;;  加上开始结束符（后面会介绍）</span><br><span class="line">var reg &#x3D; &#x2F;\d&#123;2&#125;&#x2F;;&#x2F;&#x2F;&#123;n&#125;</span><br><span class="line">console.log(reg.test(&#39;2&#39;));&#x2F;&#x2F;false</span><br><span class="line">console.log(reg.test(&#39;23&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;2w3&#39;));&#x2F;&#x2F;false  不连续时匹配失败</span><br><span class="line">console.log(reg.test(&#39;234&#39;));&#x2F;&#x2F;true  (理应为false)原因同上</span><br><span class="line">console.log(reg.test(&#39;ab234&#39;));&#x2F;&#x2F;true  (理应为false)原因同上  解决办法同上</span><br><span class="line">var reg &#x3D; &#x2F;\d&#123;2,&#125;&#x2F;;&#x2F;&#x2F;&#123;n,&#125;  &#x2F;&#x2F;同样存在以上问题</span><br><span class="line">var reg &#x3D; &#x2F;\d&#123;2,6&#125;&#x2F;;&#x2F;&#x2F;&#123;n,m&#125;  &#x2F;&#x2F;同样存在以上问题</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="范围符"><a href="#范围符" class="headerlink" title="范围符[ ]"></a>范围符[ ]</h2><p>1、[a-z]、[A-Z]、[0-9],也可以综合写成[a-zA-Z0-9]；当然这范围是自己定义的，比如[a-b]，范围是a到b。</p><p>2、[\u4e00-\u9fa5] 匹配汉字的范围 其中\u4e00，\u9fa5是中日韩汉字Unicode表中对应的编码 4e00对应“一” 9fa5对应“龥”</p><p><a href="http://www.chi2ko.com/tool/CJK.htm">中日韩汉字Unicode表</a></p><p>3、[ab5&amp;@],仅匹配 a 或 b 或 5 或 &amp; 或 @</p><p>4、**[^ab5&amp;@]** 匹配除 a 或 b 或 5 或 &amp; 或 @之外的内容 （注意此处^是在[ ]内的，<strong>区别于开始符^</strong>,两者所处位置不同）</p><p>5、3 | a 匹配3或者a字符</p><h2 id="开始结束符号"><a href="#开始结束符号" class="headerlink" title="开始结束符号"></a>开始结束符号</h2><table><thead><tr><th><strong>^</strong></th><th><strong>开始符（强制规定匹配开始的地方）</strong></th></tr></thead><tbody><tr><td><strong>$</strong></td><td><strong>结束符（强制规定匹配结束的地方）</strong></td></tr></tbody></table><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">^\d 字符串要以数字开始，数字只能出现一次</span><br><span class="line">\d$  字符串要以数字结束，数字只能出现一次</span><br><span class="line">^\d$  字符串要以数字开始和结束，数字只能出现一次</span><br><span class="line">\d+$  字符串要以数字开始，以数字结束，数字只能出现一次</span><br><span class="line">^\d?$  字符串要以数字开头和结束，数字出现0次或1次</span><br></pre></td></tr></table></figure><p>我们来解释 <strong>var reg = /\d?/;</strong> 例子中出现的问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;\d?&#x2F;;</span><br><span class="line">console.log(reg.test(&#39;w&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;12&#39;));&#x2F;&#x2F;开始检测，当检测到 1 时，因为满足了数字出现0次，匹配成功，返回true，此时结束位置在1和2之间</span><br><span class="line">&#x2F;&#x2F;加入开始结束符</span><br><span class="line">var reg &#x3D; &#x2F;^\d?$&#x2F;;</span><br><span class="line">console.log(reg.test(&#39;w&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;12&#39;));&#x2F;&#x2F;当加入开始结束字符后，开始匹配位置强制从1开始 2结束</span><br><span class="line">&#x2F;&#x2F;则12是由两个数字的  不符合“重复0次或1次”的条件，则为false</span><br></pre></td></tr></table></figure><p>我们来解释 <strong>var reg = /\d{2}/;</strong> 例子中出现的问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;\d&#123;2&#125;&#x2F;;&#x2F;&#x2F;&#123;n&#125;</span><br><span class="line">console.log(reg.test(&#39;2&#39;));&#x2F;&#x2F;false</span><br><span class="line">console.log(reg.test(&#39;23&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;234&#39;));&#x2F;&#x2F;true  开始字符为2  结束字符为3</span><br><span class="line">console.log(reg.test(&#39;ww234&#39;));&#x2F;&#x2F;true 开始字符为2  结束字符为3</span><br><span class="line">var reg &#x3D; &#x2F;^\d&#123;2&#125;$&#x2F;;&#x2F;&#x2F;&#123;n&#125;</span><br><span class="line">console.log(reg.test(&#39;2&#39;));&#x2F;&#x2F;false</span><br><span class="line">console.log(reg.test(&#39;23&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;234&#39;));&#x2F;&#x2F;false  开始字符为2  结束字符为4</span><br><span class="line">console.log(reg.test(&#39;ab234&#39;));&#x2F;&#x2F;false 开始字符为a  结束字符为4</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="正则对象的创建方式"><a href="#正则对象的创建方式" class="headerlink" title="正则对象的创建方式"></a>正则对象的创建方式</h2><h3 id="1、new-RegExp"><a href="#1、new-RegExp" class="headerlink" title="1、new RegExp()"></a>1、new RegExp()</h3><p>RegExp(reg,msg) 参数一：正则表达式</p><p>参数二：附加条件（如：i 忽略大小写，g 全局匹配）</p><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var reg &#x3D; new RegExp(&#39;\\w+&#39;,&#39;ig&#39;);  &#x2F;&#x2F;注意，此处第一个\是转义字符，因为参数一不能直接传入正则表达式</span><br><span class="line">var reg &#x3D; new RegExp(&#39;[a-z]&#39;,&#39;ig&#39;);</span><br><span class="line">var str &#x3D; &quot;AaaC2_&quot;;</span><br><span class="line">console.log(reg.test(str));&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><h3 id="2、简写"><a href="#2、简写" class="headerlink" title="2、简写"></a>2、简写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;[a-z]&#x2F;ig;</span><br><span class="line">var str &#x3D; &quot;AaaC2_&quot;;</span><br><span class="line">console.log(reg.test(str));&#x2F;&#x2F;true</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="正则对象的方法"><a href="#正则对象的方法" class="headerlink" title="正则对象的方法"></a>正则对象的方法</h2><p>RegExp.test(‘字符串’); 判断字符串知否满足正则表达式 返回布尔值</p><p>RegExp.exec(‘字符串’); 判断字符串知否满足正则表达式 将找到的内容以数组的形式返回</p><p>1、不使用 “<code>g</code>“ 标志时,每次都返回第一个找的内容 而不继续向后查找</p><p>2、当正则表达式使用 “<code>g</code>“ 标志时，可以多次执行 <code>exec</code> 方法来查找同一个字符串中的成功匹配。当你这样做时，查找将从正则表达式的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex"><code>lastIndex</code></a> 属性指定的位置开始</p><p><strong>lastIndex</strong>:</p><p>只有正则表达式使用了表示全局检索的 “<code>g</code>“ 标志时，该属性才会起作用。此时应用下面的规则：</p><ul><li>如果 <code>lastIndex</code> 大于字符串的长度，则 <code>regexp.test</code> 和 <code>regexp.exec</code> 将会匹配失败，然后 <code>lastIndex</code> 被设置为 0。</li><li>如果 <code>lastIndex</code> 等于字符串的长度，且该正则表达式匹配空字符串，则该正则表达式匹配从 <code>lastIndex</code> 开始的字符串。（then the regular expression matches input starting at <code>lastIndex</code>.）</li><li>如果 <code>lastIndex</code> 等于字符串的长度，且该正则表达式不匹配空字符串 ，则该正则表达式不匹配字符串，<code>lastIndex</code> 被设置为 0.。</li><li>否则，<code>lastIndex</code> 被设置为紧随最近一次成功匹配的下一个位置。</li></ul><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;找出所有三个英文字母组成的  并且以A开头的单词</span><br><span class="line">var str &#x3D; &#39;Asd Asss wes sgetgs x Adv Wdf&#39;;</span><br><span class="line">var reg &#x3D; &#x2F;\bA[A-Za-z]&#123;2&#125;\b&#x2F;g;</span><br><span class="line">console.log(reg.lastIndex);&#x2F;&#x2F;初始值为0</span><br><span class="line">var word &#x3D; reg.exec(str);&#x2F;&#x2F;￥1￥</span><br><span class="line">console.log(reg.lastIndex);&#x2F;&#x2F;3</span><br><span class="line">while(word)&#123;</span><br><span class="line">    console.log(word);</span><br><span class="line">    word &#x3D; reg.exec(str);&#x2F;&#x2F;￥2￥</span><br><span class="line">    console.log(reg.lastIndex);</span><br><span class="line">&#125;</span><br><span class="line">onsole.log(word);&#x2F;&#x2F;null</span><br><span class="line">console.log(reg.lastIndex);&#x2F;&#x2F;0</span><br></pre></td></tr></table></figure><p>该函数运行的实质：exec每一次执行都有开始位置，而这个开始位置是由RegExp对象的lastIndex属性值所决定的；</p><p>以下为该段代码的执行顺序与解析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1、reg.lastIndex 的初始值为0</span><br><span class="line">2、执行￥1￥处的exec时，当前的lastIndex数值为0，则exec从字符串的0位置（即A字符）开始。执行结束，将**所找的字符串**（Asd）以数组的形式返回给word，并修改reg.lastIndex的值为&quot; **所找到的字符串最后一个的位置的下一个位置** &quot;（也就是d下标加一，为3），</span><br><span class="line">3、执行while循环，word此时为[Asd]数组，while语句判断成功</span><br><span class="line">4、执行￥2￥处的exec，此时reg.lastIndex为3，则从字符串中下标为3的字符开始执行，找到 &quot;Adv&quot;,  v的下标为24，则reg.lastIndex的值被设置为25，word此时为[Adv]数组</span><br><span class="line">5、判断while 成功</span><br><span class="line">6、执行￥2￥处的exec，此时reg.lastIndex为25，则从字符串中下标为25的字符开始执行，未找到满足条件的内容，则返回null给word，并将reg.lastIndex设为0；</span><br><span class="line">7、判断while,此时word为null，判断失败，则跳出循环</span><br><span class="line">8、程序结束</span><br></pre></td></tr></table></figure><h2 id="懒惰模式与贪婪模式"><a href="#懒惰模式与贪婪模式" class="headerlink" title="懒惰模式与贪婪模式"></a>懒惰模式与贪婪模式</h2><p>懒惰模式：在满足条件的前提下，尽可能<strong>少</strong>的匹配字符</p><p>贪婪模式：在满足条件的前提下，尽可能<strong>多</strong>的匹配字符</p><p>正则表达式的量词有：* + ？ {}</p><p>量词默认是贪婪模式，当在量词之后加上?时，将贪婪模式转换为懒惰模式。</p><h2 id="分组提取"><a href="#分组提取" class="headerlink" title="分组提取"></a>分组提取</h2><p>正则中（）表示分组</p><p>若存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((((a))((b)))(c))</span><br></pre></td></tr></table></figure><p>则第一组；(((a))((b)))(c)</p><p>第二组：((a))</p><p>第三组：(a)</p><p>第四组：(b)</p><p>第五组：(c)</p><p>找法：从左往右找左括号(</p><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;((\d+)(\w+))&#x2F;;</span><br><span class="line">var str &#x3D; &quot;123abc_c&quot;</span><br><span class="line">if(reg.test(str))&#123;</span><br><span class="line">    &#x2F;&#x2F;$后的数字 类似数组的下标</span><br><span class="line">    console.log(RegExp.$1);&#x2F;&#x2F;获得第一组(\d+)(\w+)的内容  则是123abc_c</span><br><span class="line">    console.log(RegExp.$2);&#x2F;&#x2F;获得第二组(\d+)的内容  则是123</span><br><span class="line">    console.log(RegExp.$3);&#x2F;&#x2F;获得第二组(\w+)的内容  则是abc_c</span><br><span class="line">&#125;</span><br><span class="line">字符串</span><br></pre></td></tr></table></figure><h2 id="字符串中正则的使用"><a href="#字符串中正则的使用" class="headerlink" title="字符串中正则的使用"></a>字符串中正则的使用</h2><p>方法：</p><table><thead><tr><th><strong>String.match(正则对象)</strong></th><th><strong>返回符合正则条件的集合</strong></th></tr></thead><tbody><tr><td><strong>String.replace(正则对象,”替换的字符串”)</strong></td><td><strong>替换字符串，若要全局替换，正则对象要加g</strong></td></tr><tr><td><strong>String.search(正则对象)</strong></td><td><strong>查找字符串，返回查找内容的第一次出现的位置</strong></td></tr><tr><td><strong>String.split(正则对象)</strong></td><td><strong>切割字符串，返回切割后的数组</strong></td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;match</span><br><span class="line">var str&#x3D;&quot;abc123ee23f90&quot;;</span><br><span class="line">&#x2F;&#x2F;将字符串中所有出现的每一个数字提取出来</span><br><span class="line">var arr &#x3D;  str.match(&#x2F;\d&#x2F;g);</span><br><span class="line">console.log(arr);</span><br><span class="line">&#x2F;&#x2F;将字符串中所有出现的连续的数字提取出来</span><br><span class="line">var arr &#x3D;  str.match(&#x2F;\d+&#x2F;g);</span><br><span class="line">console.log(arr);</span><br><span class="line">&#x2F;&#x2F;replace</span><br><span class="line">&#x2F;&#x2F;替换所有 - +</span><br><span class="line">var str &#x3D; &quot;a-b-+b-c&quot;;</span><br><span class="line">console.log(str.replace(&#x2F;-|\+&#x2F;g,&quot;*&quot;));&#x2F;&#x2F;结果a*b**b*c</span><br><span class="line">&#x2F;&#x2F;若不加g  则结果为a*b-+b-c</span><br><span class="line">&#x2F;&#x2F;search</span><br><span class="line">&#x2F;&#x2F;忽略大小写  找到第一个b的下标</span><br><span class="line">var str &#x3D; &quot;a-b-b-c&quot;;</span><br><span class="line">console.log(str.search(&#x2F;B&#x2F;i));&#x2F;&#x2F;结果2</span><br><span class="line">&#x2F;&#x2F;split</span><br><span class="line">var str&#x3D;&quot;a|b|c|&quot;;</span><br><span class="line">console.log(str.split(&#x2F;\|&#x2F;));&#x2F;&#x2F;结果  &quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h1&gt;&lt;p&gt;正则就是对字符串进行查找、匹配、替换等操作的一串“规则字符串”&lt;/p&gt;
&lt;p&gt;使用方法：在一对斜杠之间添加正则表达式</summary>
      
    
    
    
    
  </entry>
  
</feed>
